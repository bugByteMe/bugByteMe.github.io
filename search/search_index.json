{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"jrguo\u200b\u7684\u200b\u4ee3\u7801\u200b\u7a7a\u95f4\u200b\uff01","text":"<p> \u200b\u7ea6\u200b 32 \u200b\u4e2a\u200b\u5b57\u200b </p> Info <p>\u200b\u653e\u200b\u4e86\u200b\u4e9b\u200b\u4e2a\u4eba\u200b\u968f\u7b14\u200b\u4e0e\u200b\u7b14\u8bb0\u200b\u3002</p> Warning <p>\u200b\u6d89\u53ca\u200b\u5386\u5e74\u8bd5\u9898\u200b\uff0c\u200b\u5982\u200b\u6709\u200b\u4fb5\u6743\u200b\uff0c\u200b\u8bf7\u200b\u8054\u7cfb\u200b\u6211\u200b\u3002</p>"},{"location":"recent.html","title":"\u6700\u8fd1\u200b\u66f4\u65b0","text":"<p> \u200b\u7ea6\u200b 199 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"recent.html#\u6b63\u5728\u66f4\u65b0\u6b22\u8fce\u5173\u6ce8","title":"\u6b63\u5728\u200b\u66f4\u65b0\u200b\uff0c\u200b\u6b22\u8fce\u200b\u5173\u6ce8\u200b\uff01","text":"<ul> <li>C++ \u200b\u5bf9\u200b C++ \u200b\u7684\u200b\u91cd\u65b0\u6574\u7406\u200b</li> </ul>"},{"location":"recent.html#\u5176\u4ed6\u8fd1\u671f\u66f4\u65b0\u7684\u63a8\u8350\u5185\u5bb9","title":"\u5176\u4ed6\u200b\u8fd1\u671f\u200b\u66f4\u65b0\u200b\u7684\u200b\u63a8\u8350\u200b\u5185\u5bb9","text":"<ul> <li>\u200b\u751f\u6d3b\u200b \u200b\u54b8\u9c7c\u200b\u6684\u200b\u5b66\u200b\u505a\u996d\u200b\uff01</li> <li>\u200b\u9762\u7ecf\u200b \u200b\u6691\u671f\u200b\u5b9e\u4e60\u200b\u548c\u200b\u79cb\u62db\u200b\u590d\u76d8\u200b \u200b\u57fa\u672c\u200b\u5df2\u7ecf\u200b\u66f4\u65b0\u200b\u5b8c\u200b\u4e86\u200b\uff01</li> <li>\u200b\u6838\u5fc3\u200b\u77e5\u8bc6\u200b \u200b\u7f16\u8bd1\u200b\u539f\u7406\u200b \u200b\u5df2\u7ecf\u200b\u642c\u200b\u8fc7\u6765\u200b\u4e86\u200b\uff01</li> <li>\u200b\u751f\u6d3b\u200b \u200b\u684c\u6e38\u200b\u6e38\u73a9\u200b\u8bb0\u5f55\u200b\uff01</li> <li>\u200b\u6838\u5fc3\u200b\u77e5\u8bc6\u200b \u200b\u8ba1\u7b97\u673a\u200b\u7ec4\u6210\u200b \u200b\u5df2\u7ecf\u200b\u642c\u200b\u8fc7\u6765\u200b\u4e86\u200b\uff01</li> <li>\u200b\u6742\u9879\u200b \u200b\u535a\u5ba2\u200b\u642d\u5efa\u200b\u8bb0\u5f55\u200b</li> <li>\u200b\u6838\u5fc3\u200b\u77e5\u8bc6\u200b \u200b\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u5df2\u7ecf\u200b\u6574\u7406\u200b\u5b8c\u200b\u4e86\u200b\uff01</li> <li>PL PPL \u200b\u8bfe\u7a0b\u200b\u7b14\u8bb0\u200b \u200b\u5199\u200b\u5230\u200b\u4e86\u200b\u7b2c\u200b 10 \u200b\u7ae0\u200b\uff0c\u200b\u540e\u9762\u200b\u7684\u200b\u6ca1\u200b\u529b\u6c14\u200b\u5199\u200b\u4e86\u200b QAQ \u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u8865\u5168\u200b\u7684\u200b\u8ba1\u5212\u200b\u3002\u200b\u53e6\u5916\u200b\u628a\u200b Final \u200b\u4e2d\u200b\u6211\u200b\u51fa\u200b\u7684\u200b\u90e8\u5206\u200b\u7684\u200b\u9898\u76ee\u200b\u548c\u200b\u89e3\u7b54\u200b\u653e\u8fc7\u6765\u200b\u4e86\u200b\uff01</li> <li>\u200b\u751f\u6d3b\u200b \u200b\u5173\u4e8e\u200b\u4eb2\u5bc6\u5173\u7cfb\u200b\u7684\u200b\u788e\u200b\u788e\u5ff5\u200b</li> <li>C++ \u200b\u5feb\u901f\u200b\u5165\u95e8\u200b C++ \u200b\u5199\u9898\u200b\uff01</li> <li>C++ \u200b\u7406\u89e3\u200b STL \u2014\u2014 \u200b\u8fed\u4ee3\u200b\u5668\u200b\u4e0e\u200b\u51fd\u6570\u200b\u5bf9\u8c61\u200b</li> </ul>"},{"location":"tmp.html","title":"111","text":"<p> \u200b\u7ea6\u200b 98 \u200b\u4e2a\u200b\u5b57\u200b </p> \u200b\u5f00\u59cb\u200b \u200b\u91cd\u7f6e\u200b \u200b\u663e\u793a\u200b\u7ed3\u679c"},{"location":"ML4360/DeepLearning%20notes.html","title":"DeepLearning notes","text":""},{"location":"ML4360/DeepLearning%20notes.html#cross-entropy","title":"Cross-Entropy","text":"<p>\u200b\u4e00\u6587\u200b\u641e\u61c2\u200b\u71b5\u200b(Entropy),\u200b\u4ea4\u53c9\u200b\u71b5\u200b(Cross-Entropy) - \u200b\u77e5\u4e4e\u200b (zhihu.com)</p> <ul> <li>Cross-entropy between real distribution (ground truth) and predicted distribution.</li> </ul> <pre><code>nn.BCEWithLogitsLoss(reduction='none')    # Sigmoid + binary cross entropy loss\n</code></pre> <ul> <li> <p>Sigmoid</p> <p>\\(\\mathbb R \\rightarrow [0,1]\\)</p> </li> </ul>"},{"location":"ML4360/DeepLearning%20notes.html#models","title":"Models","text":"<ul> <li> <p>Layers</p> <p>```python layers = [         torch.nn.Linear(in_features = 3, out_features=size_h),         torch.nn.ReLU(),         torch.nn.Linear(in_features = size_h, out_features=size_h),         torch.nn.ReLU(),         torch.nn.Linear(in_features = size_h, out_features=size_h),         torch.nn.ReLU(),       # ...</p> </li> </ul> <p> \u200b\u7ea6\u200b 70 \u200b\u4e2a\u200b\u5b57\u200b  16 \u200b\u884c\u200b\u4ee3\u7801\u200b </p> <pre><code>      torch.nn.Linear(in_features = size_h, out_features=1)\n  ]\n</code></pre> <p>self.main = nn.Sequential(*layers)   ```</p> <p>input layer + hidden layers + output layers</p>"},{"location":"ML4360/DeepLearning%20notes.html#training","title":"Training","text":"<ul> <li> <p>Auto grad</p> <pre><code>loss.backward()\n</code></pre> <p>\u200b    Loss is computed by model output, thus on the computation graph.</p> </li> </ul> <p>\u200b   We can exploit auto grad.</p> <ul> <li> <p>Optimize</p> <pre><code>optimizer.step()\n</code></pre> <p>model parameters are passed as an inference to instance optimizer.</p> </li> </ul>"},{"location":"ML4360/DeepLearning%20notes.html#testing","title":"Testing","text":"<ul> <li> <p>No grad</p> <pre><code>with torch.no_grad():\n    # ...\n</code></pre> </li> </ul>"},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html","title":"Self-Supervised Learning","text":"<p> \u200b\u7ea6\u200b 205 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html#task-specific-models","title":"Task Specific Models","text":""},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html#pretext-task","title":"Pretext Task","text":"<p>*Goal: *Define an auxiliary task (e.g., rotation) for pre-training with lots of unlabeled data.</p> <p>Then, remove last layers, train smaller network on fewer data of target task.</p> <p>Pre-train feature function \\(f_{\\theta}\\), and fine tune the readout layer. (e.g. MLP, classifiers)</p> <p>e.g.:</p> <p></p> <ul> <li> <p>Short cuts</p> <p>Useful for solving pre-text but not target task.</p> <p>The Neural Network often finds the most simple way to complete a task.(edge continuity...)</p> </li> </ul>"},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html#contrastive-learning","title":"Contrastive Learning","text":"<p>*Goal: *the pre-training task and the transfer task are \u201caligned\u201d</p> <p></p> <ul> <li>Score functions are often chosen as cosine similarity: \\(s(\\mathbf{f_1, f_2}) = \\mathbf{\\frac{f_1^T f_2}{||f_1||\\ ||f_2||}}\\), similar to the siame network!</li> </ul> <ul> <li> <p>Loss function: multi-class cross entropy loss</p> <p></p> <p>This is also known as the InfoNCE loss. For mutual information \\(MI\\), \\(MI[f(x), f(x^+)] \\geq log(N) - \\mathcal L\\)</p> <p>More sample \\(N\\), tighter bound, larger mutual information.</p> </li> </ul>"},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html#momentum-contrast","title":"Momentum Contrast","text":""},{"location":"ML4360/Lec11%28Self-Supervised%20Learning%29.html#barlow-twins","title":"Barlow Twins","text":"<p>**Goal: ** reduce redundancy between neurons, as well as increase similarity between \\(Z^A, Z^B\\).</p> <p>In other words, Neurons should be invariant to data augmentations but independent of others.</p> <p></p> <p>\\(\\mathcal C\\) is just \\(Cov(Z^A, Z^B)\\) ! \\(\\mathcal C_{i,j}\\) = 0, means no corrolation.</p> <p>No negative samples needed any more!</p>"},{"location":"ML4360/Lec12%20Diverse%20Topics.html","title":"Diverse Topics","text":"<p> \u200b\u7ea6\u200b 27 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec12%20Diverse%20Topics.html#adversarial-attack","title":"Adversarial Attack","text":"<p>\\(f_{\\theta}(x) \\rightarrow f(\\theta, x)\\), we optimize input x instead of weight \\(\\theta\\) to get the wrong result. (\\(f(\\theta, x) = y_{fake}\\))</p>"},{"location":"ML4360/Lec2%28ImageFormation%29.html","title":"Image Formation","text":""},{"location":"ML4360/Lec2%28ImageFormation%29.html#primitives-and-transformations","title":"Primitives and Transformations","text":"<ul> <li> <p>inhomogeneous coordinate</p> <p>\\(\\tilde x  = (\\tilde x, \\tilde y, \\tilde z, \\tilde w)^T\\)</p> </li> </ul> <ul> <li> <p>homogeneous coordinate</p> \\[x = (x, y, z)^T\\] </li> </ul> <ul> <li>Transformations</li> </ul> <p></p> <ul> <li> <p>Transformation relation of lines and pixels</p> <p>\\(\\tilde{x'} = \\tilde H \\tilde x\\)</p> <p>\\(\\tilde {l'}\\tilde x =  \\tilde{l'^T}\\tilde H \\tilde x = (\\tilde {H^T} \\tilde l' )^T \\tilde x = \\tilde l ^T \\tilde x = 0\\)</p> <p>\\(\\tilde l' = \\tilde{H^{-T}} \\tilde l\\)</p> </li> </ul> <ul> <li> <p>Direct Linear Transform for Homography Estimation</p> <p>``` u, d, v_trans = np.linalg.svd(A)</p> </li> </ul> <p> \u200b\u7ea6\u200b 114 \u200b\u4e2a\u200b\u5b57\u200b </p> <p>H = v_trans[-1].reshape(3,3)   ```</p>"},{"location":"ML4360/Lec2%28ImageFormation%29.html#h-is-the-homography-function","title":"H is the homography function","text":""},{"location":"ML4360/Lec2%28ImageFormation%29.html#geometric-image-formation","title":"Geometric Image Formation","text":"<ul> <li> <p>Orthographic projection</p> <p></p> </li> </ul> <ul> <li> <p>Perspective projection</p> <p></p> </li> </ul> <p></p> <p>K is the camera intrinsic, intrinsic matrix</p> <p>s = 0 in practice</p> <ul> <li> <p>Chaining transformation</p> <p></p> <p></p> </li> </ul>"},{"location":"ML4360/Lec2%28ImageFormation%29.html#photometric-image-formation","title":"Photometric Image formation","text":"<ul> <li> <p>Rendering equation</p> <p></p> </li> </ul>"},{"location":"ML4360/Lec3.html","title":"SFM(Structure from Motion)","text":"<p> \u200b\u7ea6\u200b 207 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ML4360/Lec3.html#two-frame-structure-from-motion","title":"Two-frame Structure-from-Motion","text":"<ul> <li> <p>Epipolar Geometry</p> <p>Goal: Recovery of camera pose (and 3D structure) from image correspondences. The required relationships are described by the two-view epipolar geometry.</p> </li> </ul> <p></p> <p></p> <p></p> <p>\u200b   To solve the essential matrix by epipolar constraint(the same as foundation matrix), we use 8-point algorithm.</p> <ul> <li>8-Point Algorithm</li> </ul> <p></p> <p>One corresponding point pair provide an equation above.</p> <p>1) \\(N\\) points pair compose a \\(N * 9\\) matrix \\(\\bf A\\)</p> <p>\\(\\bf{A = USV^T}\\), where \\(\\bf S\\) is the diagonal matrix of singular value</p> <p>\\(\\bf {F} \\in \\R^{3x3}\\) is the last column of \\(\\bf V\\), that is the last row of \\(\\bf V^T\\)</p> <p>2) \\(\\bf F\\) must be of rank 2</p> <p>\\(\\bf{F = USV^T}\\), set the third(smallest) singular value to zero, get \\(\\bf S'\\)</p> <p>Compute result \\(\\bf F = US'V^T\\)</p> <p>*. Points should be normalized s.t. \\(\\sum x_i = 0, \\sum y_i = 0, \\sum{ \\sqrt{x_i^2 + y_i^2}} = \\sqrt{2}\\)</p> <p>\\(scale = \\frac{\\sqrt{2}}{ \\bf ||\\bar x||^2}\\)</p> <p>\\(T = \\left [ \\begin{array}{l} scale &amp; 0 &amp; -sacle*\\mu_x \\\\ 0 &amp; scale &amp; -scale*\\mu_y \\\\ 0 &amp; 0 &amp; 1\\end{array} \\right]\\)</p> <p>\\(\\bf \\bar x_1' = T \\bar x_1\\)</p> <p>\\(\\bf \\bar x_2' = T' \\bar x_2\\)</p> <p>\\(\\bf F' = T'^TFT\\)</p> <ul> <li> <p>Triangulation</p> <p>Goal: Given the camera intrinsics and extrinsics, how can we recover 3D geometry?</p> <p></p> <p></p> </li> </ul>"},{"location":"ML4360/Lec4.html","title":"Two-View Stereo Matching","text":"<p> \u200b\u7ea6\u200b 85 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec4.html#two-view-stereo-matching","title":"Two-View Stereo Matching","text":"<ul> <li>Task: Construct a dense 3D model from 2 images of a static scene </li> </ul> <p>Pipeline: </p> <ol> <li>Calibrate cameras intrinsically and extrinsically (Lecture 3.1)</li> <li>Rectify images given the calibration</li> <li>Compute disparity map for reference image</li> <li>Remove outliers using consistency/occlusion test</li> <li>Obtain depth from disparity using camera calibration</li> <li>Construct 3D model, e.g., via volumetric fusing and meshing (Lecture 8.4)</li> </ol> <ul> <li> <p>Image rectification</p> <p>Goal:Correspondences search along horizontal scanlines (simplifies implementation)</p> <p></p> <p></p> </li> </ul>"},{"location":"ML4360/Lec4.html#block-matching","title":"Block Matching","text":""},{"location":"ML4360/Lec4.html#siamese-networks","title":"Siamese Networks","text":"<p>Loss function:</p> <p>\\(L = max(0, m + s_- - s_+)\\)</p>"},{"location":"ML4360/Lec4.html#spatial-regularization","title":"Spatial regularization","text":"<p>more smooth between pixels</p> <p></p>"},{"location":"ML4360/Lec5%28Graphical%20Models%29.html","title":"Markov Random Field","text":"<p> \u200b\u7ea6\u200b 71 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec5%28Graphical%20Models%29.html#markov-random-fieldmrf","title":"Markov Random Field(MRF)","text":"<p>Where \\(\\mathbf{ a,b,c}\\) are random variables.</p>"},{"location":"ML4360/Lec5%28Graphical%20Models%29.html#factor-graphs","title":"Factor Graphs","text":""},{"location":"ML4360/Lec5%28Graphical%20Models%29.html#belief-propagation","title":"Belief Propagation","text":"<p>Inference in factor graphs</p> <p></p> <ul> <li> <p>Factor to variable message</p> <p></p> </li> </ul> <ul> <li> <p>Variable to factor message</p> <p></p> </li> </ul>"},{"location":"ML4360/Lec5%28Graphical%20Models%29.html#sum-product-algorithm","title":"Sum-Product Algorithm","text":"<p>With initialization:</p> <p></p> <p>Calculate marginals:</p> <p>\\(p(\\mathbf x) \\propto \\prod_{f \\in ne(x)} \\mu_{f\\rightarrow x}(x)\\)</p>"},{"location":"ML4360/Lec5%28Graphical%20Models%29.html#max-product-algorithm","title":"Max product Algorithm","text":"<p>Convert \\(\\sum to \\ max()\\)</p> <p></p>"},{"location":"ML4360/Lec7%28Learning%20in%20GMs%29.html","title":"Conditional Random Fields","text":"<p> \u200b\u7ea6\u200b 138 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec7%28Learning%20in%20GMs%29.html#conditional-random-fieldscrf","title":"Conditional Random Fields(CRF)","text":""},{"location":"ML4360/Lec7%28Learning%20in%20GMs%29.html#parameter-estimation","title":"Parameter Estimation","text":"<ul> <li>\\(p (\\mathcal{Y|X}, \\mathbf w)\\) denotes the probability of output \\(\\mathcal Y\\) with the input \\(\\mathcal X\\) and parameter \\(\\mathbf w\\)</li> </ul> <ul> <li>\\(\\mathcal Y\\) can be an arbitrary picture \\(\\in \\mathbb Y\\)</li> </ul> <ul> <li>\\(\\psi\\) is the feature function (prior knowledge or learned). e.g. pair-wise feature: \\(\\psi_{i,j}(xi,yi)\\)</li> </ul> <ul> <li>vector/matrix \\(\\mathbf w\\) is of \\(w_i\\) for each feature function \\(\\psi_i\\). The inner product is the simplicity form of \\(\\sum w_i\\psi_i\\)</li> </ul> <p>We needs to maximize the probability (distribution) on the given dataset:</p> <p></p> <p>#### Deep Structured Models</p> <p>Feature function \\(\\psi\\) can be non-linear with respect to parameter \\(\\mathbf w\\), by alter the inner product \\(&lt;.&gt;\\) to \\(\\large{\\psi(\\mathcal {X,Y}, \\mathbf w)}\\), which can be learned by deep neural network</p> <ul> <li>The RayNet</li> </ul> <p>CNN extracts local features, and CRF controls global constrains!</p>"},{"location":"ML4360/Lec8%28Shape-from-X%29.html","title":"Shape-from-X","text":"<p> \u200b\u7ea6\u200b 105 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec8%28Shape-from-X%29.html#shape-from-shading","title":"Shape from shading","text":""},{"location":"ML4360/Lec8%28Shape-from-X%29.html#gradient-space-representation","title":"Gradient Space Representation","text":"<p>A 3-dim free vector represented by gradients.(\\(\\frac{\\partial z}{\\partial z} = 1\\) is omitted)</p> <p></p> <p>It is actually the intersection with plane \\(z = 1\\)</p> <p></p>"},{"location":"ML4360/Lec8%28Shape-from-X%29.html#photometric-stereo","title":"Photometric stereo","text":"<p>Render equation \\(I = \\rho \\ \\mathbf s^T \\mathbf n\\)</p> <p>For different light sources:</p> <p></p> <p>\\(\\mathbf{\\tilde n = (S^T S)^{-1} S^T I}\\)</p>"},{"location":"ML4360/Lec8%28Shape-from-X%29.html#shape-from-x","title":"Shape from X","text":""},{"location":"ML4360/Lec8%28Shape-from-X%29.html#volumetric-fusion","title":"Volumetric Fusion","text":"<ul> <li> <p>3 Steps:</p> <p>Depth-to-SDF Conversion </p> <p>Volumetric Fusion</p> <p>MeshExtraction</p> </li> </ul> <ul> <li> <p>Implicit representation (Signed distance field SDF)</p> <p>signed distance to the closest surface at each voxel</p> </li> </ul> <ul> <li> <p>Volumetric Fusion</p> <p>Weighted average of SDF from different view point</p> </li> </ul> <ul> <li> <p>Mesh extraction</p> <p>marching cubes.</p> <p>Classify the topology in each cube and do interpolation for the vertex</p> <p></p> </li> </ul>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html","title":"Implicit Neural Networks","text":"<p> \u200b\u7ea6\u200b 129 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#occupancy-network","title":"Occupancy network","text":"<p>In essence a classifier!</p>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#representing-materials-and-lighting","title":"Representing Materials and Lighting","text":"<p>\\(\\Large{\\mathbf L_{cSLF}(\\mathbf{p,v,l}) : \\mathbb R^3 \\times \\mathbb R^3 \\times \\mathbb R^M \\rightarrow \\mathbb R^3}\\)</p>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#representing-motion","title":"Representing Motion","text":""},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#representing-scenes","title":"Representing Scenes","text":"<p>Needs to exploit local features with CNN</p> <p></p>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#differentiable-volumetric-rendering","title":"Differentiable Volumetric Rendering","text":"<p>Learning from Images</p> <p>No 3D supervisions</p> <p></p> <ul> <li> <p>Forward</p> <p></p> </li> </ul> <ul> <li> <p>Backward</p> <p></p> </li> </ul>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#neural-radiance-fields","title":"Neural Radiance Fields","text":"<p>Render image from novel viewpoints, instead of fine 3D reconstruction</p> <p></p> <ul> <li> <p>Fourier Features</p> <p>Learn high dimensional function in low dimensional space</p> <p>Avoid over-smoothing, more sharp details</p> </li> </ul>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#generative-radiance-fields","title":"Generative Radiance Fields","text":"<p>Can train from unstructured and unposed image collections. (With no camera pose)</p> <p></p> <p></p> <p>View dependent appearance and view independent density! Disentangle appearance and occupancy.</p> <ul> <li> <p>GIRAFFE </p> <p></p> <p>Different parts of an image</p> </li> </ul>"},{"location":"ML4360/Lec9%28Implicit%20neural%20networks%29.html#wrap-up","title":"Wrap up","text":""},{"location":"ML4360/wrapup.html","title":"Wrap Up","text":"<p> \u200b\u7ea6\u200b 83 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ML4360/wrapup.html#geometric-image-formation","title":"Geometric Image Formation","text":"<ul> <li>Camera model, Projection model</li> <li>Calibration matrix (From real world position to image position)</li> </ul>"},{"location":"ML4360/wrapup.html#photometric-image-formation","title":"Photometric Image Formation","text":"<ul> <li>Rendering equation</li> </ul>"},{"location":"ML4360/wrapup.html#structure-from-motion","title":"Structure From Motion","text":"<ul> <li> <p>Recover 3D structure of an object (3D position, in Sparse Feature Points), 2 frame</p> <p>Depth: through triangulization.</p> </li> </ul> <ul> <li>Estimate Camera pose</li> <li>Bundle Adjustment, multiple views</li> </ul>"},{"location":"ML4360/wrapup.html#stereo-reconstruction","title":"Stereo reconstruction","text":"<ul> <li> <p>Recover 3D structure of an object (3D position, in Dense)</p> <p>Rectification, Block matching along the epipolar line</p> <p>Depth: from disparity</p> </li> </ul> <ul> <li> <p>Siamese Network</p> <p>Learn similarity score between blocks, used for block matching</p> </li> </ul>"},{"location":"ReverseEngineering/Anti-Anti-Debug.html","title":"Anti Anti Debug","text":"<p> \u200b\u7ea6\u200b 34 \u200b\u4e2a\u200b\u5b57\u200b  17 \u200b\u884c\u200b\u4ee3\u7801\u200b </p>"},{"location":"ReverseEngineering/Anti-Anti-Debug.html#anti-anti-debug","title":"Anti-Anti-Debug","text":"<p>Sign:</p> <pre><code>pushf\npushf\npop ax\nor ax 0100\npush ax\npopf\n</code></pre> <p>Interrupt address:</p> <p><code>0000:0004 Offset</code></p> <p><code>0000:0006 Segment</code></p> <p>Use quickview to modify the program(decode and disable the interrupt). Be careful of branches.</p> <p>IDAPro F5 Decompile</p> <p>DOS - BUFFERED KEYBOARD INPUT DS:DX -&gt; buffer</p> <p>DS:DX+1 = strlen</p> <pre><code>lodsb al, ds:[si]\nstosb es:[di], al\n</code></pre> <pre><code>for(int i=0; i&lt;0xC; i++){\n    cx = 0xC-i;\n    cx &amp;= 0x1;\n    cx ^= 0x1;\n    cx &lt;&lt;= 2;\n    str[i] &lt;&lt;= (cx);\n\n}\n01 23 45 67 89 AB\n</code></pre>"},{"location":"ReverseEngineering/DOS%20EXE.html","title":"DOS EXE","text":"<p> \u200b\u7ea6\u200b 394 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <pre><code>00000000: 4d5a 5001 0200 0200 2000 0000 ffff 0500  MZP..... .......\n            |   |     |    |    |   |    |    |\n            |   |     |    |    |   |    |    `---[e-f]\u200b\u5806\u6808\u200b\u6bb5\u200b\u7684\u200b\u6bb5\u503c\u200bss(\u200b\u76f8\u5bf9\u503c\u200b)=\u200b\u8be5\u6bb5\u200b(stack)\u200b\u6bb5\u200b\u5730\u5740\u200b-\u200b\u7b2c\u4e00\u4e2a\u200b\u6bb5\u200b\u5730\u5740\u200b\u7684\u200b\u5dee\u200b      \n            |   |     |    |    |   |    `--------[c-d]\u200b\u81f3\u591a\u200b\u53ef\u4ee5\u200b\u4e3a\u200bEXE\u200b\u5206\u914d\u200b\u591a\u5c11\u200b\u5b57\u8282\u200b\uff0c\u200b\u51e0\u4e4e\u200b\u90fd\u200b\u662f\u200bffffh\n            |   |     |    |    |   `-------------[a-b]\u200b\u81f3\u5c11\u200b\u8981\u200b\u4e3a\u200bEXE\u200b\u5206\u914d\u200b\u591a\u5c11\u200b\u5b57\u8282\u200b\uff0c\u200b\u51e0\u4e4e\u200b\u90fd\u200b\u662f\u200b0000h\n            |   |     |    |    `-----------------[8-9]\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u8282\u200b\u957f\u5ea6\u200b,\u200b\u4e00\u8282\u200b=10h,\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u5b57\u8282\u200b\u957f\u5ea6\u200b=\u200b\u8282\u200b\u957f\u5ea6\u200b*10H;\u200b\u8be5\u200b\u6587\u4ef6\u200b\u5934\u200b\u957f\u5ea6\u200b\u4e3a\u200b0020*10h=200h                                      \n            |   |     |    `----------------------[6-7]\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u9879\u200b\u7684\u200b\u4e2a\u6570\u200b\uff08\u200b\u540e\u7eed\u200b\u8bf4\u660e\u200b\uff09\n            |   |     `---------------------------[4-5]\u200b\u5c0f\u7aef\u200b\u683c\u5f0f\u200b\u8868\u793a\u200b\u5f53\u524d\u200bexe\u200b\u5728\u200b\u786c\u76d8\u200b\u4e2d\u200b\u5360\u200b\u51e0\u4e2a\u200b\u6247\u533a\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6247\u533a\u200b200h=512 bytes, 0002h\u200b\u4e2a\u200b\u6247\u533a\u200b                                                             \n            |   `---------------------------------[2-3]\u200b\u5c0f\u7aef\u200b\u683c\u5f0f\u200b\u8868\u793a\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u6247\u533a\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\uff0c\u200b\u5982\u679c\u200b\u4e3a\u200b0\uff0c\u200b\u8868\u793a\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u6247\u533a\u200b\u662f\u200b\u6ee1\u200b\u7684\u200b\uff0c\n            |                                          \u200b\u6b64\u65f6\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u6247\u533a\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\u662f\u200b0150h       \n            `-------------------------------------[0-1]\u200b\u6807\u5fd7\u200b\u201cMZ\u201d,\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u5728\u200b\u8fd0\u884c\u200bexe\u200b\u6587\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u68c0\u67e5\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u4e3a\u200bexe\u200b\u6587\u4ef6\u200b---\u200b\u9632\u6b62\u200b\u6b7b\u673a\u200b\n</code></pre> <pre><code>00000010: 0001 e80e 2800 0200 1e00 0000 0100 0100  ....(...........\n            |   |     |    |    |   |    |    |\n            |   |     |    |    |   |    |    `---[1Eh-1Fh] \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b=0001h      \n            |   |     |    |    |   |    `\n            |   |     |    |    |   `\n            |   |     |    |    `-----------------[18h-19h] \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u7684\u200b\u504f\u79fb\u200b\u4f4d\u7f6e\u200b001eh\uff08\u200b\u540e\u7eed\u200b\u8bf4\u660e\u200b\uff09                                         \n            |   |     |    `----------------------[16h-17h] delta CS,\u200b\u4ee3\u7801\u6bb5\u200b\u7684\u200b\u6bb5\u200b\u5730\u5740\u200b=\u200b\u8be5\u6bb5\u200b(.text)-\u200b\u7b2c\u4e00\u4e2a\u200b\u6bb5\u200b\u5730\u5740\u200b\u7684\u200b\u5dee\u200b\n            |   |     `---------------------------[14h-15h]IP\u200b\u7684\u200b\u503c\u200b0028h\uff0c\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u8f7d\u5165\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7b2c\u4e00\u6761\u200b\u6307\u4ee4\u200b\u5730\u5740\u200b,\u200b\u75c5\u6bd2\u200b\u5fc5\u987b\u200b\u4fee\u6539\u200b\u6b64\u5904\u200b                                                            \n            |   `---------------------------------[12h-13h] EXE\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u6821\u9a8c\u200b\u503c\u200b\uff0c\u200b\u5728\u200bDOS\u200b\u4e2d\u200b\u6ca1\u4ec0\u4e48\u200b\u7528\u200b,windows\u200b\u91cc\u200b\u7684\u200b\u9a71\u52a8\u200b\u6587\u4ef6\u200b.sys(\u200b\u683c\u5f0f\u200b\u5176\u5b9e\u200b\u4e0a\u200b\u662f\u200bEXE)\u200b\u4e2d\u200b\u4f7f\u7528\u200b\n            `-------------------------------------[10h-11h] sp\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u503c\u200b(\u200b\u7edd\u5bf9\u503c\u200b)0100h\n</code></pre> <pre><code>00000020: 0200 0d00 0200 0000 0000 0000 0000 0000  ................\n            |   |    |\n            |   |    |\n            |   |    |\n            |   |    |\n            |   |    `-------------------------------[24h-25h] \u0394=0002h \u200b\u9996\u6bb5\u200b\u5730\u5740\u200b+\u0394=\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u6bb5\u200b\u5730\u5740\u200b\n            |   `------------------------------------[22h-23h]\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b=000Dh\n            `----------------------------------------[20h-21h]\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u0394=0002h,\u200b\u9996\u6bb5\u200b\u5730\u5740\u200b+\u0394=\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u6bb5\u200b\u5730\u5740\u200b\n</code></pre>"},{"location":"ReverseEngineering/Generic%20unpack%20procedure.html","title":"Generic unpack procedure","text":"<p> \u200b\u7ea6\u200b 196 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ReverseEngineering/Generic%20unpack%20procedure.html#generic-unpack-procedure","title":"Generic unpack procedure","text":"<ol> <li>Break the program where finishes the decrypt procedure.</li> </ol> <p>\u200b   <code>If a large program has no relocation table, it must has been packed.</code></p> <p>\u200b   Trace into the shell code.</p> <p>\u200b   Shell code file offset:</p> <p>\u200b       <code>Header size = [0x08]</code></p> <p>\u200b       <code>Shellcode delta_cs = [0x16]</code></p> <p>\u200b       <code>Shellcode ip = [0x14]</code></p> <p>\u200b       <code>Shellcode file offset = (delta_cs + headsize)*0x10 + ip</code></p> <p>\u200b       <code>first_seg = shellcode_addr - delta_shellcode</code></p> <p>\u200b   Initial <code>es, ds</code> is the PSP address.</p> <p>\u200b   <code>es+10h</code> is the address of first segment.</p> <p>\u200b   Original program length (most cases, no zip):</p> <p>\u200b        <code>Shellcode addr - (es+10h)*0x10</code></p> <p>\u200b       or <code>(delta_cs)*0x10 + ip</code></p> <ol> <li>Dump the decrypted code.</li> </ol> <p>\u200b   Bochs</p> <p>\u200b       <code>writemem \"filename\" startAddr length</code></p> <ol> <li>Analyze the relocation procedure in shell code.</li> </ol> <p>\u200b       Example:</p> <p>\u200b       <code>add word ptr es:[di], bp</code></p> <p>\u200b       <code>es</code> is delta cs</p> <p>\u200b       <code>di</code> is offset</p> <p>\u200b       <code>bp</code> is the address of the first segment</p> <ol> <li>Dump the relocation table.</li> </ol> <p>\u200b       Bochs</p> <p>\u200b       <code>writemem \"filename\" startAddr length</code></p> <ol> <li>Rebuilt the unpacked program</li> </ol> <p>\u200b       Rebuilt item Check list:</p> <p>\u200b       a. Decrypted program</p> <p>\u200b       b. Relocation table</p> <p>\u200b       c.  ss <code>[0xE]</code>, delta_sp<code>[0x10]</code> (check this after jump to usr code)</p> <p>\u200b       d. ip <code>[0x14]</code>, delta_cs <code>[0x16]</code> (check this after jump to usr code)</p> <p>\u200b       e. relocation count <code>[0x6]</code></p> <p>\u200b       f. page size <code>[0x4]</code> page rem <code>[0x2]</code> (header size + program size)</p> <p>\u200b       g. Header size <code>[0x8]</code> ceiling to 0x10</p>"},{"location":"ReverseEngineering/Hello%20%E5%8A%A0%E5%A3%B3.html","title":"Hello \u200b\u52a0\u58f3","text":"<p> \u200b\u7ea6\u200b 60 \u200b\u4e2a\u200b\u5b57\u200b  118 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p> <p><pre><code>push ds\npop es\npush si\npop di\nlodsb al, ds:[si]\nxor al, 42h\nstosb es:[di], al\nloop 4h(cx\u200b\u6b63\u597d\u200b\u5c31\u662f\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b)\nretf\n</code></pre> \u200b\u6309\u200benter\u200b\u8fdb\u5165\u200b\u6c47\u7f16\u200b\u6a21\u5f0f\u200b Shellcode\u200b\u9700\u8981\u200b\u5bf9\u200bds+10h:0000\u200b\u5230\u200bcs:ip\uff08shellcode\u200b\u662f\u200b\u8ffd\u52a0\u200b\u5230\u200b\u672b\u5c3e\u200b\u7684\u200b\uff09\u200b\u8fdb\u884c\u200b\u8fd8\u539f\u200b \u200b\u5047\u8bbe\u200b\u957f\u5ea6\u200b\u4e0d\u200b\u8d85\u8fc7\u200bFFFFh</p> <p>calculate cs, ip, 1<sup>st</sup> segment <pre><code>0350 mov ax, ds\n0352 add ax, 0010 #\u200b\u9996\u6bb5\u200b\u5730\u5740\u200b\n0355 mov dx, cs\n0357 call 035A(\u200b\u4e0b\u200b\u4e00\u6761\u200b\u6307\u4ee4\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u5f53\u524d\u200b\u5730\u5740\u200b\u52a0\u200b3)\n#\u200b\u5982\u4f55\u200b\u83b7\u5f97\u200bip\uff1f\u200b\u6267\u884c\u200bcall\u200b\u540e\u4f1a\u200b\u5c06\u200bip\u200b\u538b\u5165\u200b\u5806\u6808\u200b\n035A pop bx #bx = 35A\n035B sub bx, 0Ah #bx \u200b\u76f8\u5f53\u4e8e\u200b\n</code></pre> calculate block length <pre><code>sub dx, ax  #cs - \u200b\u9996\u6bb5\u200b\u6bb5\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200bcs\u200b\u4e3a\u200bshellcode\u200b\u7684\u200bcs\nshl dx, 4h  # *10h\nadd dx, bx  #\u200b\u5757\u200b\u7684\u200b\u603b\u957f\u5ea6\u200b\nmov cx, dx\n</code></pre> decode <pre><code>xor si, si\nxor di, di\npush ds\npush es\nmov ds, ax # ds=\u200b\u9996\u6bb5\u200b\u6bb5\u200b\u5730\u5740\u200b\nmov es, ax # es=\u200b\u9996\u6bb5\u200b\u6bb5\u200b\u5730\u5740\u200b\n*lodsb al, ds:[si]\nxor al, 42h\nstosb es:[di], al\nloop * \npop es\npop ds #\u200b\u65e0\u6cd5\u200b\u8fd8\u539f\u200bds\uff0c\u200b\u56e0\u4e3a\u200b\u5806\u6808\u200b\u6bb5\u200b\u88ab\u200b\u4fee\u6539\u200b\u4e86\u200b\uff0c\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5206\u914d\u200b\u5806\u6808\u200b\u6bb5\u200b\n</code></pre></p> <pre><code>.386\ncode segment use16\nassume cs code\nshell:\n    ;mov sp, offset stk+100h \n    ;\u200b\u4e0d\u80fd\u200b\u8fd9\u6837\u200b\u5199\u200b\uff0c\u200b\u56e0\u4e3a\u200bshell\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\u53ef\u80fd\u200b\u4e0d\u200b\u4e3a\u200b0    \n    call next\nnext:\n    pop bx; bx = [next]\u200b\u7684\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\n    sub bx, offset next - offset shell\n            ; bx \u200b\u5373\u200b\u4e3a\u200bshell\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\n\n    cli ; \u200b\u7981\u6b62\u200b\u4e2d\u65ad\u200b\n    mov ax, cs\n    mov ss, ax\n    lea sp, stk[bx+100h] ;\u200b\u4fee\u6539\u200b\u4e3a\u200b\u81ea\u5df1\u200b\u7684\u200b\u5806\u6808\u200b\uff0c\u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u5c06\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200bss\uff0csp\n                         ;\u200b\u4fee\u6539\u200b\u4e3a\u200b\u81ea\u5df1\u200b\u7684\u200b\u5806\u6808\u200b\n    sti\n\n    push ds\n    push es\n    mov ax, ds\n    add ax, 10h ;ax = \u200b\u9996\u6bb5\u200b\u6bb5\u200b\u5730\u5740\u200b, ds=psp psp\u200b\u957f\u5ea6\u200b\u4e3a\u200b100h\n    mov bp, ax ;\u200b\u5907\u4efd\u200b\n    mov ds, ax\n    mov es, ax\n    mov dx, cs\n    sub dx, ax\n    movzx edx, dx ;\u200b\u9632\u6b62\u200b\u6ea2\u51fa\u200b\n    shl edx, 4h\n    movzx ebx, bx\n    add edx, ebx ;edx = blocklen\n\n    xor si, si\n    xor di, di\ndecode_test:\n    lodsb\n    xor al 42h\n    stosb\n    cmp si, 0 ;\u200b\u5904\u7406\u200b\u8de8\u6bb5\u200b\uff0c\u200b\u9632\u6b62\u200bsi\u200b\u4e00\u76f4\u200b\u5faa\u73af\u200b(\u200b\u4ece\u200bFFFF\u200b\u53d8\u200b\u5230\u200b0)\n    jne skip\n    mov ax, ds\n    add ax, 1000h ;\u200b\u5df2\u7ecf\u200b\u89e3\u5bc6\u200b\u4e86\u200b10000h\u200b\u5b57\u8282\u200b\u4e86\u200b\n    mov ds, ax\n    mov es, ax\n    add \nskip:\n    dec edx\n    jnz decode_text\n    mov \n    mov cx, [bx + reloc_count] ;bx \u200b\u4e3a\u200bshell\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\n                               ;\u200b\u8bbf\u95ee\u200b\u4efb\u4f55\u200b\u53d8\u91cf\u200b\u90fd\u200b\u8981\u200b\u52a0\u4e0a\u200bbx\n    push cs\n    pop ds\n    lea si, [bx+reloc_table]\nreloc_next:\n    mov di, ds:[si] ;\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\n    mov dx, ds:[si+2] ;delta\u200b\u6bb5\u200b\u5730\u5740\u200b\n    add dx, bp\n    mov es, dx\n    add es:[di], bp\n    add si, 4\n    loop reloc_next\n\n    add [bx+delta_ss], bp\n    add [bx+delta_cs], bp\n    pop es\n    pop ds\n    cli\n    mov ss cs:[bx+delta_ss] ;\u200b\u6062\u590d\u200b\u7528\u6237\u200b\u5806\u6808\u200b\n    mov sp cs:[bx+old_sp]\n    sti\n    jmp dword ptr cs:[bx+old_ip] ;\u200b\u8fd4\u56de\u200b\n\n;\u200b\u7528\u200b\u8001\u200bexe\u200b\u4e2d\u200b\u7684\u200b\u503c\u200b\u66ff\u6362\u200b\uff1a\uff08\u200b\u9700\u8981\u200b\u8865\u5165\u200b\u4e00\u4e9b\u200bplaceholder\uff0c\u200b\u4fdd\u8bc1\u200b\u5bf9\u200b\u5176\u200b\u65b9\u4fbf\u200b\u76f4\u63a5\u200b\u590d\u5236\u200b\u6e90\u7a0b\u5e8f\u200b\u7684\u200b\u503c\u200b\uff09\ndelta_ss dw 0\nold_sp dw 0\nold_ip dw 0\ndelta_cs dw 0\nreloc_count dw 0\nreloc_table db 200h dup(0) ;\u200b\u6bcf\u200b\u9879\u200b2\u200b\u4e2a\u200bword\uff0c\u200b\u524d\u200b\u4e00\u4e2a\u200bword\u200b\u4e3a\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\uff0c\n                           ;\u200b\u540e\u200b\u4e00\u4e2a\u200bword\u200b\u4e3a\u200bdelta\u200b\u6bb5\u200b\u5730\u5740\u200b\n\nstk db 100h dup(0)\ncode ends\nend\n</code></pre> <p>\u200b\u9009\u4e2d\u200b\u540e\u200b shift F3 \u200b\u5373\u53ef\u200b\u7528\u539f\u200bexe\u200b\u9009\u4e2d\u200b\u5185\u5bb9\u200b\u8986\u76d6\u200b</p>"},{"location":"ReverseEngineering/OllyDBG%20%26%20IDA.html","title":"OllyDBG & IDA","text":"<p> \u200b\u7ea6\u200b 1199 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 4 \u200b\u5206\u949f\u200b</p>"},{"location":"ReverseEngineering/OllyDBG%20%26%20IDA.html#ollydbg","title":"OllyDBG","text":"<p>Ctrl F9 : Finish current function Alt F9: Finish kernel code, back to user code</p> <p>Select data in dump:     Alt Enter: goto this pointer in dump (nested pointer)     Shift Enter: goto this pointer in code (function pointer)</p> <p>Hardware breakpoint: RightClick-&gt;breakpoint-&gt;hardware R/W</p>"},{"location":"ReverseEngineering/OllyDBG%20%26%20IDA.html#ida-pro","title":"IDA-Pro","text":"<p><code>;</code> <code>:</code> comment</p> <p><code>n</code> rename an address</p> <ol> <li>IDA\u200b\u4f7f\u7528\u200b\u6280\u5de7\u200b Ida flare,\u200b\u81ea\u5df1\u200b\u505a\u5e93\u200b\u8bc6\u522b\u200b\u6587\u4ef6\u200b\u3002 c\u200b\u547d\u4ee4\u200b\u628a\u200b\u673a\u5668\u7801\u200b\u7ffb\u8bd1\u6210\u200b\u6307\u4ee4\u200b d\u200b\u547d\u4ee4\u200b\u628a\u200b\u673a\u5668\u7801\u200b\u7ffb\u8bd1\u6210\u200b\u53d8\u91cf\u200b\uff0c\u200b\u540c\u65f6\u200b\u5207\u6362\u200bbyte,word,dword,alt+d\u200b\u9009\u62e9\u200b\u66f4\u200b\u591a\u200b\u7c7b\u578b\u200b u\u200b\u547d\u4ee4\u200b\u628a\u200b\u673a\u5668\u7801\u200b\u8f6c\u5316\u6210\u200b\u672a\u5b9a\u4e49\u200b n\u200b\u547d\u4ee4\u200b\u6539\u200b\u51fd\u6570\u200b\u540d\u200b\u548c\u200b\u53d8\u91cf\u540d\u200b f5\u200b\u8f6c\u5316\u200b\u4e3a\u200bC\u200b\u8bed\u8a00\u200b</li> </ol> <p>ida\u200b\u4e2d\u200b\u6309\u200bshift+F5\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u8bc6\u522b\u200b\u7528\u200b\u7684\u200b\u7279\u5f81\u200b\u5e93\u200b ida\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5de5\u5177\u200b\u53eb\u200bFLAIR\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u7b2c\u4e09\u65b9\u200b\u7684\u200blib\u200b\u6587\u4ef6\u200b\u4e2d\u200b \u200b\u62bd\u53d6\u200b\u7279\u5f81\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u7279\u5f81\u200b\u5e93\u200b.sig\u3002 \u200b\u751f\u6210\u200b\u7684\u200b.sig\u200b\u6587\u4ef6\u200b\u5e94\u8be5\u200b\u62f7\u5230\u200bIDA\\sig\u200b\u76ee\u5f55\u200b\u91cc\u9762\u200b\u3002 IDA\\sig$vc_libeay32.sig IDA\\sig$vc_ssleay32.sig \u200b\u4e0a\u8ff0\u200b\u4e24\u4e2a\u200b\u6587\u4ef6\u200b\u662f\u4ece\u200bopenssl\u200b\u7684\u200blib\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u51fa\u6765\u200b\u7684\u200b\u7279\u5f81\u200b\u5e93\u200b\u3002 \u200b\u6309\u200bShift+F5\u200b\u518d\u200b\u6309\u200bins\u200b\u952e\u200b\u9009\u62e9\u200b\u7279\u5f81\u200b\u5e93\u200b\u5e94\u7528\u200b\u5230\u200b\u5f53\u524d\u200b\u7684\u200bexe\u200b\u4e2d\u200b\u3002 IDA\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b16\u200b\u8fdb\u5236\u200b\u4e32\u200b: (1)\u200b\u641c\u7d22\u200b\u5b57\u7b26\u4e32\u200b:  \u2460Alt+T\uff08\u200b\u901f\u5ea6\u6162\u200b\uff0c\u200b\u5bf9\u200b\u53cd\u7f16\u8bd1\u200b\u7ed3\u679c\u200b\u641c\u7d22\u200b\uff09, \u200b\u5b57\u7b26\u4e32\u200b\u4e0d\u53ef\u200b\u52a0\u200b\u5f15\u53f7\u200b; \u200b\u641c\u5230\u200b\u7684\u200b\u6709\u200b\u53ef\u80fd\u200b\u662f\u200b\u5b57\u7b26\u4e32\u200b\u672c\u8eab\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u662f\u200b\u53d8\u91cf\u540d\u200b\u3001\u200b\u51fd\u6570\u200b\u540d\u200b\u7b49\u200b\u3002 \u2461Alt+B\uff08\u200b\u901f\u5ea6\u200b\u5feb\u200b\uff0c\u200b\u5bf9\u200b\u673a\u5668\u7801\u200b\u641c\u7d22\u200b\uff09, \u200b\u5b57\u7b26\u4e32\u200b\u9700\u8981\u200b\u52a0\u200b\u5f15\u53f7\u200b; \u200b\u641c\u5230\u200b\u7684\u200b\u662f\u200b\u5b57\u7b26\u4e32\u200b\u672c\u8eab\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002 (2)\u200b\u641c\u7d22\u200b16\u200b\u8fdb\u5236\u200b\u4e32\u200b: Alt+B, \u200b\u8f93\u5165\u200b16\u200b\u8fdb\u5236\u200b\u673a\u5668\u7801\u200b \u200b\u4ea4\u53c9\u200b\u5f15\u7528\u200b(cross reference): \u200b\u53d8\u91cf\u540d\u200b\u6216\u200b\u51fd\u6570\u200b\u540d\u200b\u53f3\u4fa7\u200b\u5206\u53f7\u200b\u5904\u200b\u6709\u200b\u63d0\u793a\u200bDATA XREF\u200b\u6216\u200b CODE XREF, \u200b\u53cc\u51fb\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200bXREF\u200b\u53ef\u4ee5\u200b\u8df3\u8f6c\u200b\u5230\u200b\u76f8\u5173\u200b\u7684\u200b\u5f15\u7528\u200b\u8bed\u53e5\u200b\uff0c\u200b\u6216\u8005\u200bview-&gt;open subviews-&gt;cross reference\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u5168\u90e8\u200b\u5f15\u7528\u200b\u3002 \u200b\u5982\u4f55\u200b\u5bf9\u200b\u53d8\u91cf\u540d\u200b\u6216\u200b\u51fd\u6570\u200b\u540d\u91cd\u200b\u547d\u4ee4\u200b: n Esc\u200b\u56de\u9000\u200b, Ctrl+Enter\u200b\u524d\u8fdb\u200b \u200b\u5982\u4f55\u200b\u8bbe\u5b9a\u200b\u53d8\u91cf\u200b\u7684\u200b\u5bbd\u5ea6\u200b: d\u200b\u6216\u200balt+d \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b: * \u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b: a \u200b\u5982\u4f55\u200b\u628a\u200b\u5f53\u524d\u200b\u7684\u200b\u53cd\u7f16\u8bd1\u200b\u7ed3\u679c\u200b\u8f6c\u5316\u6210\u200b\u672a\u5b9a\u4e49\u200b\u72b6\u6001\u200b: u d\u200b\u547d\u4ee4\u200b\u53ef\u4ee5\u200b\u628a\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\u5185\u5bb9\u200b\u8bc6\u522b\u200b\u6210\u200b\u53d8\u91cf\u200b; c\u200b\u547d\u4ee4\u200b\u53ef\u4ee5\u200b\u628a\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\u5185\u5bb9\u200b\u8bc6\u522b\u200b\u6210\u200b\u6307\u4ee4\u200b; \u200b\u5982\u4f55\u200b\u6ce8\u91ca\u200b: \u200b\u5206\u200b\u53f7\u200b</p> <p>\u200b\u7528\u200bIDA Pro\u200b\u53ef\u4ee5\u200b\u5bf9\u200b.exe\u200b\u8fdb\u884c\u200b\u53cd\u6c47\u7f16\u200b(\u200b\u628a\u200b.exe\u200b\u8f6c\u200b\u6210\u200b.asm)\uff0c\u200b\u5e76\u200b\u81ea\u52a8\u8bc6\u522b\u200b\u5e93\u51fd\u6570\u200b\u7684\u200b\u540d\u5b57\u200b\u3002 IDA: Interactive DisAssembler\u200b\u4ea4\u4e92\u5f0f\u200b\u7684\u200b\u53cd\u200b\u6c47\u7f16\u5668\u200b \u200b\u4e3e\u4f8b\u8bf4\u660e\u200b\u7528\u200bIDA\u200b\u5206\u6790\u200bupdater.exe: \u200b\u6309\u200balt+b\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b\u5341\u516d\u8fdb\u5236\u200b\u503c\u200b\u6216\u200b\u5b57\u7b26\u4e32\u200b \u200b\u8f93\u5165\u200b\"Incorrect registration code\" \u200b\u6ce8\u610f\u200bAnsiString\u200b\u683c\u5f0f\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u524d\u9762\u200b\u6709\u200b\u4e00\u4e2a\u200blong\u200b\u7c7b\u578b\u200b\u7684\u200b\u957f\u5ea6\u200b\u503c\u200b\u3002 \u200b\u5f53\u200bIDA\u200b\u627e\u5230\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5b57\u7b26\u4e32\u200b\u53f3\u4fa7\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6ce8\u91ca\u200b: DATA XREF: ... \u200b\u5f53\u200b\u5f15\u7528\u200b\u8005\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u65f6\u200b, \u200b\u7528\u6237\u200b\u53ea\u8981\u200b\u53cc\u51fb\u200b\"DATA XREF:\"\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8df3\u200b\u5230\u200b\u5f15\u7528\u200b\u8005\u200b\u90a3\u91cc\u200b, \u200b\u6309\u200bEsc\u200b\u53ef\u4ee5\u200b\u8fd4\u56de\u200b\u5230\u200b\u5b57\u7b26\u4e32\u200b\u90a3\u91cc\u200b\u3002 \u200b\u5f53\u200b\u5f15\u7528\u200b\u8005\u200b\u6709\u200b\u591a\u4e2a\u200b\u65f6\u200b\uff0c\u200b\u9f20\u6807\u200b\u70b9\u5230\u200bDATA XREF:, \u200b\u518d\u9009\u200b\u83dc\u5355\u200bView-&gt;Open subview-&gt;Cross Reference\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6253\u5f00\u200b\u4ea4\u53c9\u200b\u5f15\u7528\u200b\u7684\u200b\u7a97\u53e3\u200b\uff0c\u200b\u91cc\u9762\u200b\u4f1a\u200b\u5217\u51fa\u200b\u5404\u4e2a\u200b\u5f15\u7528\u200b\u8005\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 IDA\u200b\u91cc\u9762\u200b\u53cc\u51fb\u200b\u67d0\u4e2a\u200b\u51fd\u6570\u200b\u65f6\u200b\u8df3\u200b\u5230\u200b\u51fd\u6570\u200b\u4f53\u200b\u91cc\u9762\u200b\uff0c\u200b\u6309\u200bEsc\u200b\u56de\u9000\u200b,\u200b\u6309\u200bCtrl+Enter\u200b\u53ef\u4ee5\u200b\u524d\u8fdb\u200b\u3002 OD\u200b\u91cc\u9762\u200b\u6309\u200bEsc\u200b\u56de\u9000\u200b\uff0c`\u200b\u6216\u200b~\u200b\u524d\u8fdb\u200b\u3002 \u200b\u9009\u4e2d\u200b\u53d8\u91cf\u540d\u200b\u3001\u200b\u51fd\u6570\u200b\u540d\u200b\u3001\u200b\u6807\u53f7\u200b\uff0c\u200b\u6309\u200bn\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u91cd\u547d\u540d\u200b\u3002 \u200b\u6309\u200b;\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u6ce8\u91ca\u200b</p> <ol> <li>OD\u200b\u4f7f\u7528\u200b\u6280\u5de7\u200b \u200b\u53ef\u4ee5\u200b\u5728\u200b\u6e90\u7a0b\u5e8f\u200bmain()\u200b\u51fd\u6570\u200b\u7684\u200b\u5f00\u5934\u200b\u63d2\u5165\u200b\u4e00\u6761\u200b\u6c47\u7f16\u200b\u6307\u4ee4\u200bint 3(TC\u200b\u4e2d\u200b\u5199\u6210\u200basm int 3; VC\u200b\u4e2d\u200b\u5199\u6210\u200b__asm int 3)\uff0c\u200b\u5f53\u200bexe\u200b\u5728\u200b\u8c03\u8bd5\u5668\u200b\u91cc\u200b\u6267\u884c\u200b\u65f6\u200b\uff0c\u200b\u8c03\u8bd5\u5668\u200b\u9047\u5230\u200bint 3\u200b\u6307\u4ee4\u200b\u4f1a\u200b\u628a\u200b\u5b83\u200b\u5f53\u6210\u200b\u4e00\u4e2a\u200b\u65ad\u70b9\u200b\u3002int 3\u200b\u6307\u4ee4\u200b\u7684\u200b\u673a\u5668\u7801\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u662f\u200b0CCh\u3002 VC\u200b\u7f16\u8bd1\u200b\u65f6\u200bbuild-&gt;set active configuration-&gt;release; project-&gt;setting-&gt;C++-&gt;disable;</li> </ol> <p>\u200b\u5728\u200bOD\u200b\u4e2d\u8981\u200b\u8ba9\u200bint 3\u200b\u65ad\u70b9\u200b\u529f\u80fd\u200b\u53d1\u6325\u4f5c\u7528\u200b\uff0c\u200b\u9700\u8981\u200b\u505a\u200b\u4ee5\u4e0b\u200b\u8bbe\u7f6e\u200b: (1) \u200b\u9009\u9879\u200b-&gt;\u200b\u8c03\u8bd5\u200b\u8bbe\u7f6e\u200b-&gt;int 3\u200b\u4e2d\u65ad\u200b\u524d\u9762\u200b\u7684\u200b\u52fe\u200b\u53bb\u6389\u200b (2) \u200b\u63d2\u4ef6\u200b-&gt;StrongOD-&gt;Skip some exceptions \u200b\u7684\u200b\u52fe\u200b\u53bb\u6389\u200b</p> <p>\u200b\u5728\u200bcall\u200b\u6307\u4ee4\u200b\u5904\u200b\u6572\u200b\u56de\u8f66\u200b\u53ef\u4ee5\u200b\u8fdb\u5165\u200b\u51fd\u6570\u200b\u4f53\u200b, Esc\u200b\u56de\u9000\u200b, ~\u200b\u524d\u8fdb\u200b\u3002 \u200b\u5982\u4f55\u200b\u5bf9\u200b\u51fd\u6570\u200b\u3001\u200b\u6807\u53f7\u200b\u3001\u200b\u53d8\u91cf\u200b\u91cd\u547d\u540d\u200b: \u200b\u5192\u53f7\u200b \u200b\u5982\u4f55\u200b\u6ce8\u91ca\u200b: \u200b\u5206\u200b\u53f7\u200b</p> <p>\u200b\u5982\u4f55\u200b\u52a0\u6807\u7b7e\u200b\uff1a\u200b\u5192\u53f7\u200b</p> <p>\u200b\u8981\u200b\u4fee\u6539\u200b\u67d0\u6761\u200b\u6307\u4ee4\u200b, \u200b\u9009\u4e2d\u200b\u8be5\u200b\u6307\u4ee4\u200b, \u200b\u8f93\u5165\u200b\u6307\u4ee4\u200b\u7684\u200b\u6c47\u7f16\u200b\u8bed\u53e5\u200b\u5373\u53ef\u200b\u4fee\u6539\u200b\u3002 \u200b\u5728\u200bOD\u200b\u4e2d\u82e5\u8981\u200b\u4fee\u6539\u200b\u67d0\u4e2a\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u5219\u200b\u5148\u200bctrl+g\u200b\u5b9a\u4f4d\u200b\u5230\u200b\u8be5\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u9009\u4e2d\u200b\u9996\u200b\u5b57\u8282\u200b\uff0c\u200b\u6572\u200b\u952e\u76d8\u200b\u6570\u5b57\u952e\u200b\u6216\u200bA-F\u200b\u5b57\u6bcd\u200b\uff0c\u200b\u5c31\u4f1a\u5f39\u200b\u51fa\u200b\u4fee\u6539\u200b\u5bf9\u8bdd\u6846\u200b;  \u200b\u8981\u662f\u200b\u4e0d\u200b\u5c0f\u5fc3\u200b\u6539\u574f\u200b\u4e86\u200b\u5185\u5b58\u200b\u4fe1\u606f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u4e2d\u200b\u8be5\u5757\u200b\u5185\u5bb9\u200b\uff0c\u200b\u6309\u200bAlt+Backspace\u200b\u6062\u590d\u539f\u72b6\u200b\u3002 \u200b\u8981\u200b\u4fee\u6539\u200b\u67d0\u4e2a\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u9009\u4e2d\u200b\u8be5\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u518d\u200b\u53cc\u51fb\u200b, \u200b\u6807\u5fd7\u200b\u4f4d\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u53cc\u51fb\u200b\u6539\u53d8\u200b;  \u200b\u82e5\u200b\u8981\u200b\u6539\u53d8\u200bEIP\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u53ea\u8981\u200b\u9009\u4e2d\u200b\u67d0\u4e2a\u200b\u5730\u5740\u200b\uff0c\u200b\u53f3\u952e\u200b-&gt;\u200b\u6b64\u5904\u200b\u4e3a\u200b\u65b0\u200beip\u200b\u5373\u53ef\u200b\u3002\u200b\u53cc\u51fb\u200bEIP\u200b\u662f\u200b\u4f5c\u7528\u200b\u662f\u200b\u5b9a\u4f4d\u200b\u5230\u200bEIP\u3002</p> <ol> <li> <p>TD</p> <p>Turbo Debugger  Turbo Debugger\u200b\u662f\u200b\u5168\u5c4f\u5e55\u200b\u8c03\u8bd5\u200b\u5de5\u5177\u200b  Ctrl+F2 program reset  Ctrl+o  \u200b\u56de\u5230\u200b\u5f53\u524d\u200b\u5c06\u8981\u200b\u6267\u884c\u200b\u7684\u200b\u6307\u4ee4\u200b\u5904\u200b  Ctrl+g  \u200b\u5b9a\u4f4d\u200b\u5230\u200b\u67d0\u4e2a\u200b\u5730\u5740\u200b  F2 \u200b\u8bbe\u200b\u65ad\u70b9\u200b  F4 goto here  F7 \u200b\u8ddf\u8e2a\u200b\u5230\u200bcall\u200b\u91cc\u9762\u200b  F8 \u200b\u5355\u6b65\u200b</p> </li> </ol>"},{"location":"ReverseEngineering/QuickView.html","title":"QuickView","text":"<p> \u200b\u7ea6\u200b 42 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ReverseEngineering/QuickView.html#quickview","title":"Quickview","text":"<p>F5 Jump to file offset. \u200b\u53ef\u4ee5\u200b\u8df3\u8f6c\u200b\u5230\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b</p> <p>F7 Search. \u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b</p> <p>Shift F5 Insert table</p> <p>alt F9 Save</p> <p>Enter Change mode</p> <p>Tab Enter assemble code</p>"},{"location":"ReverseEngineering/QuickView.html#010-editor","title":"010 Editor","text":"<p>Edit-&gt;insert File Insert file segment</p>"},{"location":"ReverseEngineering/Rev%20on%20hello.exe.html","title":"Rev on hello.exe","text":"<p> \u200b\u7ea6\u200b 183 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>Basic info * Header length = 20h * \u0394ss = 2023h * sp = 01A2h * \u0394cs = 2023h * ip = 000Ch * first seg = 20h * stack = 203F2h (in file) * code = 2025Ch (in file)</p> <p>bx = ip</p> <p>ax = psp+10h = first-seg bp = ds = es = first-seg dx = delta_cs edx = (dx &lt;&lt; 4)   (dx * 10h) ebx = bx = ip edx =dx * 10h + ebx = delta_cs * 10h + ip = delta_shell_code_s shellcode_len = [2025C, 202F2) = 96h 067C:0000 - 269F:000C total 2023C 2025C = 200h * 101 + 5C si = di = 0</p> <ol> <li> <p>DecodeLoop:     ecx = 10000h     edx = edx &lt; ecx ? 0 : (delta_shell_code - ecx)</p> <p>es:[di] = ((\\ds: [si]) &lt;&lt; 4 ) ^ 57 (ds = es = first-seg) (CLD, positive direction)   ![[Pasted image 20231205111450.png]]   ecx = ecx / 10h (1000h)   es = ds = ds(first-seg) + 1000h   loop DecodeLoop(edx != 0)</p> </li> <li> <p>Relocation     count = cx = cs:[bx+019C] = 2     *table = di = cs:[bx+01AE]      si = bx+di+0196h (cs:1C0)     Relocation:     di = cs:[si] (offset)     dx = cs:[si+02h] (delta_seg)     es = bp(first-seg) + dx     es:[di] += bp(first-seg)     si += 0004h     loop Relocation</p> </li> </ol> <p>Reloc table</p> <p>269F:01C0  01 00 20 20 06 00 20 20</p> <p>![[Pasted image 20231205111513.png]] 3. Recover registers main entry: ss = 267C delta_ss = 2000 sp = 200 psp+10h = 67C jmp 269C:0000 = 269C:0 deltamain = 269C0 - 67C00 = 2020:0000 ![[Pasted image 20231205111540.png]]</p>"},{"location":"ReverseEngineering/Rev3.html","title":"Rev3","text":"<p> \u200b\u7ea6\u200b 49 \u200b\u4e2a\u200b\u5b57\u200b  84 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>for(int i=0; i&lt;8; i++){     int a = cs:[0000];     int d = 0x15a4e35;     long long c = a*d     a = c &amp; 0xFFFFFFFF     a++;     cs:[0000] = a;     a &gt;&gt;= 16; // 4 bytes     a &amp;= 0x7FFF;     unsigned char al = a &amp;= 0x3F;     cs:[i+0x4] = al; }</p> <p>calculate machine code</p> <p>table = {A-Z, a-z, 0-9, '+', '/'}</p> <p>for(int i=0; i&lt;8; i++){     lodsb al = [0x4 + i];     al = table[al];     cs:[0x19+i] = al; } unsigned char machine_code[8]; @cs:0019h;</p> <p>unsigned char sn[12]; @cs:00sc sn = gets();</p> <p>input@cs:002c</p> <p>table2 = {0-9,A-F}; @cs:00A5</p> <p>ans[6]; @ cs:0039</p> <p>for(int i=0; i&lt;12; i+=2){     unsigned char  j1, j2;     lookup(j1, sn[i], table2);     lookup(j2, sn[i+1], table2);     ans[i/2] |= (j1 &lt;&lt; 4);     ans[i/2] |= j2; } e.g. input 0123456789AB ![[Pasted image 20231111105557.png]]</p> <p>shell: 01A7 - 01BF  can not simply disable encode step, cause there exist jmp, so decode and encode must exist in pair.!!!!!!!</p> <p><code>bochs don't need to set breakpoint, just use F7 to trace into int.</code></p> <p>rol ans[i] i</p> <p>decode order: 1a8 1a9 1aa 1ad 1b0 1b3 1b5 1b6 1b8 1b9 1bb 1bc -&gt; 1b5 for(int bx = 0; bx &lt; 0x30; bx += 6){     ax = bx;     al = bx / 8;     ah = bx % 8;     ax = ans[al];     swap(ah, al);     ax &lt;&lt;= (bx%8)     ax &gt;&gt;=0xA;     lookup(al, table1) -&gt; 067c:003F }</p> <p>ans = 0x4C, 0x6C, 0x66, 0x39, 0x64, 0x2B, 0x75, 0x36</p> <p>regcode: <pre><code>#include&lt;stdio.h&gt;\n\nunsigned char ans[9] = { 0x4C, 0x6C, 0x66, 0x39, 0x64, 0x2B, 0x75, 0x36, '\\0'};\nunsigned char sn[6];\nunsigned char input[13];\n\nunsigned char table[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n\nunsigned char machine_code[9];\n\nunsigned char lookup(unsigned char x){\n    if(x &gt;= 0 &amp;&amp; x &lt;= 25){\n        x = 'A' + x;\n    }else if(x &gt;= 26 &amp;&amp; x &lt;= 51){\n        x = x - 26 + 'a';\n    }else if(x &gt;= 52 &amp;&amp; x &lt;= 61){\n        x = x - 52 + '0';\n    }else if(x == 62){\n        x = '+';\n    }else{ // '?'\n        x = '/';\n    }\n    return x;\n}\n\nunsigned char revBase64(unsigned char x){\n    if(x &gt;= 'A' &amp;&amp; x &lt;= 'Z'){\n        x = x - 'A';\n    }else if(x &gt;= 'a' &amp;&amp; x &lt;= 'z'){\n        x = x - 'a' + 26;\n    }else if(x &gt;= '0' &amp;&amp; x &lt;= '9'){\n        x = x - '0' + 52;\n    }else if(x == '+'){\n        x = 0x3e;\n    }else{ // '?'\n        x = 0x3f;\n    }\n    return x;\n}\n\nint main(){\n    scanf(\"%s\", machine_code);\n\n    for(int i=0; i&lt;8; i++){\n        ans[i] = machine_code[i];\n    }\n    // printf(\"ans = %s\\n\", ans);\n    for(int i=0; i&lt;2; i++){\n        int index = i*4;\n        unsigned ch = revBase64(ans[index]);\n        sn[i*3] = sn[i*3+1] = sn[i*3+2] = 0;\n        sn[i*3] |= ((ch &amp; 0x3F)&lt;&lt;2);\n        ch = revBase64(ans[index+1]);\n        sn[i*3] |= ((ch &amp; 0x30) &gt;&gt; 4);\n        sn[i*3+1] |= ((ch &amp; 0xF) &lt;&lt; 4);\n\n        ch = revBase64(ans[index+2]);\n        sn[i*3+1] |= ((ch &amp; 0x3C) &gt;&gt; 2);\n        sn[i*3+2] |= ((ch &amp; 0x3) &lt;&lt; 6);\n\n        ch = revBase64(ans[index+3]);\n        sn[i*3+2] |= (ch &amp; 0x3F);\n    }\n    // printf(\"\\nbefore base64 : \");\n    // for(int i=0; i&lt;6; i++){\n    //     printf(\"%x \", sn[i]);\n    // }\n    for(int i=0; i&lt;6; i++){\n        unsigned char tmp = sn[i];\n        sn[i] &gt;&gt;= (i+1);\n        sn[i] |= (tmp &lt;&lt; (8-(i+1)));\n    }\n    // printf(\"\\nafter lookup : \");\n    // for(int i=0; i&lt;6; i++){\n    //     printf(\"%x \", sn[i]);\n    // }\n    for(int i=0; i&lt;12; i+=2){\n        input[i] = (table[(((sn[i/2]) &amp; (0xF0)) &gt;&gt; 4)]);\n        input[i+1] = (table[(sn[i/2]&amp; (0xF))]);\n    }\n    input[12] = '\\0';\n    printf(\"%s\", input);\n    return 0;\n}\n</code></pre></p>"},{"location":"ReverseEngineering/Reverse%20of%20Windows%20Program.html","title":"Reverse of Windows Program","text":"<p> \u200b\u7ea6\u200b 120 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ReverseEngineering/Reverse%20of%20Windows%20Program.html#pre-fetch-before-sn-check","title":"Pre fetch (Before sn check)","text":"<ol> <li>File R/W Tool: FileMon File     CreatFile     CreatFileEx     ReadFile     WriteFile</li> </ol> <p>Tool: RegMon Reg     RegQueryValueExA     RegOpenKeyExA     RegCreatKey     RegSetValue</p> <ol> <li> <p>Breakpoint at register code     Set a hardware breakpoint at the memory that store the input reg code     eg: GetWindowTextA, GetText, WM_GETTEXT may read the reg code to memory     Windows message handle center : 0x77D18731 in x32</p> </li> <li> <p>WM_COMMAND breakpoint (0x111)     break at button down, menu down...     View-&gt;Windows, select a windows and Right Click     \u200b\u521b\u5efa\u200b\u7a97\u53e3\u200bWM_CREAT,\u200b\u8bfb\u53d6\u200b\u6587\u672c\u6846\u200bWM_GETTEXT, 110\u200b\u521d\u59cb\u5316\u200b\u5bf9\u8bdd\u6846\u200b\u3002</p> </li> </ol>"},{"location":"ReverseEngineering/Reverse%20of%20Windows%20Program.html#post-fetch-after-sn-check","title":"Post fetch (After sn check)","text":"<p>MessageBox (Registration failed message)     MessageBoxA     MessageBoxW     MessageBoxExA     MessageBoxExW     MessageBoxIndirectA     MessageBoxIndirectW</p> <p>DestroyWindow (Close message, actually dialog)</p> <p>Set breakpoint after a function call</p>"},{"location":"ReverseEngineering/Reverse%20on%201539.exe.html","title":"Reverse on 1539.exe","text":"<p> \u200b\u7ea6\u200b 149 \u200b\u4e2a\u200b\u5b57\u200b  74 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>-Remember to deactivate the hardware interrupt <pre><code>r fl i\n</code></pre></p> <p>1 Shell 1: <pre><code>bpmb 067c:00b6 x\nx\n</code></pre></p> <p>2 Shell 2: <pre><code>bpmb 067c:0137 x\nx\n</code></pre></p> <p>3 Base64 encode</p> <p>6 bit forms a 26('A'-'Z')+26('a'-'z')+10('0'-'9')+2('+','?')=64 char set <pre><code>bpmb 067c:01b6 x\nx\n</code></pre></p> <p>4 Swap &amp; xor</p> <p>peseudo code: for(int i=0; i&lt;16; i++){     uchar l = base64[i];     uchar h = base64[i+0x10];     l ^= 0x7;     h ^= 0xc;     base64[i] = h;     base64[i+0x10] = l;     or:     swap(base[i], base[i+0x10])     base[i] ^= 0xc;     base[i+0x10] ^= 0x7; }</p> <pre><code>bpmb 067c:01ce x\nx\n</code></pre> <p>5 Shuffle</p> <p>uchar resstr[] @ 003C for(int i=0; i&lt;16; i++){     resstr[i] = base64[i*\\2];     resstr[i+0x10] = base64[i*2+1]; } <pre><code>bpmb 067c:01e4 x\nx\n</code></pre></p> <p>6 Compare</p> <p>cmpare with ans @ 067c:005d len = 33</p> <p>ans[] = {0x45, 0x49, 0x41, 0x67, 0x56, 0x4e, 0x6f, 0x4a, 0x66, 0x49, 0x5d, 0x73, 0x5d, 0x45, 0x4e, 0x41, 0x48, 0x3d, 0x76, 0x6b, 0x48, 0x62, 0x75, 0x35, 0x40, 0x37, 0x69, 0x42, 0x43, 0x69, 0x43, 0x7d, 0x00}</p> <p>![[Pasted image 20231107161408.png]]</p> <p>compare ends at 067c:01f9</p> <p>Register code: <pre><code>#include&lt;stdio.h&gt;\n\nunsigned char ans[] = {0x45, 0x49, 0x41, 0x67, 0x56, 0x4e, 0x6f, 0x4a,\n0x66, 0x49, 0x5d, 0x73, 0x5d, 0x45, 0x4e, 0x41,\n0x48, 0x3d, 0x76, 0x6b, 0x48, 0x62, 0x75, 0x35,\n0x40, 0x37, 0x69, 0x42, 0x43, 0x69, 0x43, 0x7d,\n0x00};\n\nunsigned char base64[33];\nunsigned char sn[25];\n\nunsigned char revBase64(unsigned char x){\n    if(x &gt;= 'A' &amp;&amp; x &lt;= 'Z'){\n        x = x - 'A';\n    }else if(x &gt;= 'a' &amp;&amp; x &lt;= 'z'){\n        x = x - 'a' + 26;\n    }else if(x &gt;= '0' &amp;&amp; x &lt;= '9'){\n        x = x - '0' + 52;\n    }else if(x == '+'){\n        x = 0x3e;\n    }else{ // '?'\n        x = 0x3f;\n    }\n    return x;\n}\n\nint main(){\n    for(int i=0; i&lt;16; i++){\n        base64[i*2] = ans[i];\n        base64[i*2+1] = ans[i+0x10];\n    }\n\n    for(int i=0; i&lt;16; i++){\n        base64[i] ^= 0xc;\n        base64[i+0x10] ^= 0x7;\n        unsigned char tmp = base64[i];\n        base64[i] = base64[i+0x10];\n        base64[i+0x10] = tmp;\n    }\n\n    for(int i=0; i&lt;8; i++){\n        int index = i*4;\n        unsigned ch = revBase64(base64[index]);\n        sn[i*3] = sn[i*3+1] = sn[i*3+2] = 0;\n        sn[i*3] |= ((ch &amp; 0x3F)&lt;&lt;2);\n        ch = revBase64(base64[index+1]);\n        sn[i*3] |= ((ch &amp; 0x30) &gt;&gt; 4);\n        sn[i*3+1] |= ((ch &amp; 0xF) &lt;&lt; 4);\n\n        ch = revBase64(base64[index+2]);\n        sn[i*3+1] |= ((ch &amp; 0x3C) &gt;&gt; 2);\n        sn[i*3+2] |= ((ch &amp; 0x3) &lt;&lt; 6);\n\n        ch = revBase64(base64[index+3]);\n        sn[i*3+2] |= (ch &amp; 0x3F);\n    }\n\n    for(int i=0; i&lt;24; i++){\n        printf(\"%c\", sn[i]);\n    }\n\n    return 0;\n}\n</code></pre> Answer:</p> <p><code>hctf{Dd0g 1s 1539 d0gs!}</code></p>"},{"location":"ReverseEngineering/Soft-ice%20commands.html","title":"soft-ice","text":"<p> \u200b\u7ea6\u200b 646 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p> <p><code>d ss:sp</code> see memory dump <code>bpmb addr x</code> set hardware execute breakpoint <code>bc *</code> clear all breakpoints <code>u addr</code> jump to address in code window <code>wd x</code> set data window height <code>wc x</code> set code window height <code>? expression</code> can calculate expression <code>.</code>return to cs:ip in code window</p> <p><code>exit rd</code> stop debugging</p> <p>copy data in data window: \u200b\u7528\u200bbochs\u200b\u81ea\u5e26\u200b\u8c03\u8bd5\u5668\u200b\uff0cwritememory\uff0c\u200b\u8bb0\u4f4f\u200b\u5730\u5740\u200b\uff0c\u200b\u6362\u6210\u200b\u7269\u7406\u5730\u5740\u200b <code>help writemem \"&lt;filename&gt;\" &lt;laddr&gt; &lt;len&gt;</code> filename \u200b\u662f\u200bbochs\u200b\u5916\u200b\u5730\u5740\u200b</p> <pre><code>soft-ice\u200b\u5e38\u7528\u547d\u4ee4\u200b\n\u200b\u4efb\u4f55\u200b\u65f6\u5019\u200b\u6309\u200bctrl+d\u200b\u53ef\u4ee5\u200b\u547c\u200b\u51fa\u200bsoft-ice, \u200b\u518d\u200b\u6309\u200bctrl+d\u200b\u53ef\u4ee5\u200b\u9690\u85cf\u200b\n\u200b\u5355\u6b65\u200b\u8ddf\u8e2a\u200b\u64cd\u4f5c\u200b\u8ddf\u200bTD\u200b\u5b8c\u5168\u200b\u4e00\u6837\u200b, \u200b\u5373\u200bF7=trace into, F8=step over, F4=goto cursor\nec     \u200b\u5728\u200b\u547d\u4ee4\u200b\u7a97\u200b\u4e0e\u200b\u4ee3\u7801\u200b\u7a97\u200b\u4e4b\u95f4\u200b\u5207\u6362\u200b(enter code), \u200b\u5feb\u6377\u952e\u200bF6\nrs     \u200b\u67e5\u770b\u200b\u7528\u6237\u200b\u5c4f\u200b(restore screen), \u200b\u5feb\u6377\u952e\u200bF5\n.      \u200b\u8868\u793a\u200b\u56de\u5230\u200b\u5f53\u524d\u200bcs:ip, \u200b\u76f8\u5f53\u4e8e\u200bTD\u200b\u91cc\u9762\u200b\u7684\u200bctrl+o\n?                           \u200b\u663e\u793a\u200b\u5e2e\u52a9\u200b\u4fe1\u606f\u200b\n?      \u200b\u8868\u8fbe\u5f0f\u200b               \u200b\u8ba1\u7b97\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u503c\u200b\nd      \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b      \u200b\u67e5\u770b\u200b\u8be5\u200b\u5730\u5740\u200b\u5904\u200b\u5185\u5b58\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b(dump)\nu      \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b      \u200b\u67e5\u770b\u200b\u8be5\u200b\u5730\u5740\u200b\u5904\u200b\u7684\u200b\u6307\u4ee4\u200b(unassemble)\ne      \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b \u200b\u503c\u200b   \u200b\u4fee\u6539\u200b\u8be5\u200b\u5730\u5740\u200b\u5904\u200b\u5185\u5b58\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b(edit), \u200b\u4f8b\u5982\u200b: e ds:0 12 34 56 78\na      \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b \u200b\u6307\u4ee4\u200b \u200b\u4fee\u6539\u200b\u8be5\u200b\u5730\u5740\u200b\u5904\u200b\u7684\u200b\u6307\u4ee4\u200b(assemble), \u200b\u4f8b\u5982\u200b:a cs:ip mov ah, 2\ns      \u200b\u5730\u5740\u200b L\u200b\u957f\u5ea6\u200b \u200b\u503c\u200b        \u200b\u5728\u200b[\u200b\u5730\u5740\u200b,\u200b\u5730\u5740\u200b+\u200b\u957f\u5ea6\u200b-1]\u200b\u8303\u56f4\u200b\u5185\u200b\u641c\u7d22\u200b\u8be5\u503c\u200b, \u200b\u4f8b\u5982\u200b: s cs:0 L10 B4 4C\nf      \u200b\u5730\u5740\u200b L\u200b\u957f\u5ea6\u200b \u200b\u503c\u200b        \u200b\u628a\u200b\u8be5\u503c\u200b\u586b\u5165\u200b[\u200b\u5730\u5740\u200b,\u200b\u5730\u5740\u200b+\u200b\u957f\u5ea6\u200b-1], \u200b\u4f8b\u5982\u200b: f ds:0 L10 0\nm      \u200b\u5730\u5740\u200b1 L\u200b\u957f\u5ea6\u200b \u200b\u5730\u5740\u200b2    \u200b\u628a\u200b[\u200b\u5730\u5740\u200b1,\u200b\u5730\u5740\u200b1+\u200b\u957f\u5ea6\u200b-1]\u200b\u8303\u56f4\u200b\u5185\u200b\u7684\u200b\u5757\u200b\u590d\u5236\u5230\u200b\u5730\u5740\u200b2, \u200b\u4f8b\u5982\u200b: m ds:0 L 10 ds:100\nx      \u200b\u7ee7\u7eed\u6267\u884c\u200b, \u200b\u76f8\u5f53\u4e8e\u200bdebug\u200b\u4e2d\u200b\u7684\u200bg\u200b\u547d\u4ee4\u200b, \u200b\u5feb\u6377\u952e\u200bF9\u200b\u6216\u200bctrl+d\np ret  \u200b\u8fd0\u884c\u200b\u5230\u200b\u8fd4\u56de\u200b(\u200b\u6267\u884c\u200b\u5230\u200bret\u200b\u6216\u200biret), \u200b\u5feb\u6377\u952e\u200bF12\nbpx    \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b      \u200b\u8bbe\u7f6e\u200b\u8f6f\u4ef6\u200b\u65ad\u70b9\u200b,\u200b\u5feb\u6377\u952e\u200bF2\nbpmb   \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b x    \u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\u6267\u884c\u200b\u65ad\u70b9\u200b\nbpmb   \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b r    \u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\u8bfb\u200b\u65ad\u70b9\u200b\nbpmb   \u200b\u6bb5\u200b\u5730\u5740\u200b:\u200b\u504f\u79fb\u200b\u5730\u5740\u200b w    \u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\u5199\u200b\u65ad\u70b9\u200b\nbpint  \u200b\u4e2d\u65ad\u200b\u53f7\u200bn AH=m         \u200b\u5f53\u200b\u53d1\u751f\u200b\u4e2d\u65ad\u200bn\u200b\u4e14\u200bah=m\u200b\u65f6\u65ad\u200b\u4f4f\u200b\nbpio   n                    \u200b\u5f53\u200bn\u200b\u53f7\u200b\u7aef\u53e3\u200b\u6709\u200bi/o\u200b\u65f6\u65ad\u200b\u4f4f\u200b\ni3here on/off               \u200b\u5f53\u200bcpu\u200b\u6267\u884c\u200b\u5230\u200bint 3\u200b\u6307\u4ee4\u200b\u65f6\u8981\u200b\u4e0d\u8981\u200b\u8ba9\u200bsoft-ice\u200b\u5f39\u200b\u51fa\u200b\n\nmap        \u200b\u67e5\u770b\u200b\u5185\u5b58\u200b\u5206\u914d\u200b, \u200b\u53ef\u4ee5\u200b\u7528\u6b64\u200b\u547d\u4ee4\u200b\u67e5\u200b\u5230\u200b\u5404\u4e2a\u200b\u8fdb\u7a0b\u200b\u7684\u200bpsp\u200b\u6bb5\u5740\u200b\u53ca\u200b\u5360\u7528\u200b\u5185\u5b58\u200b\u7684\u200b\u8282\u200b\u957f\u5ea6\u200b(1\u200b\u8282\u200b=16\u200b\u5b57\u8282\u200b)\nBL         \u200b\u663e\u793a\u200b\u6240\u6709\u200b\u65ad\u70b9\u200b\nBC     n   \u200b\u6e05\u9664\u200b\u7b2c\u200bn\u200b\u4e2a\u200b\u65ad\u70b9\u200b\nBD     n   \u200b\u7981\u6b62\u200b\u7b2c\u200bn\u200b\u4e2a\u200b\u65ad\u70b9\u200b\nBE     n   \u200b\u5141\u8bb8\u200b\u7b2c\u200bn\u200b\u4e2a\u200b\u65ad\u70b9\u200b\nBC     *   \u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u65ad\u70b9\u200b\nexit   rd  \u200b\u82e5\u200b\u8c03\u8bd5\u200b\u65f6\u200b\u4ea7\u751f\u200b\u4e86\u200b\u975e\u6cd5\u64cd\u4f5c\u200b\u5bfc\u81f4\u200bdos\u200b\u7cfb\u7edf\u200b\u5d29\u6e83\u200b,\u200b\u6b64\u200b\u547d\u4ee4\u200b\u53ef\u4ee5\u200b\u5f3a\u5236\u200b\u6062\u590d\u200b\u4e2d\u65ad\u5411\u91cf\u200b\u8868\u200b\u3002\nhboot      \u200b\u91cd\u542f\u200b(hard boot)\n</code></pre> <p>bochs: pb: physical breakpoint</p>"},{"location":"ReverseEngineering/Windows%20EXE.html","title":"Windows EXE","text":"<p> \u200b\u7ea6\u200b 2279 \u200b\u4e2a\u200b\u5b57\u200b  45 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 8 \u200b\u5206\u949f\u200b</p> <p>refer to cc.zju.edu.cn/bhh/pe.txt</p> <ol> <li> <p>PE\u200b\u5934\u200b    \u200b\u524d\u9762\u200b\u7684\u200b\u5934\u200b\u662f\u200b\u5047\u200b\u7684\u200b\uff08DOS\u200b\u5934\u200b\uff09\uff0c\u200b\u4e3a\u4e86\u200b\u8bef\u5bfc\u200bdos\u200b\u8fdb\u5165\u200bcan not run in dos mode\uff0c\u200b\u5934\u200b\u7684\u200b\u7ed3\u5c3e\u200b\uff083C\uff09\u200b\u6709\u4e2a\u200b\u5730\u5740\u200b\uff0c\u200b\u624d\u200b\u662f\u200bwindows\u200b\u7684\u200b\u6587\u4ef6\u200b\u5934\u200b\uff08PE\uff09</p> <p>PE+28\u200b\u5904\u200b\uff0c\u200b\u662f\u200b\u4e2a\u200b32\u200b\u4f4d\u6570\u200b\uff0c\u200b\u7b2c\u4e00\u6761\u200b\u6307\u4ee4\u200b\u7684\u200b\u5730\u5740\u200b\uff08\u0394EIP\uff09\u200b\u9700\u8981\u200b\u52a0\u4e0a\u200b40_0000h \u200b\u50cf\u200b\u8fd9\u79cd\u200b\u76f8\u5bf9\u200b\u5730\u5740\u200b\u79f0\u4e3a\u200bRVA(Relative virtual address) 40_0000\u200b\u79f0\u4e3a\u200bbase address\uff0c\u200b\u662f\u200bwindows exe\u200b\u8f7d\u5165\u200b\u7684\u200b\u9996\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u865a\u62df\u5730\u5740\u200b\uff0cOS\u200b\u4f1a\u200b\u901a\u8fc7\u200b\u9875\u8868\u200b\u5c06\u200b\u5176\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u7269\u7406\u5730\u5740\u200b</p> <p>windows\u200b\u4e2d\u200bcs ds es ss\u200b\u662f\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u8d4b\u503c\u200b\u7684\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5728\u200b\u6587\u4ef6\u200b\u5934\u200b\u5b9a\u4e49\u200b PE+6\u200b\u5904\u200b\uff0c2\u200b\u5b57\u8282\u200b\uff0csection\u200b\u6570\u76ee\u200b PE+34\u200b\u5904\u200b\uff0cEXE\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u7684\u200b\u57fa\u200b\u5730\u5740\u200b\uff0c\u200b\u4e00\u822c\u200b\u4e3a\u200b40_000h PE+38\u200b\u5904\u200b\uff0c1000h\uff0c\u200b\u4e00\u4e2a\u200b\u9875\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5185\u5b58\u200b\u5bf9\u9f50\u200b\u503c\u200b\uff0c\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u65f6\u200b\u7684\u200b\u5bf9\u9f50\u200b PE+3C\u200b\u5904\u200b\uff0c200h\uff0c\u200b\u4e00\u4e2a\u200b\u6247\u533a\u200b\uff0c\u200b\u6587\u4ef6\u200b\u5bf9\u9f50\u200b\u503c\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u6bcf\u4e2a\u200bsection\u200b\u957f\u5ea6\u200b\u8981\u200b\u5bf9\u200b\u8be5\u503c\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u4e0d\u591f\u200b\u8865\u200b0 PE+50\u200b\u5904\u200b\u300132\u200b\u4f4d\u503c\u200b\uff0c\u200b\u8be5\u200bEXE\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u540e\u200b\u7684\u200b\u603b\u957f\u5ea6\u200b\uff08byte\uff09,\u200b\u6587\u4ef6\u200b\u5934\u200b\u603b\u957f\u5ea6\u200b\uff08\u200b\u4e5f\u200b\u8981\u200b\u5bf9\u9f50\u200b1000h\uff09+\u200b\u5404\u4e2a\u200bsection\u200b\u8f7d\u5165\u200b        \u200b\u5185\u5b58\u200b\u540e\u200b\u7684\u200b\u957f\u5ea6\u200b PE+54\u200b\u5904\u200b\u300132\u200b\u4f4d\u503c\u200b\uff0c\u200b\u8be5\u200bEXE\u200b\u6587\u4ef6\u200b\u5934\u200b\u603b\u957f\u5ea6\u200b\uff0cDOS+PE\uff0c\u200b\u8be5\u503c\u200b\u5373\u200b\u4e3a\u200b\u7b2c\u4e00\u4e2a\u200b\u6bb5\u200b\u7684\u200b\u4f4d\u7f6e\u200b PE+80 \u200b\u8f93\u5165\u200b\u8868\u200b(import table)\u200b\u7684\u200b\u5185\u5b58\u200b\u504f\u79fb\u200b\uff08RVA\uff09F8F3\u200b\u67e5\u8868\u200b\u5f97\u5230\u200b\u6587\u4ef6\u200b\u5730\u5740\u200b PE+84 \u200b\u8f93\u5165\u200b\u8868\u200b\u7684\u200b\u5185\u5b58\u200b\u957f\u5ea6\u200b PE+F8\u200b\u5904\u200b\u3001.text\uff08code\uff09 Qv F2\u200b\u4ece\u200b16\u200b\u4f4d\u200b\u5207\u6362\u200b\u5230\u200b32\u200b\u4f4d\u200b</p> <p>.text \u200b\u5171\u9700\u200b28byte\u200b\u63cf\u8ff0\u200b .text+0 section name\uff0c\u200b\u4e0d\u8db3\u200b\u5728\u200b\u540e\u9762\u200b\u8865\u200b0 .text+8  4\u200b\u5b57\u8282\u200b\u4e3a\u200b\u8be5\u8282\u200b\u5185\u5bb9\u200b\u7684\u200b\u5185\u5b58\u200b\u957f\u5ea6\u200b\uff08\u200b\u9700\u8981\u200b\u62c9\u4f38\u200b\uff09 .text+C 4\u200b\u5b57\u8282\u200b\u4e3a\u200b\u8be5\u8282\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u7684\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\uff08RVA\uff09 .text+10h \u200b\u8be5\u8282\u200b\u6587\u4ef6\u200b\u957f\u5ea6\u200b(\u200b\u5df2\u200b\u62c9\u4f38\u200b) .text+14h \u200b\u8be5\u8282\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u504f\u79fb\u200b\u4f4d\u7f6e\u200b .text+24\u200b\u4e3a\u8282\u200b\u7684\u200b\u5c5e\u6027\u200b(<code>WREspcUIC</code>) F8+F3\u200b\u5373\u53ef\u200b\u67e5\u770b\u200bPE\u200b\u5934\u200b\u4fe1\u606f\u200b\uff01\uff01</p> <p>.rsrc resource\u200b\u8d44\u6e90\u200b call \u200b\u6307\u4ee4\u200b\uff0c\u200b\u5730\u5740\u200b\u4e3a\u200b\u76ee\u6807\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u51cf\u53bb\u200bcall\u200b\u4e0b\u200b\u4e00\u6761\u200b\u6307\u4ee4\u200b\u7684\u200b\u5730\u5740\u200b</p> </li> <li> <p>import table</p> <p>h= LoadLibrary(\"user32.dll\"); h\u200b\u662f\u200bdll\u200b\u7684\u200b\u57fa\u200b\u5730\u5740\u200b  user32.dll\u200b\u662f\u200b\u591a\u4e2a\u200bAPI\u200b\u51fd\u6570\u200b\u4f53\u200b\u7684\u200b\u96c6\u5408\u200b\u3002Windows\u200b\u542f\u52a8\u200b\u65f6\u4f1a\u200b\u5c06\u200b\u5b83\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b  p = GetProcAddress(h, \"MessageBoxA\"); \u200b\u4e5f\u200b\u53ef\u200b\u586b\u5165\u200bAPI\u200b\u7684\u200b\u5e8f\u53f7\u200b  p\u200b\u5373\u200b\u4e3a\u200bMessageBoxA\u200b\u8fd9\u4e2a\u200bAPI\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u9700\u8981\u200b\u8fdb\u884c\u200bAPI\u200b\u5730\u5740\u200b\u7684\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\uff08import table\uff09  dos:</p> <pre><code>invoke MessageBox, 0, offset result, offset prompt, 0\n; function name, parameters...\n</code></pre> <p>\u200b\u800c\u200bprintf()\u200b\u7684\u200b\u673a\u5668\u8bed\u8a00\u200b\u4ee3\u7801\u200b\u662f\u200b\u4e00\u4e2a\u200bobj\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5305\u542b\u200b\u5728\u200b\u4e00\u4e2a\u200b\u9759\u6001\u200b\u5e93\u200b\u6587\u4ef6\u200bcs.lib\uff0c\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u6253\u5f00\u200blib\u200b\u6587\u4ef6\u200b\u641c\u7d22\u200bprintf.obj\uff0c\u200b\u6700\u540e\u200b\u628a\u200bprintf.obj\u200b\u4e0e\u200bmain.obj\u200b\u5408\u5e76\u200b</p> <p>\u200b\u5185\u5b58\u5730\u5740\u200b\u5230\u200b\u6587\u4ef6\u200b\u5730\u5740\u200b\u5b9a\u4f4d\u200b</p> <p>\u200b\u5982\u4f55\u200b\u5b9a\u4f4d\u200b\uff1f<code>402004h</code> -&gt; <code>2004h</code> -&gt; <code>RVA=2000h, PysOffset=600h</code>section\u200b\u5185\u200b -&gt; <code>600h+4h=604h</code> </p> <p>\u200b\u4e00\u4e2a\u200bexe\u200b\u53ef\u200b\u5bf9\u5e94\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\u8868\u200b\u3002\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u8868\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200bDLL\u200b\u53ca\u200b\u8be5\u200bDLL\u200b\u5305\u542b\u200b\u7684\u200b\u51fd\u6570\u200b</p> <p>\u200b\u4f8b\u200b\uff1a\u200b\u8c03\u7528\u200b<code>user32.dll!MessageBoxA</code>\uff0c\u200b\u53c8\u200b\u8c03\u7528\u200b<code>kernel32.dll!GetProcAddress</code>\uff0c\u200b\u90a3\u4e48\u200b\u8f93\u5165\u200b\u8868\u6709\u200b\u4e24\u4e2a\u200b</p> <p>import_table\u200b\u4e2d\u200b\u7684\u200b3\u200b\u4e2a\u200b\u6210\u5458\u200b\u5168\u662f\u200b\u6307\u9488\u200b</p> <p>import_table+00 \u200b\u6307\u5411\u200bAPI\u200b\u7684\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u200b\uff08RVA\uff09\uff0c\u200b\u4ee5\u200b <code>00 00 00 00</code> (NULL)\u200b\u7ed3\u675f\u200b</p> <p>\u200b                API\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8981\u200b+2\uff0c\u200b\u624d\u200b\u6307\u5411\u200b\u771f\u7684\u200bAPI\u200b\u540d\u5b57\u200b\uff08\u200b\u4ee5\u200b <code>00</code> \u200b\u7ed3\u675f\u200b\uff09\u3002\u200b\u524d\u200b\u4e24\u4e2a\u200b\u5b57\u8282\u200b\u7ec4\u6210\u200bAPI\u200b\u7684\u200b\u5e8f\u53f7\u200b              \uff08\u200b\u82e5\u6709\u200bAPI\u200b\u540d\u5b57\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6ca1\u7528\u200b\uff09\u3002</p> <p>\u200b                \u200b\u5982\u679c\u200b\u5730\u5740\u200b\u5de8\u5927\u200b\uff08\u200b\u5927\u4e8e\u200b80000000\uff0c\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u7b49\u4e8e\u200b1\uff0c\u200b\u56e0\u4e3a\u200b8 = b'100\uff09\uff0c\u200b\u8bf4\u660e\u200b\u4e0d\u662f\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u3002             \u200b\u53bb\u6389\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u83b7\u5f97\u200bAPI\u200b\u5e8f\u53f7\u200b</p> <pre><code>if((x &amp; 0x80000000) == 0)\n      printf(\"API name=%s\", baseaddress+x+2);\nelse\n      printf(\"API Ordinal Number=%d\", x &amp; 0x7FFFFFFF);\n</code></pre> <p>import_table + 0C 4 byte \u200b\u6307\u5411\u200bdll\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u5fc5\u987b\u200b\u4ee5\u200b00\u200b\u7ed3\u675f\u200b\u3002\uff08RVA\uff09 </p> <p>import_table+10h \u200b\u6307\u5411\u200bAPI\u200b\u5730\u5740\u200b\u8868\u200b\uff08RVA\uff09\uff0c\u200b\u4ee5\u200b<code>00 00 00 00</code> (NULL) \u200b\u7ed3\u675f\u200b\uff0c\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4e0e\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u200b\u76f8\u540c\u200b\u3002                \u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u65f6\u200b\u88ab\u200b\u66ff\u6362\u6210\u200bAPI\u200b\u7684\u200b\u771f\u5b9e\u200b\u5730\u5740\u200b\uff0c\u200b\u4f1a\u200b\u4f5c\u4e3a\u200b\u51fd\u6570\u6307\u9488\u200b\uff0c\u200b\u4f5c\u4e3a\u200bjmp\u200b\u6216\u200bcall\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002</p> <p>\u200b                \u200b\u4f8b\u5982\u200bAPI\u200b\u5730\u5740\u200b\u8868\u200b\u7684\u200bRVA\u200b\u4e3a\u200b2000\uff0c\u200b\u5219\u200b\u68c0\u67e5\u200b\u4ee3\u7801\u6bb5\u200b\u5185\u200b\u6709\u6ca1\u6709\u200b\u5bf9\u200b<code>402000</code>\u200b\u7684\u200b\u5f15\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b<code>[402000]</code>               \u200b\u4f1a\u200b\u5728\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u65f6\u200b\u88ab\u200b\u66ff\u6362\u200b\u4e3a\u200bAPI\u200b\u51fd\u6570\u200b\u7684\u200b\u771f\u5b9e\u200b\u5730\u5740\u200b\u3002\u200b\u771f\u5b9e\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f1a\u200b<code>jmp [402000]</code>\u3002</p> <p>\u200b                \u200b\u8fd9\u6837\u200b\u5c31\u200b\u5bf9\u200bAPI\u200b\u8fdb\u884c\u200b\u4e86\u200b\u7edf\u4e00\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\uff0c\u200b\u4e0d\u7528\u200b\u5bf9\u200b\u6bcf\u4e2a\u200bcall\u200b\u90fd\u200b\u518d\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u4e86\u200b\uff01\uff01</p> <p>\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u8868\u200b14h\u200b\u957f\u200b\uff0c\u200b\u76f4\u5230\u200b\u8fde\u7eed\u200b14h\u200b\u4e2a\u200bbyte\u200b\u5168\u662f\u200b0\uff0c\u200b\u4ee3\u8868\u200b\u8f93\u5165\u200b\u8868\u200b\u7ed3\u675f\u200b\u3002\u200b\u6ca1\u6709\u200b<code>count</code></p> <p>\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u8868\u200b\u7ed3\u675f\u200b\u540e\u200b\uff0c\u200b\u8981\u200b+0x14\uff0c\u200b\u53bb\u200b\u627e\u200b\u4e0b\u200b\u4e00\u4e2a\u200b</p> </li> <li> <p>export table</p> <p>ddl\u200b\u4e2d\u6709\u200b\u4e00\u4e2a\u200b\u521d\u59cb\u5316\u200b\u51fd\u6570\u200b\uff0cDllMain\uff0cdll\u200b\u88ab\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u65f6\u200b\u8c03\u7528\u200b\uff0c\u200b\u91ca\u653e\u200b\u65f6\u200b\u4e5f\u200b\u8c03\u7528\u200b\u3002\u200b\u8be5\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u4e3a\u200bIP\u200b\u7684\u200bRVA</p> <pre><code>bool DllMain(HANDLE hModule,\n       DWORD ul_reason_for_call, ...)\n</code></pre> <pre><code>extern \"C\" __declspec(dllexport) int WINAPI add(...){...}\n</code></pre> <p><code>dllexport</code> \u200b\u8868\u793a\u200b\u8be5\u200b\u51fd\u6570\u200b\u9700\u8981\u200b\u88ab\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\uff0c\u200b\u53ea\u80fd\u200b\u88ab\u200b\u5185\u90e8\u200b\u8c03\u7528\u200b</p> <p>\u200b\u4e00\u822c\u200b\u5b58\u653e\u200b\u4e8e\u200bDLL\u200b\u4e2d\u200b(\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4efd\u200b)</p> <p>PE+78 \u200b\u8f93\u51fa\u8868\u200b\u5185\u5b58\u200b\u504f\u79fb\u200b</p> <p>PE+7C\u200b\u8f93\u51fa\u8868\u200b\u5185\u5b58\u200b\u957f\u5ea6\u200b</p> <p>PE+80 \u200b\u8f93\u5165\u200b\u8868\u200b</p> <p>export_table + 0C dll\u200b\u7684\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\uff08\u200b\u540d\u5b57\u200b\u53ef\u200b\u4fee\u6539\u200b\uff0c\u200b\u8f7d\u5165\u200bdll\u200b\u65f6\u200b\u770b\u200b\u7684\u200b\u662f\u200b\u6587\u4ef6\u540d\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4ec5\u4e3a\u200b\u7f16\u8bd1\u5668\u200b\u751f\u6210\u200b\u7684\u200b\u63d0\u793a\u200b\uff09</p> <p>export_table + 10 \u200b\u4ee3\u8868\u200bAPI\u200b\u5e8f\u53f7\u200b\u7684\u200b\u57fa\u6570\u200b</p> <p>export_table + 14 dll\u200b\u5bfc\u51fa\u200b\u7684\u200b\u6240\u6709\u200b\u7684\u200bAPI\u200b\u7684\u200b\u4e2a\u6570\u200b</p> <p>export_table + 18 dll\u200b\u5bfc\u51fa\u200b\u7684\u200b\u6709\u200b\u540d\u5b57\u200b\u7684\u200bAPI\u200b\u7684\u200b\u4e2a\u6570\u200b</p> <p>export_table + 1C API\u200b\u5730\u5740\u200b\u8868\u200b\u6307\u9488\u200b</p> <p>export_table + 20 API\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u200b\uff08\u200b\u65e0\u200bAPI\u200b\u5e8f\u53f7\u200b\uff09\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u4e2d\u200b\u7b2c\u200b<code>i</code>\u200b\u4e2a\u200b\u540d\u5b57\u200b\u7684\u200b\u5e8f\u53f7\u200b\uff0c\u200b\u4e3a\u200b\u5e8f\u53f7\u200b\u8868\u4e2d\u200b\u7b2c\u200b<code>i</code>\u200b\u4e2a\u503c\u200b</p> <p>export_table + 24 API\u200b\u5e8f\u53f7\u200b\u8868\u200b\uff0816\u200b\u4f4d\u200b\uff09\u200b\u8981\u200b\u548c\u200b\u57fa\u6570\u200b\u76f8\u52a0\u200b\uff0c\u200b\u5e8f\u53f7\u200b\u5373\u200b\u4e3a\u200bAPI\u200b\u5730\u5740\u200b\u8868\u200b\u7684\u200b\u4e0b\u6807\u200b</p> <p>\u200b\u540d\u5b57\u200b-&gt;\u200b\u5e8f\u53f7\u200b-&gt;\u200b\u5730\u5740\u200b\uff0c<code>addr[ index[ pos[ name ] ] ]</code></p> <p>PeExplorer</p> <p>\u200b\u4e3b\u9875\u200b\u641c\u7d22\u200b\uff1aPE\u200b\u8d44\u6e90\u200b(resource)\u200b\u67e5\u770b\u200b\u53ca\u200b\u4fee\u6539\u200b\u5de5\u5177\u200b</p> </li> <li> <p>\u200b\u52a8\u6001\u200b\u5e93\u200bAPI\u200b\u7684\u200b\u8c03\u7528\u200b</p> <ul> <li>\u200b\u52a8\u6001\u200b\u8c03\u7528\u200b</li> </ul> <pre><code>HINSTANCE h;\ntypedef int (WINAPI *PF)(int x, int y);\n// WINAPI \u200b\u88ab\u5b8f\u200b\u5b9a\u4e49\u200b\u4e3a\u200b __stdcall\uff0c\u200b\u53c2\u6570\u200b\u7531\u53f3\u200b\u5230\u200b\u5de6\u200b\u538b\u5165\u200b\u5806\u6808\u200b\uff0c\u200b\u88ab\u200b\u8c03\u7528\u8005\u200b\u6e05\u7406\u200b\u5806\u6808\u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b. \u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\u5373\u200b\u4e3a\u200b(retn 0x8)\n// __cdecl\uff0c\u200b\u53c2\u6570\u200b\u6e05\u7406\u200b\u7531\u200b\u8c03\u7528\u8005\u200b\u8d1f\u8d23\u200b\uff0c\u200b\u53c2\u6570\u200b\u7531\u53f3\u200b\u5230\u200b\u5de6\u200b\u538b\u5165\u200b\u5806\u6808\u200b\nPF p;\n__asm int 3; // breakpoint\nh = LoadLibrary(\"***.dll\");\np = GetPorcAddress(h, \"add\");\nz = (*p)(10, 20); // z = 10 + 20\n</code></pre> <ul> <li>\u200b\u9759\u6001\u200b\u8c03\u7528\u200b</li> </ul> <p>lib\u200b\u6587\u4ef6\u200b\u662f\u200b\u4e2a\u200b\u7a7a\u58f3\u200b\uff0c\u200b\u771f\u6b63\u200b\u7684\u200b\u4ee3\u7801\u200b\u5728\u200b<code>***.dll</code>\u200b\u4e2d\u200b\u3002\u200b\u5728\u200b\u7f16\u8bd1\u200b<code>***.dll</code>\u200b\u65f6\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b<code>.lib</code>\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f46\u662f\u200b<code>.lib</code>\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4e0d\u200b\u5305\u542b\u200b\u51fd\u6570\u200b\u4f53\u200b\uff0c\u200b\u53ea\u200b\u8d77\u5230\u200b\u8df3\u677f\u200b\u4f5c\u7528\u200b\u3002\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u5e2e\u5fd9\u200b\u83b7\u53d6\u200b\u51fd\u6570\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u5176\u200b\u751f\u6210\u200b\u8f93\u5165\u200b\u8868\u200b\uff0c\u200b\u8fd9\u6837\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u5c31\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5b8c\u6210\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u3002</p> <pre><code>#pragma comment(lib, \"***.lib\")\nextern \"C\" int WINAPI add(int x, int y)\n</code></pre> </li> <li> <p>\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b</p> </li> </ol> <p>\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u4e00\u822c\u200b\u53ea\u200b\u5b58\u5728\u200b\u4e8e\u200bdll\u200b\u4e2d\u200b\u3002</p> <p>exe\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u7684\u200b\u57fa\u200b\u5730\u5740\u200b\u548c\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u7684\u200b\u57fa\u200b\u5730\u5740\u200b\u662f\u200b\u4e00\u81f4\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u65e0\u9700\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u3002</p> <p>\u200b\u800c\u200bdll\u200b\u5047\u5b9a\u200b\u7684\u200b\u5730\u5740\u200b\u53ef\u80fd\u200b\u88ab\u200b\u5360\u7528\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8981\u200b\u8fdb\u884c\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u3002\uff08\u200b\u7f16\u8bd1\u200b\u65f6\u57fa\u200b\u5730\u5740\u200b<code>100000h</code>\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u65f6\u200b<code>300000h</code>\uff09</p> <p>PE+A0: \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u6307\u9488\u200b\u548c\u200b\u957f\u5ea6\u200b</p> <p>reloc + 00 \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u9879\u57fa\u200b\u5730\u5740\u200b</p> <p>reloc + 04 \u200b\u5f53\u524d\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\uff08\u200b\u5305\u62ec\u200b\u5934\u90e8\u200b8byte\uff0c\u200b\u540e\u7eed\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b\u4e3a\u200b\u8be5\u503c\u200b-8\uff09</p> <p>\u200b\u8be5\u8868\u200b\u7ed3\u675f\u200b\uff0c\u200b\u5373\u4e0b\u200b\u4e00\u5f20\u200b\u8868\u200b\u5f00\u59cb\u200b\uff08\u200b\u4e0b\u200b\u4e00\u5f20\u200b\u8868\u200b\u5730\u5740\u200b=<code>addr(current_reloc) + len(current_reloc)</code>\uff09</p> <p>reloc + 08 (2 byte) \u200b\u6bcf\u9879\u200b\u90fd\u200b\u662f\u200b3\u200b\u5f00\u5934\u200b\u3002\u200b\u6254\u6389\u200b\u6700\u9ad8\u200b\u4f4d\u200b3\uff0c\u200b\u52a0\u4e0a\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u9879\u57fa\u200b\u5730\u5740\u200b\uff0c\u200b\u5373\u200b\u4e3a\u200b\u5185\u5b58\u5730\u5740\u200b(RVA)\u3002</p> <p>\u200b\u53bb\u6389\u200b3\u200b\u6700\u5927\u200b\u662f\u200b<code>0FFF</code>\uff0c\u200b\u52a0\u4e0a\u200b\u57fa\u200b\u5730\u5740\u200b\u4e0d\u4f1a\u200b\u8d85\u200b<code>1000</code>\uff0c\u200b\u6240\u4ee5\u200b\u57fa\u200b\u5730\u5740\u200b\u4e00\u822c\u200b\u90fd\u200b\u662f\u200b<code>1000h</code>\u200b\u500d\u6570\u200b\u3002</p> <p>\u200b\u5982\u200b<code>30 36 -&gt; 00 36 -&gt; 00 36 + 00 00 10 00 -&gt; 00 00 10 36</code></p> <p>F2\u200b\u8f6c\u6362\u200b\u4e3a\u200b32\u200b\u4f4d\u200b\uff0c\u200b\u5411\u4e0a\u200b\u6eda\u52a8\u200b\u51e0\u884c\u200b\uff08\u200b\u8ba9\u200b\u6307\u4ee4\u200b\u4ece\u200b\u6b63\u786e\u200b\u4f4d\u7f6e\u200b\u89e3\u6790\u200b\uff09</p> <p>\u200b\u52a0\u4e0a\u200b\u57fa\u200b\u5730\u5740\u200b\u5dee\u200b</p> <p>Windows \u200b\u8131\u58f3\u200b</p> <p>\u200b\u81ea\u52a8\u200b\u8131\u58f3\u200b\uff1a</p> <p>pushad or pushfd \u200b\u540e\u200b\uff0c\u200b\u5bf9\u6808\u200b\u9876\u200b\u5143\u7d20\u200bmpmd r\uff08\u200b\u5185\u5b58\u200bdword\u200b\u8bbf\u95ee\u200b\u65ad\u70b9\u200b\uff09\uff0c\u200b\u7136\u540e\u200b\u8fd0\u884c\u200b\uff0c\u200b\u65ad\u4f4f\u200b\u540e\u200b\u8bb0\u5f97\u200b\u5411\u4e0a\u200b\u6eda\u52a8\u200b\u624d\u80fd\u200b\u770b\u5230\u200bpop\u200b\u6307\u4ee4\u200b\u3002</p> <p>GetModuleHandle(dllname) \uff0c\u200b\u62ff\u5230\u200bdll\u200b\u7684\u200bhandle</p> <p>\u200b\u5982\u4f55\u200b\u5feb\u901f\u200b\u8fd4\u56de\u200b\uff1f\u200b\u67e5\u770b\u200b\u5806\u6808\u200b\u9876\u90e8\u200b\uff08\u200b\u5373\u200b\u4e3a\u200b\u8fd4\u56de\u200b\u5730\u5740\u200b\uff0c\u200b\u9009\u4e2d\u200b\uff0c\u200b\u6309\u200bEnter\uff09</p> <p>\u200b\u8fd4\u56de\u503c\u200b\uff08eax\uff09\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u8d77\u6765\u200b\u3002</p> <p>\u200b\u4ece\u200b[ecx]\u200b\u53d6\u200b\u4e86\u200bAPI\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\uff0c</p> <p>\u200b\u68c0\u6d4b\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u662f\u5426\u200b\u7b49\u4e8e\u200b1\uff0c\uff08test ebx, 0x80000000\uff09</p> <p>\u200b\u52a0\u4e0a\u200b\u57fa\u200b\u5730\u5740\u200b\uff0c\u200b\u5e76\u200b+2\uff08\u200b\u8df3\u8fc7\u200bAPI hint\uff09</p> <p>GetProcAddress\uff08handle\uff0c name\uff09\u200b\u83b7\u53d6\u200bAPI\u200b\u5730\u5740\u200b</p> <p>\u200b\u5176\u4e2d\u200b\u4e00\u5f20\u200b\u8868\u200b\u7684\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u88ab\u200b\u4f18\u5316\u200b\u6210\u200b0\u200b\u4e86\u200b\uff0c\u200b\u8ba9\u200b\u58f3\u200b\u4ee3\u7801\u200b\u81ea\u52a8\u200b\u586b\u200b\u8fdb\u53bb\u200b</p> <p>ecx-4\uff0c\u200b\u8ba9\u200b\u5b83\u200b\u6307\u5411\u200b\u539f\u6765\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u586b\u8fdb\u200b\u65b0\u200b\u7684\u200b\u8868\u200b</p> <p>\u200b\u5229\u7528\u200b5\u200b\u5b57\u8282\u200b\uff0c\u200b\u6539\u6210\u200b\u4e00\u4e2a\u200bcall</p> <pre><code>0x406644\ncall 0x406652\n0x406652\nmov eax, [ecx-0x4]\nstosd ; mov es:[edi], eax\n</code></pre> <p>\u200b\u8bb0\u5f55\u200b\u8f93\u5165\u200b\u8868\u200b\u5730\u5740\u200b<code>0x40200C</code></p> <p>usercode\u200b\u5730\u5740\u200b<code>0x401000</code></p> <p>dump\u200b\u5185\u5b58\u200b\u5185\u5bb9\u200b</p> <p>\u200b\u67e5\u770b\u200b\u603b\u957f\u5ea6\u200b\uff1a\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8282\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u548c\u200b\u957f\u5ea6\u200b\u3002</p> <p>OD-&gt;\u200b\u67e5\u770b\u200b-&gt;\u200b\u5185\u5b58\u200b\uff0c\u200b\u672b\u200b\u5730\u5740\u200b40A000 - 400000 = 0xA000</p> <p>\u200b\u6216\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u5b9a\u4f4d\u200b\u5230\u200b40 0000\u200b\u518d\u200b\u5b9a\u4f4d\u200bPE\u200b\u5934\u200b\uff0c\u200b\u67e5\u770b\u200b\u8282\u200b\u63cf\u8ff0\u200b\u3002</p> <p>+F8\u200b\u5373\u200b\u4e3a\u200b\u8282\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u5728\u200b\u5185\u5b58\u200b\u7a97\u53e3\u200b\u53f3\u952e\u200b-&gt;MemoryDump-&gt;RangeDump</p> <p>\u200b\u628a\u200b4D5A\u200b\u6539\u6210\u200b\u5176\u4ed6\u200b\u7684\u200b\uff0c\u200b\u7136\u540e\u200bqv\u200b\u5c31\u200b\u80fd\u200b\u6253\u5f00\u200b\u4e86\u200b</p> <p>checklist\uff1a</p> <ul> <li>PE+28 \u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u4e3a\u200buser eip</li> <li>PE+3C \u200b\u6587\u4ef6\u200b\u5bf9\u9f50\u200b</li> <li>PE+50 exe\u200b\u6587\u4ef6\u200b\u957f\u5ea6\u200b</li> <li>PE+80 \u200b\u8f93\u5165\u200b\u8868\u200b\uff0c\u200b\u6539\u4e3a\u200buser\u200b\u7684\u200b\u8f93\u5165\u200b\u8868\u200b\u5730\u5740\u200b</li> <li>\u200b\u8282\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8282\u200b\u63cf\u8ff0\u200b28bytes\uff0c\u200b\u4fee\u6539\u200b\u6587\u4ef6\u200b\u957f\u5ea6\u200b\u548c\u200b\u6587\u4ef6\u200b\u504f\u79fb\u200b\uff08+10 + 14\uff09,\u200b\u6539\u6210\u200b\u4e0e\u200b\u5185\u5b58\u200b\u4e00\u81f4\u200b\u5373\u53ef\u200b\uff08+8, +C\u200b\u7684\u200b\u503c\u200b\uff09</li> <li>\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u200b\u7684\u200b\u5c5e\u6027\u200b\uff0c\u200b\u8981\u200bRWE\u3002</li> </ul> <p>clc\u200b\u8868\u793a\u200b\u51fd\u6570\u200b\u6b63\u5e38\u200b\u8fd4\u56de\u200b</p> <p>DOSBOX \u200b\u65b0\u5efa\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u8f93\u5165\u200b\u6307\u4ee4\u200b\uff0cCtrl+F1\u200b\u5e2e\u52a9\u200b\u5373\u53ef\u200b\u67e5\u8be2\u200b\u6307\u4ee4\u200b</p> <p>\u200b\u5f3a\u5236\u200b\u8ba9\u200bexe\u200b\u8c03\u7528\u200b\u6211\u200b\u7684\u200bdll</p> <p>\u200b\u67e5\u770b\u200bAPI\u200b\u7684\u200b\u5730\u5740\u200b\u4fdd\u5b58\u200b\u4f4d\u7f6e\u200b\uff1a</p> <p>\u200b   PEexplorer\uff0c \u200b\u67e5\u770b\u200bimport\uff0cAPI\u200b\u524d\u9762\u200b\u7684\u200bRVA\u200b\u4e3a\u200b\u5b58\u8be5\u200bAPI\u200b\u5730\u5740\u200b\u7684\u200b\u53d8\u91cf\u200b\u7684\u200b\u5730\u5740\u200b\uff0ccall [RVA]\u200b\u5373\u53ef\u200b\u8c03\u7528\u200bAPI</p> <p>\u200b   OD\uff0c\u200b\u4ee3\u7801\u200b\u7a97\u200b\u53f3\u952e\u200b\uff0c\u200b\u67e5\u627e\u200b\uff0c\u200b\u5f53\u524d\u200b\u6a21\u5757\u200b\u4e2d\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u53f3\u952e\u200b\u6309\u200b\u533a\u6bb5\u200b\u6392\u5e8f\u200b\uff08\u200b\u6309\u200bdll\u200b\u5206\u5757\u200b\u6392\u5e8f\u200b\uff09\uff0c\u200b\u53f3\u952e\u200b\u590d\u5236\u5230\u200b\u526a\u8d34\u677f\u200b\uff0c\u200b\u6574\u4e2a\u200b\u8868\u200b\uff0c\u200b\u5230\u200b\u5176\u4ed6\u200b\u5730\u65b9\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b</p> <p>\u200b   QV\uff0cF7\u200b\u641c\u7d22\u200bAPI\u200b\u540d\u5b57\u200b\uff0c\u200b\u7136\u540e\u200b\u641c\u7d22\u200b\u8c01\u200b\u5728\u200b\u5f15\u7528\u200b\uff08\u200b\u5c06\u200b\u540d\u5b57\u200b\u7684\u200b\u5730\u5740\u200b-0x2\uff0c\u200b\u5e76\u200b\u8f6c\u5316\u200b\u4e3a\u200bRVA\uff01\uff0c\u200b\u8f93\u5165\u200b\u8868\u7528\u200b\u7684\u200bRVA\uff09\uff0c\u200b\u6ce8\u610f\u200b\u641c\u7d22\u200b\u8981\u7528\u200b\u5c0f\u7aef\u200b\u683c\u5f0f\u200b\uff08RVA=57D0F =&gt; 0F 7D 05 00\uff09,\u200b\u4f1a\u200b\u641c\u5230\u200b\u4e24\u6b21\u200b\uff0c\u200b\u5728\u200bOD\u200b\u4e2d\u200b\u6392\u9664\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\uff08\u200b\u8f6c\u5316\u200b\u4e3a\u200bRVA\uff09</p> <p>\u200b\u65b0\u589e\u200b\u4e00\u4e2a\u200b\u8282\u200b\u3002\u200b\u8282\u200b\u63cf\u8ff0\u200b\u5199\u200b\u5728\u200b\u5176\u4ed6\u200b\u8282\u200b\u540e\u9762\u200b\u3002\u200b\u67e5\u770b\u200b\u5df2\u6709\u200b\u8282\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8282\u200b\u7684\u200b\u957f\u5ea6\u200b\u548c\u200b\u504f\u79fb\u200b\u3002</p> <p><code>page name (8byte) Msize RVA physize phyOffset</code></p> <p><code>.patch 00001000 00063000 00001000 00058E00</code></p> <p>\u200b\u7528\u200b010editor\u200b\u5f00\u8f9f\u200b\u65b0\u200b\u7a7a\u95f4\u200b\uff0cEdit-&gt;Insert-&gt;Bytes</p> <p>PE+06 \u200b\u66f4\u6539\u200b\u8282\u200b\u6570\u76ee\u200b</p> <p>PE+28 \u200b\u66f4\u6539\u200bEIP\u200b\u4e3a\u200b\u8865\u4e01\u200b\u4ee3\u7801\u200b</p> <pre><code>0x58e00: jmp 0x58e20 ;\u200b\u7559\u200b\u4e00\u90e8\u5206\u200b\u5b58\u200b\u6570\u636e\u200b \u200b\u8fd9\u91cc\u200b\u7684\u200b\u5730\u5740\u200b\u662f\u200b\u6587\u4ef6\u200b\u5185\u200b\u5730\u5740\u200b\n0x58e05: \"DllSample.dll\" ;string\n        \"add\"\n0x58e20: push 0x463005 ; 0x58e05 -&gt; RVA + 40_0000\n        call [456300] ; call LoadLibrary, param: name\n        push 0x463015 ; API name\n        push eax      ; Handle\n        call [4562A0]; call GetProcAddress, param: API name, handle, eax &lt;= &amp;add\n        push 2\n        push 1\n        call eax      ; add(1, 2)\n        add al, 30\n        mov [463002], al ;store as string\n        push 0\n        push 463002\n        push 463002\n        push 0\n        call [4569f0] ; call MessageBox\n        push retaddr\n        ret\n</code></pre> <p>\u200b\u671f\u672b\u8003\u8bd5\u200b</p> <p>40min\uff1a25\u200b\u5355\u9009\u200b\uff0c50\u200b\u5206\u200b\uff08\u200b\u8c03\u8bd5\u5668\u200b\u7528\u6cd5\u200b\uff0cOD\uff08\uff1b\u200b\u6ce8\u91ca\u200b\uff0c\uff1a\u200b\u53d6\u200b\u6807\u53f7\u200b\uff09\uff0cTD\uff0cSoftice\uff0cIDA\uff08\u200b\u641c\u7d22\u200b\uff0c\u200b\u4ea4\u53c9\u200b\u7d22\u5f15\u200b\uff0c\u200b\u5bf9\u200b\u6570\u636e\u200b\u6539\u6210\u200bcode\u200b\u89e3\u6790\u200b\uff0c\u200b\u53d8\u91cf\u200b\u51fd\u6570\u200b\u91cd\u547d\u540d\u200b\uff0c\u200b\u52a0\u200b\u6ce8\u91ca\u200b\uff0cF5\u200b\u8f6c\u5316\u200bC\u200b\u8bed\u8a00\u200b\uff09\uff0c\u200b\u8c03\u8bd5\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u6c47\u7f16\u8bed\u8a00\u200b\u77e5\u8bc6\u200b\uff09</p> <p>90min\uff1a\u200b\u5b9e\u9a8c\u200b\uff1a</p> <ul> <li>\u200b\u8131\u58f3\u200b\uff08DOS(30min)\uff0cWINDOWS(7min)\uff09</li> </ul> <ul> <li> <p>\u200b\u9006\u5411\u200b\u5206\u6790\u200b\u7b97\u6cd5\u200b\u5199\u200b\u6ce8\u518c\u673a\u200b\uff0816\u200b\u4f4d\u200b\u548c\u200b32\u200b\u4f4d\u200b\uff0c\u200b\u6ce8\u610f\u200b\u53ef\u80fd\u200b\u6709\u58f3\u200b\u4ee3\u7801\u200b\uff09</p> <p>ds:si es:di</p> <p>dosbox File-&gt;new enter instruction, Ctrl+F1 can see descriptions</p> </li> </ul> <ul> <li>\u200b\u6587\u4ef6\u200b\u5934\u200b\u5206\u6790\u200b\uff08\u200b\u4f1a\u200b\u53d8\u6362\u200b\u4e00\u4e9b\u200b\uff0c\u200b\u6bd4\u5982\u200b\u67d0\u4e2a\u200bAPI\u200b\u7684\u200b\u5730\u5740\u200b\u5b58\u5728\u200b\u54ea\u91cc\u200b\uff08API\u200b\u5730\u5740\u200b\u8868\u200b\uff09\uff09</li> </ul>"},{"location":"ReverseEngineering/hw5.html","title":"Hw5","text":"<p> \u200b\u7ea6\u200b 24 \u200b\u4e2a\u200b\u5b57\u200b  80 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>1</p> <p></p> <p></p> <p></p> <p>shell   code :412014 ebp= 412013</p> <p>shell code end :412425h</p> <p>OllyDBG dump</p> <p>import table 13008 file 7208h</p> <p>41249E&lt; = kernel32 handle</p> <p>ebp+0x51=412064=Procname &lt;=Procaddr</p> <p>Replace the first 4  bytes of Procname with it's address,start from 412064</p> <p>2</p> <p>shell_code exit <code>067C:01E9</code></p> <p>code <code>0683:0096</code></p> <p>SI=0013</p> <p>DI=0024</p> <p>username:<code>067C:0013(DS:SI)</code> </p> <p>password:<code>067C:0024(ES+DI)</code></p> <p>=&gt; call cs:005F (check code)</p> <p>cs:005F</p> <pre><code>0683:005F 53              PUSH    BX\n0683:0060 56              PUSH    SI\n0683:0061 57              PUSH    DI\n0683:0062 33C0            XOR     AX,AX\n0683:0064 33C9            XOR     CX,CX\n0683:0066 33D2            XOR     DX,DX\n\n0683:0068 AC              LODSB\n0683:0069 0AC0            OR      AL,AL\n0683:006B 0F840700        JE      0076\n0683:006F 32C1            XOR     AL,CL\n0683:0071 03D0            ADD     DX,AX\n0683:0073 41              INC     CX\n0683:0074 EBF2            JMP     0068\n/*\n    uchar username[];\n    short dx;\n    for(int i=0; i&lt;len; i++){\n         dx += username[i] ^ i;\n    }\n*/\n0683:0076 660FB7C2        MOVZX   EAX,DX\n0683:007A BB3500          MOV     BX,0035\n0683:007D E8B0FF          CALL    0030\n0683:0080 8BC8            MOV     CX,AX\n0683:0082 B80000          MOV     AX,0000\n0683:0085 E30B            JCXZ    0092\n0683:0087 8BF3            MOV     SI,BX\n0683:0089 F3A6            REPZ CMPSB\n0683:008B 0F850300        JNE     0092\n0683:008F B80100          MOV     AX,0001\n0683:0092 5F              POP     DI\n0683:0093 5E              POP     SI\n0683:0094 5B              POP     BX\n0683:0095 C3              RET\n0683:0096 B87C06          MOV     AX,067C\n</code></pre> <p>cs:0030</p> <pre><code>0683:0030 6655            PUSH    EBP\n0683:0032 53              PUSH    BX\n0683:0033 B90000          MOV     CX,0000\nLOOP1:\n0683:0036 66BA00000000    MOV     EDX,00000000\n0683:003C 66BD0A000000    MOV     EBP,0000000A\n0683:0042 66F7F5          DIV     EBP\n/*\n    EDX\u200b\u4e3a\u200b\u9ad8\u4f4d\u200b\uff0cEAX\u200b\u4e3a\u200b\u4f4e\u4f4d\u200b\n    EDX:EAX / EBP =&gt; EAX ... EDX\n    0000 0000 XOR_RESULT / 0000 000A\n    EDX = XOR_RESULT % 0000 000A + 30h\n*/\n0683:0045 80C230          ADD     DL,30\n0683:0048 52              PUSH    DX\n0683:0049 41              INC     CX\n0683:004A 6683F800        CMP     EAX,+00\n0683:004E 75E6            JNZ     0036\n/*\n    int cnt = 0;\n    do{\n        int div = xor_result / 0xA;\n        int rem = xor_result % 0xA + 0x30;\n        push(rem)\n        cnt++;\n    }while(div != 0);\n*/\n0683:0050 8BC1            MOV     AX,CX\nLOOP2\n0683:0052 5A              POP     DX\n0683:0053 8817            MOV     [BX],DL // bx = 0035\n0683:0055 43              INC     BX\n0683:0056 E2FA            LOOP    0052\n/*\n    int offset = 0x35, i;\n    for(i=0; i&lt;cnt; i++){\n        (uchar) cs:[offset+i] = pop();\n    }\n    cs:[offset+i] = 00;\n*/\n0683:0058 C60700          MOV     BYTE PTR [BX],00\n0683:005B 5B              POP     BX\n0683:005C 665D            POP     EBP\n0683:005E C3              RET\n</code></pre>"},{"location":"ReverseEngineering/reviewScript.html","title":"reviewScript","text":"<p> \u200b\u7ea6\u200b 0 \u200b\u4e2a\u200b\u5b57\u200b  14 \u200b\u884c\u200b\u4ee3\u7801\u200b </p> <pre><code>uchar dx = 0;\nfor(int i=0; i&lt;userlen; i++){\n    dx += user[i] ^ i;\n}\nint eax = dx;\nuchar bx = 35;\n\nwhile(eax &gt; 0){\n    dl = eax % 0xA + 30;\n    eax = eax / 0xA;\n    push dl\n}\nwhile(len) pop dl -&gt; 35\n</code></pre>"},{"location":"ReverseEngineering/soft-ice%20%E8%84%B1%E5%A3%B3.html","title":"\u8131\u58f3","text":"<p> \u200b\u7ea6\u200b 186 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>soft-ice \u200b\u8131\u58f3\u200b 684:19b \u200b\u8f6f\u4ef6\u200b\u65ad\u70b9\u200b\uff0c\u200b\u4f7f\u200b\u89e3\u5bc6\u200b\u5b8c\u6210\u200b \u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u4f7f\u200b\u5176\u200b\u8fdb\u884c\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\uff0c\u200b\u5426\u5219\u200b\u5f15\u7528\u200b\u5c31\u200b\u4f1a\u200b\u6539\u53d8\u200b\uff0c\u200b\u91cd\u5b9a\u5411\u200b\u5de5\u4f5c\u200b\u662f\u200b\u5728\u200b\u8f7d\u5165\u200b\u5185\u5b58\u200b\u540e\u200b\u8fdb\u884c\u200b\u7684\u200b \u200b\u9700\u8981\u200bdump\u200b\u7684\u200b\u5185\u5bb9\u200b\uff1apsp+10h \u200b\u7ec8\u70b9\u200bshellcode d ss:sp\u200b\u67e5\u770b\u200b\u5806\u6808\u200b\u4e2d\u200b\u7684\u200bds es\uff0c\u200b\u5373\u200b\u4e3a\u200bpsp\uff0c\u200b\u52a0\u4e0a\u200b10h\u200b\u5373\u200b\u4e3a\u9996\u200b\u6bb5\u6bb5\u200b\u5730\u5740\u200b(684:0)</p> <p>\u200b\u8fdb\u5165\u200bbochs\u200b\u5185\u7f6e\u200b\u8c03\u8bd5\u5668\u200b\uff0c\u200b\u53d6\u5f97\u200b\u63a7\u5236\u6743\u200b\u3002writemem \"d:\\h2.dat\" 0x6840 0x150\uff0c\u200b\u6293\u4e0b\u6765\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e0d\u200b\u5305\u542b\u200b\u6587\u4ef6\u200b\u5934\u200b\u3002\u200b\u53ea\u6709\u200bcode+data+stack\uff0cstack\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u4e0d\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u7f6e\u200b\u4e3a\u200b00</p> <p>\u200b\u6293\u53d6\u200beve\u200b\u6587\u4ef6\u200b\u5934\u200b\u3002 writemem \",,,\"......</p> <p>\u200b\u62fc\u63a5\u200b\u6587\u4ef6\u200b\u5934\u200b\u548c\u200b\u6bb5\u200b\u5185\u5bb9\u200b \u200b\u4ece\u200b\u504f\u79fb\u200b+6\u200b\u9009\u4e2d\u200b20h\u200b\u5b57\u8282\u200b\uff0cshift+F3\uff0c\u200b\u7528\u65b0\u5934\u200b\u8986\u76d6\u200b\u8001\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u5757\u200b</p> <p>\u200b\u4fee\u590d\u200b\u6587\u4ef6\u200b\u957f\u5ea6\u200b\uff0c\u200b\u6587\u4ef6\u200b\u5934\u200b\u4fee\u590d\u200b\u5b8c\u6210\u200b</p> <p>shift+F5\uff0c\u200b\u63d2\u5165\u200b\u4ee3\u7801\u6bb5\u200b\u6570\u636e\u200b\u6bb5\u200b\u548c\u200b\u5806\u6808\u200b\u6bb5\u200b</p>"},{"location":"ReverseEngineering/%E4%B8%AD%E6%96%AD.html","title":"\u4e2d\u65ad","text":"<p> \u200b\u7ea6\u200b 136 \u200b\u4e2a\u200b\u5b57\u200b  18 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ReverseEngineering/%E4%B8%AD%E6%96%AD.html#dos-\u4e2d\u65ad\u5411\u91cf\u8868","title":"DOS \u200b\u4e2d\u65ad\u5411\u91cf\u200b\u8868","text":"<p>0:0~0:3FF \u200b\u5171\u200b400h\u200b\u5b57\u8282\u200b\u7684\u200b\u5185\u5bb9\u200b\u79f0\u4e3a\u200b\u4e2d\u65ad\u5411\u91cf\u200b\u8868\u200b</p> <p>\u200b\u5176\u4e2d\u200b\u6bcf\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u79f0\u4e3a\u200b\u4e00\u4e2a\u200b\u4e2d\u65ad\u5411\u91cf\u200b\uff0c\u200b\u4f8b\u5982\u200b:</p> <p>0:0~0:3\u200b\u7528\u6765\u200b\u4fdd\u5b58\u200bint 00h\u200b\u7684\u200b\u4e2d\u65ad\u5411\u91cf\u200b;</p> <p>0:4~0:7\u200b\u7528\u6765\u200b\u4fdd\u5b58\u200bint 01h\u200b\u7684\u200b\u4e2d\u65ad\u5411\u91cf\u200b; \u200b\u5148\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\uff0c\u200b\u540e\u200b\u6bb5\u200b\u5730\u5740\u200b</p> <p>\u200b\u4f8b\u200b\uff1a12 34 56 78 -&gt; 7856: 3412</p>"},{"location":"ReverseEngineering/%E4%B8%AD%E6%96%AD.html#windows-\u4e2d\u65ad","title":"WINDOWS \u200b\u4e2d\u65ad","text":"<p>Windows\u200b\u4e0b\u200b\u7684\u200b\u5355\u6b65\u200b\u53ef\u4ee5\u200b\u7528\u200bSEH(Self Exception Handler)\u200b\u5b9e\u73b0\u200b\u3002 seh\u200b\u7ed3\u6784\u200b\u6709\u200b\u4e24\u4e2a\u200b\u6210\u5458\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5f53\u524d\u200bseh\u200b\u51fd\u6570\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u4e0a\u200b\u4e00\u5c42\u200bshe\u200b\u7ed3\u6784\u200b\u7684\u200b\u6307\u9488\u200b</p> <pre><code>struct SEH{\n    SEH *parentSEH;\n    void *handler;\n}\n</code></pre> <p></p> <p>\u200b\u6784\u9020\u200bseh\uff0c\u200b\u5e76\u200b\u4e0e\u200bcaller\u200b\u7684\u200bseh\u200b\u8854\u63a5\u200b</p> <pre><code>push myseh             ;myhandler addr\npush dword ptr fs:[0]   ;parentSEH addr\n// The two dword above compose an SEH struct\n\nmov fs:[0], esp         ;newSEH struct addr\n\n// Trigger int1 interrupt\npushfd\npushfd ; push EFL\npop eax ; eax = EFL\nor eax, 100h ; \u200b\u7b2c\u200b8\u200b\u4f4d\u200b\u6807\u5fd7\u200b=1\npush eax\npopfd ; TF=1\nnop\n</code></pre>"},{"location":"ReverseEngineering/%E6%B3%A2%E6%96%AF%E7%8E%8B%E5%AD%90%E8%84%B1%E5%A3%B3.html","title":"\u6ce2\u65af\u738b\u5b50\u200b\u8131\u58f3","text":"<p> \u200b\u7ea6\u200b 775 \u200b\u4e2a\u200b\u5b57\u200b  16 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 3 \u200b\u5206\u949f\u200b</p> <p>if relocation table num = 00:00, must be compressed qv F5\u200b\u53ef\u4ee5\u200b\u8df3\u8f6c\u200b\u5230\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b \u200b\u770b\u5230\u200bretf</p> <p>qv F7\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b</p> <p>\u200b\u6309\u200bCtrl+k\u200b\u62a2\u593a\u200b\u952e\u76d8\u200b\u63a7\u5236\u6743\u200b</p> <p>es ds \u200b\u521d\u59cb\u503c\u200b\u4e3a\u200bPSP\u200b\u6bb5\u200b\u5730\u5740\u200b es+10h\u200b\u5f97\u5230\u200b\u9996\u6bb5\u200b\u6bb5\u200b\u5730\u5740\u200b</p> <p>add ax, [000c] \uff081e13\uff09\u200b\u4e3a\u200b\u8001\u200b\u7684\u200bexe\u200b\u7684\u200b\u957f\u5ea6\u200b/10h \u200b\u590d\u5236\u200bshellcode\u200b\u5230\u200b24A1\uff1a0\u200b\u540e\u9762\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u7559\u51fa\u200b\u89e3\u538b\u7f29\u200b\u7684\u200b\u7a7a\u95f4\u200b std \u200b\u65b9\u5411\u200b\u53cd\u5411\u200b</p> <p>repz src: 23D1:D96 dst: 24A1:D96 \uff08cs:0 - cs:D96\uff09 to (24A1:0 - 24A1:D96)</p> <p>retf\u200b\u8df3\u8f6c\u200b\u5230\u200b24A1\uff1a38\uff0c\u200b\u5728\u200b\u65b0\u6bb5\u200b\u4e2d\u200b\u8fd0\u884c\u200b</p> <p>\u200b\u76ee\u6807\u200b\u6bb5\u200b\u5730\u5740\u200b24A1 = \u200b\u9996\u6bb5\u200b + 1E13h = 68E + 1E13 = 24A1</p> <p>shell code cs - \u200b\u9996\u6bb5\u200b\u6bb5\u5740\u200b = 23B1 - 68E = 1D23</p> <p>\u200b\u89e3\u538b\u7f29\u200b\u51fa\u53e3\u200b24A1\uff1a009C \u200b\u6216\u200b [101]\uff08\u200b\u9519\u8bef\u5904\u7406\u200b\u5206\u652f\u200b\uff09</p> <p>9C\u200b\u5f00\u59cb\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\uff0ces\u200b\u4e3a\u200b\u771f\u5b9e\u200b\u6bb5\u200b\u5730\u5740\u200b\uff0cdi\u200b\u4e3a\u200b\u771f\u5b9e\u200b\u504f\u79fb\u200b\u5730\u5740\u200b</p> <p>\u200b\u4fee\u6539\u200bshellcode\u200b\u8ba9\u200b\u5b83\u200b\u81ea\u5df1\u200b\u751f\u6210\u200b\u6807\u51c6\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\uff0c\u200b\u8003\u8651\u200b\u653e\u5728\u200bss:0\u200b\u90a3\u91cc\u200b\uff0c\u200b\u5982\u679c\u200b\u8fdc\u200b\u8df3\u200b\u9700\u8981\u200b5\u200b\u5b57\u8282\u200b\uff0c\u200b\u7a7a\u95f4\u200b\u4e0d\u591f\u200b\uff0c\u200b\u8981\u200b\u628a\u200b257b\uff1a0\u200b\u8f6c\u5316\u6210\u200b24A1\uff1aDA0\uff0c\uff08\u200b\u4e0e\u200b\u5f53\u524d\u200bcs\u200b\u5728\u200b\u540c\u200b\u4e00\u6bb5\u200b\u5185\u200b\uff09 a cs:db, call da0 u cs:da0\u200b\u89c2\u5bdf\u200b\u67d0\u200b\u5730\u5740\u200b\u7684\u200b\u4ee3\u7801\u200b</p> <p>\u200b\u9700\u8981\u200b\u4fdd\u5b58\u200b\u8ba1\u6570\u5668\u200b\u548c\u200bbuff\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200bcs:da0\u200b\u524d\u9762\u200b\u7684\u200b\u7a7a\u95f4\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u56e0\u4e3a\u200bshellcode\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e0d\u5230\u200bda0\uff08\u200b\u524d\u9762\u200b\u80fd\u200b\u770b\u5230\u200b\u65f6\u200bD97\uff09\uff0c\u200b\u539f\u56e0\u200b\u662f\u200b\u8fd9\u4e2a\u200b\u6bb5\u8981\u200b\u53d6\u6574\u200b\u5230\u200b10h\uff0c\u200b\u6240\u4ee5\u200b\u9020\u6210\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u7a7a\u6d1e\u200b e cs:d97 00 00\uff08\u200b\u8ba1\u6570\u5668\u200b\uff09 00 00 00 80,\u200b\u8ba9\u200bbuffer\u200b\u5728\u200b8000\uff1a0</p> <p>\u200b\u4fee\u6539\u200b24A1:00BD\u200b\u4e3a\u200bcall\u200b\u6307\u4ee4\u200b\uff0ccall\u200b\u81ea\u5df1\u200b\u7684\u200b\u51fd\u6570\u200b</p> <p>u cs:da0 a cs:da0 \u200b\u6ce8\u610f\u200b\u7528\u5230\u200b\u7684\u200b\u5bc4\u5b58\u5668\u200b\u8981\u200b\u505a\u200b\u4fdd\u62a4\u200b <pre><code>push ax\npush bx\npush di\npush es\nmov ax, es ;\u200b\u6b64\u65f6\u200bes\u200b\u4e3a\u200b\u8981\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u771f\u5b9e\u200b\u6bb5\u200b\u5730\u5740\u200b\nsub ax, bx ;delta\u200b\u6bb5\u200b\u5730\u5740\u200b\nles bx, cs:[d99] ;\u200b\u53d6\u51fa\u200b32\u200b\u4f4d\u8fdc\u200b\u6307\u9488\u200b\uff0c\u200b\u9ad8\u4f4d\u200b\u653e\u5728\u200bes\u200b\u91cc\u9762\u200b\u4e86\u200b\nmov es:[bx], di\nmov es:[bx+2], ax\nadd word ptr cs:[d99], 4 ;\u200b\u66f4\u65b0\u200bbuffer\u200b\u5730\u5740\u200b\ninc word ptr cs:[d97] ;\u200b\u66f4\u65b0\u200b\u8ba1\u6570\u5668\u200b\npop es\npop di\npop bx\npop ax\nret\n</code></pre> dump \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b[8000:0 - 8000:1894) <code>writemem \"xxx\" 0x80000 0x1894</code> dump exe \u200b\u9996\u6bb5\u200b\u5730\u5740\u200b68E\uff0cshellcode\u200b\u6bb5\u200b\u5730\u5740\u200b\u4e3a\u200b\u7ec8\u70b9\u200b\u5373\u53ef\u200b\uff0824A1\uff09 (24A1 - 68e)*0x10h bpr\uff08bprange\uff09 addr1 addr2 w\u200b\u68c0\u6d4b\u200b\u67d0\u200b\u5757\u5185\u5b58\u200b\u6709\u6ca1\u6709\u200b\u88ab\u200b\u5199\u5165\u200b <code>writemem \"xxx\" 0x68E0 0x1E130</code> \u200b\u7ee7\u7eed\u200b\u8ddf\u8e2a\u200b\uff0c\u200b\u83b7\u5f97\u200b\u8001\u200bexe\u200b\u7684\u200bcs:ip ss:sp \u200b\u51e1\u662f\u200b\u52a0\u4e0a\u200bax\uff08\u200b\u9996\u6bb5\u200b\u5730\u5740\u200b\u7684\u200b\uff09\u200b\u5c31\u662f\u200b\u6bb5\u200b\u5730\u5740\u200b\uff0c\u200b\u53e6\u5916\u200b\u7684\u200b\u5c31\u662f\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\u4e86\u200b exit rd\u200b\u7ed3\u675f\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u5e76\u200b\u6062\u590d\u200b\u4e2d\u65ad\u5411\u91cf\u200b</p> <p>\u200b\u9009\u62e9\u200b\u8001\u200bexe\u200b\u524d\u200b1eh\u200b\u5b57\u8282\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4e0b\u6765\u200b\u4f5c\u4e3a\u200b\u6587\u4ef6\u200b\u5934\u200b\uff081eh\u200b\u540e\u9762\u200b\u5c31\u662f\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u4e86\u200b\uff09 shift F5\u200b\u63d2\u5165\u200b\u65b0\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\uff0coffset 0 length 1894h \u200b\u586b\u5165\u200b0E\u200b\u4e2a\u200b00\uff0c\u200b\u4f7f\u200b\u5176\u200b\u4e3a\u200b10h\u200b\u6574\u6570\u500d\u200b alt F9\u200b\u4fdd\u5b58\u200b \u200b\u4fee\u6b63\u200b\u6587\u4ef6\u200b\u5934\u200b\u957f\u5ea6\u200b\u4fe1\u606f\u200b</p> <p>\u200b\u7528\u200b010editor\u200b\u63a5\u7740\u200b\u63d2\u5165\u200bexe\u200b\u5185\u5bb9\u200b Edit-&gt;insert File \u200b\u4fee\u590d\u200b\u6587\u4ef6\u200b\u957f\u5ea6\u200b\uff08\u200b\u6247\u533a\u200b\u6570\u200b\uff09\uff0c\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u9879\u200b\u4e2a\u6570\u200b625\uff0c(delta_ss=2821, delta_sp=0010), delta cs ip</p> <p>IDA \u200b\u5206\u6790\u200b     sprintf\u200b\u6bb5\u200b\u5730\u5740\u200bseg010\uff0c\u200b\u8981\u200b\u8ba1\u7b97\u200b\u548c\u200bseg000\u200b\u7684\u200b\u8ddd\u79bb\u200b\u3002     <code>View-&gt;Open subviews-&gt;Segments</code> \u200b\u5217\u51fa\u200b\u6240\u6709\u200b\u6bb5\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5173\u6ce8\u200bbase\u200b\u4fe1\u606f\u200b.     \u200b\u53d1\u73b0\u200b\u662f\u200b<code>26AC-1000 = 16AC</code> <code>sprintf = \u200b\u9996\u6bb5\u200b\u5730\u5740\u200b+16AC:0B26</code>     \u200b\u65ad\u4f4f\u200bsprintf\u200b\u540e\u200b\uff0cd ss:sp \u200b\u67e5\u770b\u200b\u5806\u6808\u200b\u5185\u5bb9\u200b      <code>xx xx xx xx\uff08\u200b\u8fd4\u56de\u200b\u5730\u5740\u200b\uff09</code>xx xx \uff08buffer\u200b\u5730\u5740\u200b\uff09 xx xx \uff08\u200b\u683c\u5f0f\u200b\u4e32\u200b\u5730\u5740\u200b\uff09<code></code>xx page xx line xx word`</p> <p>bl\u200b\u67e5\u770b\u200b\u6240\u6709\u200b\u65ad\u70b9\u200b</p> <p>\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u88ab\u200b\u4fee\u6539\u200b\uff1a \u0394\u200b\u6bb5\u200b\u5730\u5740\u200b=\u200b\u7b49\u4e8e\u200b0 - 1000h(10000) - 2000h(20000)\u200b\u624b\u52a8\u200b\u589e\u52a0\u200b</p> <p>\u200b\u7b2c\u4e00\u8f6e\u200b\u5faa\u73af\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u7684\u200b\u6bb5\u200b\u5730\u5740\u200b\u4e00\u76f4\u200b\u662f\u200b68E\uff08\u200b\u9996\u6bb5\u200b\u5730\u5740\u200b\uff09</p> <p>a cs:bd nop nop nop\u200b\u4fee\u6539\u200b\u6307\u4ee4\u200b\uff0c\u200b\u53d1\u73b0\u200b4E7\u200b\u662f\u200b\u91cd\u5b9a\u5411\u200b\u4e2a\u6570\u200b\uff0c\u200b\u6bb5\u200b\u5730\u5740\u200b\u4e3a\u200b0</p> <p>\u200b\u7b2c\u4e00\u5f20\u200b\u8868\u200b24A1:12D - 24A1:AFC \u200b\u7b2c\u4e8c\u5f20\u200b\u8868\u200b24A1:AFD - 24A1:D7A \u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b\u8303\u56f4\u200b [24A1:12D ~ D7B) \u200b\u957f\u5ea6\u200b: D7B-12D = C4E</p> <p>es = 1000h di = ffffh <code>add word ptr es:[di], bx</code> \u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u53d6\u200b1000:ffff\u200b\u548c\u200b1000:0000 \u200b\u7684\u200bbyte\uff0c\u200b\u4f1a\u200b\u6b7b\u673a\u200b</p> <p>dump\u200b\u5185\u5b58\u200b \u200b\u8303\u56f4\u200b\uff1a[68E:0 - 24A1:0)\uff08shell code \u200b\u8d77\u59cb\u200b\u5730\u5740\u200b-1\uff09 <code>writemem \"xxx\" 0x68e0 1E130h</code></p> <p>dump\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u8868\u200b</p> <p>\u200b\u627e\u200b\u6700\u7ec8\u200bss:sp \u200b\u548c\u200b cs:ip\u200b\u7684\u200b\u8d4b\u503c\u200b sp=1000h delta_ss=2128h ip=02BCh delta_cs=16ACh</p>"},{"location":"ReverseEngineering/%E8%B0%83%E7%94%A8MFC%E7%9A%84exe.html","title":"\u8c03\u7528\u200bMFC\u200b\u7684\u200bexe","text":"<p> \u200b\u7ea6\u200b 302 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ReverseEngineering/%E8%B0%83%E7%94%A8MFC%E7%9A%84exe.html#\u8c03\u7528mfc\u7684exe","title":"\u8c03\u7528\u200bMFC\u200b\u7684\u200bexe","text":"<p>API\u200b\u53ea\u6709\u200b\u5e8f\u53f7\u200b\uff0c\u200b\u6ca1\u6709\u200b\u540d\u5b57\u200b</p> <p>import table </p> <p>\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u200b\uff1a\u200b\u5730\u5740\u200b\u5de8\u5927\u200b\uff08\u200b\u5927\u4e8e\u200b80000000\uff0c\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u7b49\u4e8e\u200b1\uff0c\u200b\u56e0\u4e3a\u200b8 = b'100\uff09\uff0c\u200b\u8bf4\u660e\u200b\u4e0d\u662f\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u3002\u200b\u53bb\u6389\u200b\u6700\u9ad8\u200b\u4f4d\u5373\u200b\u4e3a\u200bAPI\u200b\u5e8f\u53f7\u200b</p> <p>QV F8+F5 \u200b\u8df3\u200b\u5230\u200b\u7b2c\u4e00\u6761\u200b\u6307\u4ee4\u200b\u5904\u200b</p> <p>PeCompact \u200b\u8131\u58f3\u200b</p> <p><code>pushfd</code> \u200b\u538b\u5165\u200b32\u200b\u4f4d\u200bflag\u200b\u5bc4\u5b58\u5668\u200b\uff08<code>EFL</code>\uff09</p> <p><code>pushad</code> \u200b\u9664\u200bflag\u200b\u548c\u200b\u6bb5\u200b\u5730\u5740\u200b\u7684\u200b\u5bc4\u5b58\u5668\u200b\u90fd\u200b\u538b\u5165\u200b\u5806\u6808\u200b\uff08<code>eax, ecx, edx, ebx, esp\uff08\u200b\u8fd9\u200b\u6761\u200bpush\u200b\u4e4b\u524d\u200b\u7684\u200besp\uff09, ebp, esi, edi</code>\u200b\u6309\u200b\u987a\u5e8f\u200b\u538b\u5165\u200b\uff0c\u200b\u5171\u200b<code>20h</code>\u200b\u5b57\u8282\u200b\uff09</p> <p>\u200b\u4e00\u5b9a\u200b\u5b58\u5728\u200b<code>popad, popfd</code>\uff0c\u200b\u53ef\u200b\u5728\u200bpush\u200b\u5b8c\u540e\u200b\u5728\u200b\u5806\u6808\u200b\u9876\u7aef\u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\u8bbf\u95ee\u200b\u65ad\u70b9\u200b(Dword, 4byte)\u3002</p> <p>\u200b\u53f3\u952e\u200b-&gt;\u200b\u5206\u6790\u200b-&gt;\u200b\u5206\u6790\u200b\u4ee3\u7801\u200b \uff0c\u200b\u6062\u590d\u200b\u89e3\u5bc6\u200b\u7684\u200b\u4ee3\u7801\u200b</p> <p>\u200b\u63d2\u4ef6\u200b-&gt;OllyDump-&gt;Dump debugged process</p> <p>\u200b\u624b\u5de5\u200b\u8131\u58f3\u200b</p> <p>\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u8c03\u7528\u200b<code>LoadLibraryA</code> (\u200b\u8f7d\u5165\u200bdll\uff0c\u200b\u5e76\u200b\u83b7\u53d6\u200b\u57fa\u200b\u5730\u5740\u200b)\u200b\u6216\u200b <code>GetModuleHandleA</code>\uff08\u200b\u83b7\u53d6\u200bdll\u200b\u57fa\u200b\u5730\u5740\u200b\uff0c\u200b\u9700\u8981\u200b\u66fe\u7ecf\u200b\u8f7d\u5165\u200b\u8fc7\u200b\uff09\uff0c\u200b\u548c\u200bGetProcedureAddress\uff08\u200b\u83b7\u5f97\u200bAPI\u200b\u5730\u5740\u200b\uff09</p> <p>Ctrl+g GetModuleHandleA\uff0c\u200b\u8bbe\u7f6e\u200b\u65ad\u70b9\u200b\u3002</p> <p>\u200b\u65ad\u4f4f\u200b\u540e\u200b\u53d6\u6d88\u200b\u65ad\u70b9\u200b\u3002\u200b\u5728\u200b\u5806\u6808\u200b\u4e2d\u770b\u200b\u8fd4\u56de\u200b\u5730\u5740\u200b\uff08\u200b\u6808\u9876\u200b\uff09\uff0c\u200b\u9009\u4e2d\u200b\u6572\u200b\u56de\u8f66\u200b\u5c31\u200b\u53ef\u200b\u8fc7\u53bb\u200b\u3002</p> <p><code>or eax eax</code>\u200b\u5224\u65ad\u200b\u8fd4\u56de\u200b\u7684\u200b\u57fa\u200b\u5730\u5740\u200b\u662f\u5426\u200b\u7b49\u4e8e\u200b0\uff0c\u200b\u5426\u5219\u200b\u4fdd\u5b58\u200b\u3002</p> <p><code>ecx</code>\u200b\u6307\u5411\u200b\u5176\u4e2d\u200b\u4e00\u9879\u200b\u8868\u200b\uff0c<code>[ecx]</code>\u200b\u540d\u5b57\u200b\u6307\u9488\u200b\u8868\u200b\u3002\u200b\u7136\u540e\u200b\u52a0\u4e0a\u200b\u57fa\u200b\u5730\u5740\u200b\uff0c\u200b\u5f97\u5230\u200b\u7edd\u5bf9\u200b\u5730\u5740\u200b\u3002<code>add ebx edx</code>\uff0c\u200b\u52a0\u200b2\u200b\u8df3\u8fc7\u200b\u524d\u200b\u4e24\u4e2a\u200b\u6ca1\u7528\u200b\u7684\u200b\u6570\u5b57\u200b\u3002</p>"},{"location":"ads/2018-2019.html","title":"2018 2019","text":"<p> \u200b\u7ea6\u200b 132 \u200b\u4e2a\u200b\u5b57\u200b </p> <p>\u200b\u4ed4\u7ec6\u9605\u8bfb\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u4e0d\u8981\u200b\u7740\u6025\u200b</p> <p>\\(78 \\rightarrow 85\\)</p> <p>\u200b\u590d\u4e60\u200b\u5168\u9762\u200b 73\u200b\u5c31\u200b\u80fd\u200b4.5 80\u200b\u5c31\u200b\u80fd\u200b4.8</p> <p>\\(78 \\rightarrow 96\\) !!!!</p> <ol> <li> <p>\u200b\u6ce8\u610f\u200b\u662f\u200b\\(L_1 \\in NP\\) \u200b\u8fd8\u662f\u200b \\(L_1 = NP\\)</p> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p>Tow types of thresholding</p> <ul> <li> <p>Document</p> <p>Only retrieve top 10 documents according to their rank.</p> </li> </ul> <ul> <li> <p>Query term</p> <p>Sort query term in ascending by their frequency. Only search for some of them.</p> </li> </ul> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p></p> </li> <li> <p>Potential function for Fibonacci heap is \\(T(H) + 2m(H)\\)</p> <p>RB-Tree?</p> <p></p> </li> <li> <p>Polynomial-time reducible if exist a polynomial time function \\(f\\) such that \\(w \\in L_1 \\mathbf{\\huge iff} f(w) \\in L_2\\) </p> <p></p> </li> <li> <p>Detects means the emails decided spam-mail by the algorithm</p> <p>A: 1800/2000 = 90%</p> <p>B: 1500/1660 = 90.3%</p> <p>B is better</p> <p></p> </li> <li> <p>interior node leaf node, \u200b\u4ed4\u7ec6\u200b\u8bfb\u9898\u200b\uff01\uff01\uff01</p> <p></p> </li> </ol>"},{"location":"ads/2019-2020.html","title":"2019 2020","text":"<p> \u200b\u7ea6\u200b 138 \u200b\u4e2a\u200b\u5b57\u200b </p> <p>\u200b\u4ed4\u7ec6\u200b\u8bfb\u9898\u200b\uff0c\u200b\u5728\u200b\u7eb8\u200b\u4e0a\u200b\u591a\u753b\u200b\u4e00\u753b\u200b\uff0c\u200b\u9a8c\u7b97\u200b\u4e00\u4e0b\u200b</p> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u7684\u200b\u9009\u9879\u200b\uff0c\u200b\u548c\u200b\u4e00\u4e2a\u200b\u8bfe\u4e0a\u200b\u8bb2\u200b\u8fc7\u200b\u7684\u200b\u786e\u5b9a\u200b\u7684\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u9009\u200b\u6700\u200b\u786e\u5b9a\u200b\u7684\u200b</p> <p>\\(73 \\rightarrow 94\\)</p> <ol> <li> <p>?</p> <p></p> </li> <li> <p>not FPTAS: \\(O(n^{2/\\epsilon})\\) ?</p> <p></p> </li> <li> <p>Random sampling has \\(W(n) = O(n)\\)</p> <p></p> </li> <li> <p>compute with more careful. \\(T(n) = O(n)\\)</p> <p></p> </li> <li> <p>knapsack problem: approximation &gt;= 2 if P != NP. Summarize NP problems!</p> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p>\\(O(NlogN)\\) inserts, each insert cost \\(O(logn) = O(log^2n)\\)</p> <p>So each merge costs \\(O(log^2n)\\)</p> <p></p> </li> <li> <p>\\(P(n) = \\frac{n}{logn}\\)</p> <p></p> </li> <li> <p>1 is not optimal, 2 is optimal</p> <p>\u200b\u770b\u4f5c\u200b\u7ed9\u200b\u4e00\u4e2a\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5206\u6210\u200b\u6700\u5c11\u200b\u7684\u200b\u4e0a\u5347\u200b\u5b50\u200b\u5e8f\u5217\u200b</p> <p>\u200b\u80fd\u200b\u524d\u540e\u200b\u4e0d\u200b\u51b2\u7a81\u200b\u653e\u7f6e\u200b\u7684\u200b\u4e24\u4e2a\u200b\u6d3b\u52a8\u200b\uff0c\u200b\u5f62\u6210\u200b\u504f\u5e8f\u200b</p> <p></p> </li> </ol>"},{"location":"ads/2020-2021.html","title":"2020 2021","text":"<p> \u200b\u7ea6\u200b 182 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>\\(73 \\rightarrow 82\\)</p> <ol> <li> <p>\u200b\u4ec5\u200b\u5bf9\u4e8e\u200b\u9488\u5bf9\u200bamortized\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u662f\u200b\u8fd9\u6837\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u666e\u901a\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u9891\u7e41\u200b\u64cd\u4f5c\u200b\u4e00\u4e2a\u200b\u6700\u574f\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5747\u644a\u200b\u4e0d\u4f1a\u200b\u53d8\u200b\u597d\u200b\u3002\u200b\u4f8b\u5982\u200b\u666e\u901a\u200bBST</p> <p>Expected \\(\\leq\\) amortized \\(\\leq\\) worst</p> <p></p> </li> <li> <p>Full binary tree vs Complete binary tree</p> <p>Full means every internal node is full</p> <p></p> </li> <li> <p>\\(O(logN)\\)</p> <p></p> </li> <li> <p>\u200b\u770b\u8d77\u6765\u200b\u5c31\u662f\u200b\u5751\u200b</p> <p></p> </li> <li> <p>NF must no improvement</p> <p>FF 1.5</p> <p>\u200b\u82e5\u200b\\(a &gt; b \\geq 0.5\\), FF\u200b\u7684\u200b\u89e3\u200b\u5c31\u662f\u200b\u6700\u6709\u89e3\u200b\u3002</p> <p>\u200b\u82e5\u200b\\(b \\leq 1/3\\), \u200b\u90a3\u4e48\u200b\u6700\u591a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7bb1\u5b50\u200b\u5bb9\u91cf\u200b\u5c11\u4e8e\u200b\\(1-b\\), \u200b\u5426\u5219\u200b\u4e4b\u524d\u200b\u653e\u200bb\u200b\u7684\u200b\u65f6\u5019\u200b\u5c31\u200b\u80fd\u200b\u653e\u5230\u200b\u524d\u9762\u200b\u4e0d\u8db3\u200b\\(1-b\\)\u200b\u7684\u200b\u7bb1\u5b50\u200b\u91cc\u200b\uff0c\u200b\u7b97\u200b\u51fa\u200b1.5\u200b\u500d\u200b\u8fd1\u4f3c\u200b</p> <p>\u200b\u82e5\u200b\\(0.5&gt;b &gt; 1/3\\), \\(a + b &gt; 2/3\\) \u200b\u6bcf\u4e2a\u200b\u7bb1\u5b50\u200b\u4e5f\u200b\u90fd\u200b\u81f3\u5c11\u200b\u2154\u200b\u6ee1\u200b\uff0c\uff08\u200b\u4e0d\u5230\u200b\u2154\u200b\u8bf4\u660e\u200b\u91cc\u9762\u200b\u53ea\u653e\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4e1c\u897f\u200b\uff09</p> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p>All NP problems can reduce to NPC problems</p> <p>\\(O(N^2) = O(N^3)\\) </p> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p>?</p> <p></p> </li> </ol>"},{"location":"ads/2021-2022.html","title":"2021 2022","text":"<p> \u200b\u7ea6\u200b 15 \u200b\u4e2a\u200b\u5b57\u200b </p> <ol> <li> <p>Consider sequence of insertion</p> <p></p> </li> <li> <p>?</p> <p></p> </li> <li> <p>Splay first</p> <p></p> </li> <li> <p>\\(\\sum logn = O(nlogn)\\) </p> <p></p> </li> <li> <p>substitution method</p> <p></p> </li> <li> <p>... Big O notation!!!!</p> <p></p> </li> </ol>"},{"location":"ads/2022-2023.html","title":"2022 2023","text":"<p> \u200b\u7ea6\u200b 26 \u200b\u4e2a\u200b\u5b57\u200b </p> <ol> <li> <p>big-O notation!</p> <p></p> </li> <li> <p>\u200b\u7b97\u9519\u200b\u4e86\u200b\u6ca1\u4e8b\u200b\u4e86\u200b</p> <p></p> </li> <li> <p>\\(w^* = (1+\\frac{2\\epsilon}{n})w\\)</p> <p></p> </li> <li> <p>\\(C = M\\) ,\\(C\\) has nothing to do with \\(A, B\\)</p> <p></p> </li> <li> <p>FUCK\uff01\uff01\uff01</p> <p></p> </li> </ol>"},{"location":"ads/HWs.html","title":"HomeWorks","text":"<p> \u200b\u7ea6\u200b 3 \u200b\u4e2a\u200b\u5b57\u200b </p> <p></p> <p></p> <p></p> <p></p> <p>if (T-&gt;NextSibling != NULL)</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"ads/Lec01.html","title":"AVL/Splay Trees and Amortized analysis","text":"<p> \u200b\u7ea6\u200b 350 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec01.html#bst","title":"BST","text":"<p>The height of BST can be as bad as \\(O(N)\\)</p>"},{"location":"ads/Lec01.html#avl-trees","title":"AVL Trees","text":"<ul> <li>Balance factor \\(h_L - h_R \\in \\{-1, 0, 1\\}\\)</li> <li>Trouble finder &amp; Trouble maker (important)</li> <li>Single rotation (LL/RR rotation)</li> <li>Double rotation (LR/RL rotation) (Parent first &amp; Grandparent next !!!)</li> <li>Height (BF) of the trouble finder doesn't change after insert+rotation</li> <li>Maximum height of trees? The minimum nodes of height k is \\(n_k\\), then we have \\(\\mathbf{n_k = n_{k-1} + n_{k-2} + 1} = F_{k+2} - 1\\). The nodes is exponential to the height.</li> <li>Height of empty tree = \\(-1\\)</li> </ul>"},{"location":"ads/Lec01.html#splay-trees","title":"Splay Trees","text":"<ul> <li>Zig-Zag (Double Rotation)</li> <li>Zig-Zig (Single Rotation on GrandParent &amp; Single Rotation on Parent)</li> </ul> Tree LL/RR LR/RL AVL Tree Single Rotation Rotate Parent, Rotate Grandparent Splay Tree Rotate Grandparent, Rotate parent Rotate Parent, Rotate Grandparent"},{"location":"ads/Lec01.html#amortized-analysis","title":"Amortized Analysis","text":"<p>Average-case bound \\(\\leq\\) Amortized bound \\(\\leq\\) Worst case bound</p> <ul> <li>Aggregate analysis</li> </ul> <ul> <li>Accounting method (different operation can have different amortized cost)</li> </ul> <ul> <li> <p>Potential method</p> <p>Potential function \\(\\Phi(D)\\)</p> <p>\\(\\Phi_0(D)\\) must be the minimum</p> <p>\\(\\tilde c_i = c_i + \\Phi(D_i) - \\Phi(D_{i-1})\\)</p> <p>\\(\\tilde c\\) is the amortized cost and \\(c\\) is the real cost of an operation.</p> <p>If \\(c_i\\) is large, it means we pay in advance in this operation, so the potential should decrease to balance the amortized cost (\\(\\Phi(D_i) \\le \\Phi(D_{i-1})\\)). (Potential function design principal)</p> <p>If \\(c_i\\) is large, we needs to borrow money from \\(\\Phi\\), which will be paid later by the low-cost \\(c_i\\)</p> </li> </ul> <ul> <li>For Splay Trees, \\(\\Phi = \\sum_{i \\in T} log(S(i))\\), where \\(S(i)\\) is the rank of node i. (Size of the subtree \\(i\\))</li> </ul> Data Structure Potential function Time complexity Splay Trees \\(\\Phi = \\sum_{i \\in T} log(S(i))\\), where \\(S(i)\\) is the rank of node i. (Size of the subtree \\(i\\)) \\(O(logn)\\) Skew Heaps \\(\\Phi = \\) number of heavy nodes. Heavy: size of \\(t_r \\geq \\frac{1}{2} t_{root}\\) \\(O(logn)\\) Binomial Heap (Insertion) \\(\\Phi = \\) number of heap ordered trees \\(O(1)\\) Fibonacci Heap \\(\\Phi =T(H) + 2m(H)\\) \\(O(1)\\) insertion, \\(O(logn)\\) deletion"},{"location":"ads/Lec02.html","title":"RB-Tree and B+ Tree","text":"<p> \u200b\u7ea6\u200b 143 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ads/Lec02.html#ex","title":"Ex.","text":"<p>Suppose: \\(bh(Tree) &lt; h(Tree) / 2\\). </p> <p>We choose the longest simple path down to leaf. Then the length of the path is \\(h(Tree)\\).</p> <p>The number of red nodes is \\(n(red) = h(Tree) - bh(Tree) \\geq bh(Tree) + 1\\), which is greater than the number of black nodes.</p> <p>Plus the root is black, there are only \\(bh(Tree)\\) number of spaces for red nodes. There must be two continuous red nodes. This violates the rule (No continuous red nodes along a path).</p> <p>Therefore, \\(bh(Tree) \\geq h(Tree) / 2\\)</p> <p>\\(bh(Tree) = bh(child) + 1 \\ge h(child)/2 + 1 = (h(Tree) - 1)/2 + 1 = h(Tree)/2  + 1/2\\)</p>"},{"location":"ads/Lec02.html#some-corollaries","title":"Some Corollaries","text":"<ul> <li>In every simple path, red nodes \\(\\leq\\) black nodes.</li> </ul> <ul> <li>Minimum RB tree: All blacks</li> </ul> <ul> <li>Maximum RB tree:  Red nodes between all black nodes</li> </ul> <ul> <li>\\(H \\leq 2*bh\\) </li> </ul> <ul> <li> <p>A RB tree with \\(N\\) internal nodes has \\(H \\leq 2ln(N+1)\\)</p> <p>\\(2N \\geq 2^{bh} - 1, H/2 \\leq bh \\leq log(2N+1), \\)</p> </li> </ul>"},{"location":"ads/Lec02.html#rb-tree-insertion","title":"RB-Tree Insertion","text":"<p>Always insert a red</p> <p>Check uncle.</p> <p>Same color: push up</p> <p>Else: change(P, GP) Rotate</p>"},{"location":"ads/Lec02.html#rb-tree-deletion","title":"RB-Tree Deletion","text":"<p>If we delete a red node, everything is fine. </p> <p>If we delete a black node, we temporarily add this black property to node \\(x\\) (which occupies the deleted node's position, if null, we can preserve the deleted node of convenience, and delete it after maintain the r-b property), Then node \\(x\\) is double-black.</p> <p>There are two ways to eliminate double-black:</p> <ul> <li>Change the color of a black node to red, on the branch not containing \\(x\\), So \\(bh( Path(\\not x) ) = bh(Path(x)) - 1\\). Double black is eliminated. (Case 2)</li> <li>Change the color of a red node to black, on the branch not containing \\(x\\), and rotate it the branch containing \\(x\\). So \\(bh( Path(x) ) = bh(Path(\\not x)) + 1\\) Double black is eliminated. (Case 4)</li> <li>Case 3 -&gt; Case 4, Case1 -&gt; Case \u2154/4</li> </ul> <p>Cheat sheet:</p> <p>Make sibling black. (Case 1) F&amp;S ex color, rotate     (Why ex? Make new root black. In case new root causes new error)</p> <p>Nephew all black. (Case 2) Make sibling red. Check parent. </p> <p>Near Nephew red. (Case 3) N&amp;S ex color. rotate</p> <p>Far Nephew red. (Case 4) Far nephew black. F&amp;S ex color. rotate</p> AVL RB tree Insertion \\(\\leq2\\) \\(\\leq2\\) Deletion \\(O(logn)\\) \\(\\leq3\\)"},{"location":"ads/Lec02.html#b-tree","title":"B+ Tree","text":"<ul> <li>The root is either a leaf or has between 2 and M children</li> <li>All nonleaf nodes (except the root) have between \\(\\lceil M/2 \\rceil\\) and \\(M\\) children.</li> <li>Leafs has between \\(\\lceil M/2 \\rceil\\) and \\(M\\) data!</li> <li></li> <li>Depth = \\(log_{\\lceil M/2\\rceil}(N)\\)</li> <li>Find = \\(log_{\\lceil M/2\\rceil}(N) * log_2M = logN\\)</li> <li>Insert = \\(log_{\\lceil M/2\\rceil}(N) * M = (M/logM)*logN\\)</li> </ul>"},{"location":"ads/Lec03.html","title":"Inverted Index","text":"<p> \u200b\u7ea6\u200b 65 \u200b\u4e2a\u200b\u5b57\u200b </p> <ul> <li> <p>Posting list</p> <p>Frequency -&gt;  -&gt;  -&gt; ... <ul> <li> <p>Distributed Indexing</p> <ul> <li> <p>Term-partitioned index</p> <p>Distribute according to term. </p> <p>e.g. a-c, d-f, x-z</p> </li> </ul> <ul> <li> <p>Document-partitioned index</p> <p>Distribute according to document.</p> <p>e.g. doc1-1000, doc1001-2000 ...</p> </li> </ul> </li> </ul> <ul> <li> <p>Thresholding</p> <ul> <li> <p>Document</p> <p>Only retrieve top 10 documents according to their rank.</p> </li> </ul> <ul> <li> <p>Query term</p> <p>Sort query term in ascending by their frequency. Only search for some of them.</p> </li> </ul> </li> </ul> <ul> <li> <p>Relevance Measurement</p> <ul> <li>Precision</li> <li>Recall</li> </ul> </li> </ul> <p>95-100 5.0</p> <p>92-94 4.8</p> <p>89-91 4.5</p> <p>86-90 4.2</p>"},{"location":"ads/Lec04.html","title":"Leftist Heap &amp; Skew Heap","text":"<p> \u200b\u7ea6\u200b 177 \u200b\u4e2a\u200b\u5b57\u200b  20 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec04.html#idea-faster-merge","title":"Idea: faster merge","text":""},{"location":"ads/Lec04.html#leftist-heap","title":"Leftist Heap","text":"<p>\\(O(logN)\\)</p> <ul> <li> <p>Keep the length right path low.(logN)</p> <p>Balanced tree can do this, but too more constraint.</p> <p>A more relaxed constraint: \\(NPL\\) (NULL path length)</p> <p>Shortest path to a node without 2 child.</p> <p>\\(NPL(single node) = 0\\)</p> <p>\\(NPL(NULL) = -1\\)</p> <p>\\(NPL(x) = min_{c \\in child(x)}\\{NPL(c) + 1\\}\\)</p> </li> </ul> <ul> <li> <p>Maintain NPL</p> <p>Swap childs.</p> </li> </ul> <ul> <li> <p>Merge Operation</p> <p>Heap A, B</p> <ol> <li> <p>Sort right path of A B, let it to be the new right path.</p> <p></p> </li> <li> <p>Attach remained left sub tree.</p> </li> <li>Maintain NPL.</li> </ol> </li> </ul> <ul> <li> <p>Time complexity</p> <p>\\(O(logN)\\)</p> </li> </ul> <ul> <li> <p>Codes</p> <p>Don't forget to maintain NPL.</p> <pre><code>PriorityQueue  Merge ( PriorityQueue H1, PriorityQueue H2 )\n{ \n  if ( H1 == NULL )   return H2;  \n  if ( H2 == NULL )   return H1;  \n  if ( H1-&gt;Element &lt; H2-&gt;Element )  return Merge1( H1, H2 );\n  else return Merge1( H2, H1 );\n}\nstatic PriorityQueue\nMerge1( PriorityQueue H1, PriorityQueue H2 )\n{ \n  if ( H1-&gt;Left == NULL )     /* single node */\n      H1-&gt;Left = H2;          /* H1-&gt;Right is already NULL and H1-&gt;Npl is already 0 */\n  else {\n      H1-&gt;Right = Merge( H1-&gt;Right, H2 );     /* Recursive Merge */\n      if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )   /* Maintain subtree */\n          SwapChildren( H1 ); \n      H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;           /* Update NPL value*/\n  } /* end else */\n  return H1;\n}\n</code></pre> </li> </ul>"},{"location":"ads/Lec04.html#skew-heap","title":"Skew Heap","text":"<ul> <li> <p>No maintaining of NPL anymore.</p> <p>Length of right path is ONLY guaranteed under amortized analysis.</p> </li> </ul> <ul> <li> <p>Merge Operation</p> <ol> <li>Sort right path of A B, let it to be the new left path.</li> <li>Attach left-sub tree to the corresponding right child. (except the largest on new left path)</li> </ol> </li> </ul> <ul> <li> <p>Amortized analysis</p> <p>\\(\\Phi = \\) number of heavy nodes.</p> <p>After swap, heavy nodes MUST becomes light nodes.</p> <p>Light nodes MAY become heavy nodes.</p> <p>New heavy nodes \\(\\leq \\) Old light nodes.</p> <p></p> </li> </ul>"},{"location":"ads/Lec05.html","title":"Binomial &amp; Fibonacci Heap","text":"<p> \u200b\u7ea6\u200b 245 \u200b\u4e2a\u200b\u5b57\u200b  71 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec05.html#idea-collection-of-heaps","title":"Idea: Collection of heaps","text":"<p>Use restraint of distinct heap size (binomial heap) or children num (Fibonacci heap) to guarantee the time bound.</p>"},{"location":"ads/Lec05.html#binomial-heap","title":"Binomial Heap","text":"<ul> <li>A binomial heap is a collection of heap-ordered trees with distinct size. (maximum \\(logN\\))</li> </ul> <ul> <li>For each heap-ordered tree \\(B_k\\), the root has \\(k\\) children, from \\(B_0\\) to \\(B_{k-1}\\). </li> </ul> <ul> <li>\\(B_k\\) is of size \\(2^k\\). Thus each number can be represented by collection of \\(B_i\\).  </li> </ul> <ul> <li>The number of nodes at depth \\(d\\) is \\(C_k^d\\). (Every path from root to depth d is a case of selection. )</li> </ul> <ul> <li> <p>FindMin</p> <p>FindMin can be done in \\(O(1)\\) by maintaining a min pointer, o/w \\(O(logN)\\)</p> </li> </ul> <ul> <li> <p>Insertion</p> <p>Amortized analysis.</p> <p>\\(\\Phi = \\) number of heap-ordered trees.</p> <p>If insertion takes c steps, then \\(\\Phi \\rightarrow \\Phi + (2-c)\\)</p> <p>\\(\\hat c_i = c_i + \\Delta \\Phi = 2 = O(1)\\) </p> </li> </ul> <ul> <li> <p>Merge</p> <p>Merge is a sequence of insertion. Root list is \\(O(logN)\\)</p> <p>Thus \\(O(logN * 1) = O(logN)\\)</p> </li> </ul> <ul> <li> <p>Deletion</p> <ol> <li>Delete the min node.</li> <li>Build a binomial heap \\(H'\\) with min's children.</li> <li>Merge \\(O(logN)\\)</li> </ol> </li> </ul> <ul> <li> <p>Implementation</p> <p>Implementation is different from schema.</p> <p>sub-trees are attached in descend order w.r.t their size.</p> <p>Ordered-heap trees still in ascend order. Be careful in deletion !!</p> <pre><code>BinTree CombineTrees( BinTree T1, BinTree T2 )\n{  /* merge equal-sized T1 and T2 */\n  if ( T1-&gt;Element &gt; T2-&gt;Element )\n      /* attach the larger one to the smaller one */\n      return CombineTrees( T2, T1 );\n  /* insert T2 to the front of the children list of T1 */\n  T2-&gt;NextSibling = T1-&gt;LeftChild;\n  T1-&gt;LeftChild = T2;\n  return T1;\n}\n</code></pre> <pre><code>BinQueue  Merge( BinQueue H1, BinQueue H2 )\n{ BinTree T1, T2, Carry = NULL;   \n  int i, j;\n  if ( H1-&gt;CurrentSize + H2-&gt; CurrentSize &gt; Capacity )  ErrorMessage(); /*Current size = total number of nodes*/\n  H1-&gt;CurrentSize += H2-&gt; CurrentSize;\n  for ( i=0, j=1; j&lt;= H1-&gt;CurrentSize; i++, j*=2 ) {\n      T1 = H1-&gt;TheTrees[i]; T2 = H2-&gt;TheTrees[i]; /*current trees */\n      switch( 4*!!Carry + 2*!!T2 + !!T1 ) {       /*|Carry|T2|T1|*/\n      case 0: /* 000 */\n      case 1: /* 001 */  break;   \n      case 2: /* 010 */  H1-&gt;TheTrees[i] = T2; H2-&gt;TheTrees[i] = NULL; break;\n      case 4: /* 100 */  H1-&gt;TheTrees[i] = Carry; Carry = NULL; break;\n      case 3: /* 011 */  Carry = CombineTrees( T1, T2 );\n                      H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL; break;\n      case 5: /* 101 */  Carry = CombineTrees( T1, Carry );\n                      H1-&gt;TheTrees[i] = NULL; break;\n      case 6: /* 110 */  Carry = CombineTrees( T2, Carry );\n                      H2-&gt;TheTrees[i] = NULL; break;\n      case 7: /* 111 */  H1-&gt;TheTrees[i] = Carry; \n                      Carry = CombineTrees( T1, T2 ); \n                      H2-&gt;TheTrees[i] = NULL; break;\n      } /* end switch */\n  } /* end for-loop */\n  return H1;\n}\n</code></pre> <p>Delete be aware of size and order!!</p> <pre><code>ElementType  DeleteMin( BinQueue H )\n{ BinQueue DeletedQueue; \n  Position DeletedTree, OldRoot;\n  ElementType MinItem = Infinity;  /* the minimum item to be returned */  \n  int i, j, MinTree; /* MinTree is the index of the tree with the minimum item */\n\n  if ( IsEmpty( H ) )  {  PrintErrorMessage();  return \u2013Infinity; }\n\n    /* Step 1: find the minimum item */\n  for ( i = 0; i &lt; MaxTrees; i++) {  \n      if( H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem ) { \n      MinItem = H-&gt;TheTrees[i]-&gt;Element;  MinTree = i;    } /* end if */\n  } /* end for-i-loop */\n\n    /* Step 2: remove the MinTree from H =&gt; H\u2019 */ \n  DeletedTree = H-&gt;TheTrees[ MinTree ];  \n  H-&gt;TheTrees[ MinTree ] = NULL;  \n\n    /* Step 3.1: remove the root */ \n  OldRoot = DeletedTree;   \n  DeletedTree = DeletedTree-&gt;LeftChild;   free(OldRoot);\n    /* Step 3.2: create H\u201d */ \n  DeletedQueue = Initialize();   \n  DeletedQueue-&gt;CurrentSize = ( 1&lt;&lt;MinTree ) \u2013 1;  /* 2^MinTree \u2013 1 */\n  for ( j = MinTree \u2013 1; j &gt;= 0; j \u2013 \u2013 ) {  \n      DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n      DeletedTree = DeletedTree-&gt;NextSibling;\n      DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n  } /* end for-j-loop */\n\n    /*Update H's Current size*/\n  H-&gt;CurrentSize  \u2013 = DeletedQueue-&gt;CurrentSize + 1;\n    /* Step 4: merge H\u2019 and H\u201d */\n  H = Merge( H, DeletedQueue );  \n  return MinItem;\n}\n</code></pre> </li> </ul>"},{"location":"ads/Lec05.html#fibonacci-heap","title":"Fibonacci Heap","text":"<ul> <li>We restrain the number of children of each heap-ordered tree to be distinct. (More relax requirement)</li> </ul> <ul> <li> <p>Lazy maintenance. (Only maintain tree structure in extract min)</p> <p>Potential function for Fibonacci heap is \\(T(H) + 2m(H)\\)</p> </li> </ul>"},{"location":"ads/Lec06.html","title":"Back Tracking","text":"<p> \u200b\u7ea6\u200b 173 \u200b\u4e2a\u200b\u5b57\u200b  17 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <ul> <li> <p>Game Tree</p> <p>Each path from the root to a leaf defines an element of the solution space.</p> </li> </ul> <ul> <li> <p>Template</p> <pre><code>bool Backtracking ( int i )\n{   Found = false;\n    if ( i &gt; N )\n        return true; /* solved with (x1, \u2026, xN) */\n    for ( each xi in Si ) { \n        /* check if satisfies the restriction R */\n        OK = Check((x1, \u2026, xi) , R ); /* pruning */\n        if ( OK ) {\n            Count xi in;\n            Found = Backtracking( i+1 );\n            if ( !Found )\n                Undo( i ); /* recover to (x1, \u2026, xi-1) */\n        }\n        if ( Found ) break; \n    }\n    return Found;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Efficiency</p> <p>\u200b\u56de\u6eaf\u200b\u7684\u200b\u6548\u7387\u200b\u8ddf\u200bS\u200b\u7684\u200b\u89c4\u6a21\u200b\u3001\u200b\u7ea6\u675f\u200b\u51fd\u6570\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u3001\u200b\u6ee1\u8db3\u200b\u7ea6\u675f\u6761\u4ef6\u200b\u7684\u200b\u7ed3\u70b9\u200b\u6570\u200b\u76f8\u5173\u200b\u3002</p> <p>\u200b\u7ea6\u675f\u200b\u51fd\u6570\u200b\u51b3\u5b9a\u200b\u4e86\u200b\u526a\u679d\u200b\u7684\u200b\u6548\u7387\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u51fd\u6570\u200b\u672c\u8eab\u200b\u592a\u200b\u590d\u6742\u200b\u4e5f\u200b\u672a\u5fc5\u200b\u5408\u7b97\u200b\u3002</p> <p>\u200b\u6ee1\u8db3\u200b\u7ea6\u675f\u6761\u4ef6\u200b\u7684\u200b\u7ed3\u70b9\u200b\u6570\u200b\u6700\u96be\u200b\u4f30\u8ba1\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u590d\u6742\u5ea6\u200b\u5206\u6790\u200b\u5f88\u96be\u200b\u5b8c\u6210\u200b\u3002</p> </li> </ul> <ul> <li> <p>\\(\\alpha-\\beta\\) pruning</p> <p>Limits search to \\(O(\\sqrt N)\\) nodes, where \\(N\\) is the total nodes in a game tree.</p> </li> </ul>"},{"location":"ads/Lec06.html#examples","title":"Examples","text":"<ul> <li> <p>The Turnpike Reconstruction Problem</p> <p>Given \\(N ( N \u2013 1 ) / 2\\) distances.  Reconstruct a point set from the distances.</p> <p>Solution: Reconstruct from the largest distance. Two options (\\(X_{l}, X_r\\))</p> <p>Answers are symetric.</p> </li> </ul> <ul> <li> <p>Tic-tac-toe</p> <p>\\(f(P) = W_{Computer} - W_{human}\\)</p> <p>\\(W\\) is the number of potential wins at P.</p> </li> </ul>"},{"location":"ads/Lec07.html","title":"Divide and Conquer","text":"<p> \u200b\u7ea6\u200b 260 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec07.html#simple-example","title":"Simple Example","text":""},{"location":"ads/Lec07.html#nearest-point-pair","title":"Nearest point pair","text":"<p>Divide and conquer.</p> <p>Let \\(\\delta = \\) \\(min\\{d_l, d_r\\}\\)</p> <p>For a point lies in the strip, we only search for the near by \\(\\delta * \\delta\\) square.</p> <p>At the beginning, the points are preprocessed to sorted by x distance.</p> <p>During conquer, we merge them with sorted y distance. (Like merge sort).</p> <p>Each point at most inspect 8 neighbors.</p> <p>In the conquer part, we only scan the point list linearly. \\(O(NlogN)\\)</p> <p></p>"},{"location":"ads/Lec07.html#substitution-method","title":"Substitution Method","text":"<p>Guess first, proof by induction</p>"},{"location":"ads/Lec07.html#pit-fall","title":"Pit-fall","text":""},{"location":"ads/Lec07.html#recursion-tree","title":"Recursion Tree","text":""},{"location":"ads/Lec07.html#master-method","title":"Master Method","text":"<p>\\(\\Large{T(N) = \\sum_{j=0}^{log_b(N-1)} a^j \\mathbf{f(N/b^j)} + \\Theta(N^{log_b a})}\\)</p> <p>The last layer has \\(N^{log_b a}\\) nodes</p>"},{"location":"ads/Lec07.html#type-1","title":"Type 1","text":"<p>compare \\(f(N)\\) with \\(N^{log_b a}\\) in \\(\\textbf{Polynomial}\\) way.</p> <p>\\(f(N) = NlogN &gt; N^{log_b a + \\epsilon}\\) \\(\\textbf{WRONG}\\)</p> <ul> <li> <p>Why comparing with \\(N^{log_b a}\\) ? </p> <p>This determines the result of \\((\\frac{N}{b^j})^{log_b a + ?} = 1 \\) or \\(b^{\\epsilon j}\\) or ...</p> </li> </ul> <p></p> <ul> <li> <p>For case 1:</p> <p></p> </li> </ul> <ul> <li>For case 2:</li> </ul> <p>if \\(f(N) = \\Theta(N^{log_ba})\\)</p> <p>then we have</p> <p>\\(\\sum_{j=0}^{log_b(N-1)} a^j \\mathbf{f(N/b^j)}= \\Theta(\\sum_{j=0}^{log_b(N-1)} a^j \\mathbf{(N/b^j)^{log_b a}}) = \\)</p> <p>\\(\\Theta(N^{log_ba}\\sum_{j=0}^{log_bN-1} (\\frac{a}{b^{log_ba}})^j) = \\)\\(\\Theta(N^{log_ba} * \\sum_{j=0}^{log_bN-1} 1) = \\Theta(N^{log_ba}log_bN)\\)</p> <p>\\(\\Theta(N^{log_ba}log_bN) + \\Theta(N^{log_b a}) = \\Theta(N^{log_ba}log_bN))\\)</p>"},{"location":"ads/Lec07.html#type-2-feeble","title":"Type 2 (Feeble)","text":"<p>Compare \\(af(N/b)\\) with \\(f(N)\\)</p> <p></p>"},{"location":"ads/Lec07.html#type-3-robust","title":"Type 3 (Robust)","text":""},{"location":"ads/Lec08.html","title":"Dynamic Programming","text":"<p> \u200b\u7ea6\u200b 77 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ads/Lec08.html#examples","title":"Examples","text":"<ul> <li> <p>Optimal Binary Search Tree (Different from Huffman encoding!!!)</p> <p>We need to maintain the BST property as well as optimal the search cost.</p> <p>\\(c_{i,j} = min_{l\\in(i,j]}\\{w_{i,j} + c_{i,l-1} + c_{i,l+1}\\}\\), \\(w_{i,j}\\) is the total weight from i to j, (cause the height of tree increases)</p> </li> </ul> <ul> <li> <p>All Pairs Shortest Paths</p> <p>\\(D^k [ i ] [ j ] = min\\{D^{k-1}[ i ] [ k ] + D^{k-1}[ k ] [ j ]\\}\\)</p> </li> </ul> <ul> <li>Product Assembly</li> </ul>"},{"location":"ads/Lec10.html","title":"NP Completeness","text":"<p> \u200b\u7ea6\u200b 271 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec10.html#decision-problems","title":"Decision Problems","text":"<p>The following discussion are all around decision problem.</p> <p>An optimization problem can be converted to decision problem.</p>"},{"location":"ads/Lec10.html#formal-language","title":"Formal Language","text":"<p>A language \\(L\\), consisting instances of a problem.</p> <p>e.g. In Hamilton cycle problem, \\(L\\) = all Hamilton graphs.</p> <p>\\(x \\in L\\) in one of the Hamilton graph.</p>"},{"location":"ads/Lec10.html#accept","title":"Accept","text":"<p>An algorithm \\(A\\) accept language \\(L\\), if it accepts all \\(x \\in L\\).</p> <p>An algorithm \\(A\\) decides language \\(L\\), if it accepts \\(L\\) and correctly rejects \\(x \\notin L\\). (some algorithm will enter infinite loop thus can only accept but not decides \\(L\\))</p>"},{"location":"ads/Lec10.html#verify","title":"Verify","text":"<p>Certificate \\(y\\). (Possible solution to prove \\(x \\in L\\))</p> <p>An algorithm \\(A\\) can decides \\(L\\) if \\(\\forall x\\in L, \\exist y, A(x,y) = 1\\).</p>"},{"location":"ads/Lec10.html#complexity-class-np","title":"Complexity class NP","text":"<p>Those \\(L\\) that can be verified in polynomial time.</p> <p>Those \\(L\\) can be solved in polynomial time in non-deterministic machine</p>"},{"location":"ads/Lec10.html#npc","title":"NPC","text":"<p>\\(\\forall A_{NP} \\rightarrow_{polynomial reduce} B_{NPC}\\)</p> <p>If we want to prove problem \\(A\\) is NPC, then \\(A\\) should be on the right side.</p> <p>Reduce means no harder than.</p>"},{"location":"ads/Lec10.html#co-np","title":"co-NP","text":"<p>\\(\\bar L \\in NP\\)</p>"},{"location":"ads/Lec10.html#relations","title":"Relations","text":"<p>\\(P \\subset NP, P \\subset co-NP\\) always holds.</p> <p>Not decided yet:</p> <ol> <li> <p>If \\(L \\in NP\\), \\(\\bar L \\in NP\\) ?</p> <p>If \\(L \\in NP \\rightarrow \\bar L \\in NP\\) holds, this means \\(L \\in NP \\iff L \\in co-NP\\) </p> </li> <li> <p>\\(P = NP\\) (\\(P = NP \\cap co-NP\\)) ? </p> </li> </ol> <p></p>"},{"location":"ads/Lec10.html#classical-np-problems","title":"Classical NP-problems","text":"<ul> <li> <p>Clique problem</p> <p>Find a complete subgraph with K vertices</p> </li> </ul> <ul> <li> <p>Vertex Cover problem</p> <p>Find a vertex set with K, covers each edge.</p> </li> </ul> <ul> <li>Circuit SAT</li> </ul> <ul> <li> <p>Hamilton cycle</p> <p>Travel each node once</p> </li> </ul> <ul> <li> <p>TSP</p> <p>If the cost of TSP doesn't satisfies triangle inequality, there are no approximation algorithms.</p> </li> </ul>"},{"location":"ads/Lec11.html","title":"Approximation","text":"<p> \u200b\u7ea6\u200b 185 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec11.html#approximation-ration","title":"Approximation ration","text":"<p>\\(C/C^*\\) = \\(\\rho (n)\\) = \\(1+\\epsilon\\)</p> <ul> <li>\\(\\rho(n)\\) or \\((1+\\epsilon)\\) - approximation</li> </ul> <ul> <li> <p>fully polynomial-time approximation scheme (FPTAS)</p> <p>Polynomial w.r.t. \\(\\epsilon\\)</p> </li> </ul>"},{"location":"ads/Lec11.html#bin-packing","title":"Bin Packing","text":"<p>How to analyze? Construct the lower bound of each bin.</p> <p>Suppose \\(\\sum w_i = W\\), optimal solution \\(C^*\\). Obviously, \\(C^* &gt;= W\\) (all bins are full)</p> <ul> <li> <p>Next Fit</p> <p>\\(2\\) -approximation, never uses more than \\(2M-1\\) bins, where \\(M\\) is the optimal solution.</p> <p>Proof:</p> <p>For Next Fix strategy, each bin is at least half full.</p> <p>\\(W = \\sum w_i \\geq C * 1/2\\)</p> <p>\\(C \\leq 2W \\leq 2C^*\\)</p> </li> </ul> <ul> <li> <p>First Fit</p> <p>\\(1.7\\)-approximation</p> </li> </ul> <ul> <li>Best Fit</li> </ul> <ul> <li> <p>Best Fit - Decreasing (Offline)</p> <p>Sort. Large things first.</p> </li> </ul>"},{"location":"ads/Lec11.html#knapsack-problem","title":"Knapsack Problem","text":"<p>\\(2\\)-approximation</p> <p></p> <p>If we use dp, \\(O(n^2p_{max})\\)</p>"},{"location":"ads/Lec11.html#k-center-problem","title":"K-center Problem","text":"<p>2-approximation</p> <p>We can test if \\(r\\) is valid by drawing circle with \\(2r\\)</p> <p>No approximation ration less than \\(2\\) , unless P=NP</p>"},{"location":"ads/Lec11.html#how-to-prove-an-approximation-ratio","title":"How to Prove an Approximation Ratio?","text":"<p>For the optimal solution \\(C^*\\), we consider its lower bound. \\(C^* \\geq X\\).</p> <p>Then, we associate our solution \\(C\\) with \\(X\\). (Consider the best case or constraints).</p>"},{"location":"ads/Lec11.html#how-to-disapprove-an-approximation-ration-under-rho","title":"How to Disapprove an Approximation Ration Under \\(\\rho\\)","text":"<p>Reduce an NPC problem to this problem.</p>"},{"location":"ads/Lec12.html","title":"Local Search (Approximation cont.)","text":"<p> \u200b\u7ea6\u200b 209 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec12.html#local","title":"Local","text":"<ul> <li>A feasible set of neighborhoods</li> <li>Local optimum</li> </ul>"},{"location":"ads/Lec12.html#search","title":"Search","text":"<ul> <li>Start with feasible solution, and find a better one.</li> <li>Stop when no (or little) improvement</li> </ul>"},{"location":"ads/Lec12.html#vertex-cover","title":"Vertex cover","text":"<ul> <li>Start with all vertices</li> <li>Delete a potential vertex, which makes the remaining set also feasible</li> <li>May be add a chance to add a vertex (\\(e^{-\\delta_{cost}/kT}\\)), \\(T\\) keeps cool down</li> </ul>"},{"location":"ads/Lec12.html#simulated-annealing","title":"Simulated Annealing","text":""},{"location":"ads/Lec12.html#hopfield-neural-networks","title":"Hopfield Neural Networks","text":"<ul> <li>Assign states of each node</li> </ul> <ul> <li> <p>Edge are constraints and reward</p> <p></p> <p>All edge constraints may not be satisfied, but all nodes are stable.</p> </li> </ul> <ul> <li> <p>A stable node</p> <p>\\(\\sum w(e)_{good} \\geq \\sum w(e_{bad})\\)</p> </li> </ul> <ul> <li> <p>We flip a node if it's not stable</p> <p>A flip will surely increase the total gain.</p> <p>Total gain has upper bound.</p> <p>There always a solution that all nodes are stable.</p> <p>Local search is not polynomial. It has at most \\(\\sum w_i\\) iterations.</p> </li> </ul>"},{"location":"ads/Lec12.html#maximum-cut-problem","title":"Maximum cut problem","text":"<p>Special case of hopfield neural networks, with positive edge weight. (only nodes belong to different group, we gain the reward)</p> <ul> <li> <p>2-Approximation (may not polynomial)</p> <p></p> </li> </ul> <ul> <li>\\(2+\\epsilon\\) approximation</li> </ul> <p>\u200b   Only flip when gain is at least \\((2\\epsilon/|V|) * w(A,B)\\)</p> <p>\u200b   \\((2+\\epsilon)w &gt;= w^*\\)</p> <p>\u200b   \\(O((n/\\epsilon) logW)\\) flips</p> <p>\\(f'(k) = 1/Nln(N/k) + -1/N = 1/N*(ln(N/k) - 1)\\)</p> <p>\\(N/k = e\\), \\(k = N/e\\) </p>"},{"location":"ads/Lec13.html","title":"Randomized Algorithms","text":"<p> \u200b\u7ea6\u200b 298 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"ads/Lec13.html#the-hiring-problem","title":"The Hiring Problem","text":"<p>Hiring cost: \\(C_h\\)</p> <ul> <li> <p>Permute candidates</p> <p>\\(E[X] = E[\\sum X_i] = \\sum E[X_i] = \\sum 1/i = ln(N)\\)</p> <p>\\(O(ln(N)C_h)\\)</p> <ul> <li> <p>How to permute?</p> <p>Assign each element a random priority and sort.</p> </li> </ul> </li> </ul> <ul> <li> <p>Hire Only Once</p> <p>For first k candidates, we determine the threshold, no hire.</p> <p>For remaining candidates, we hire the first that is above the threshold.</p> <p>\\(P(\\)no one at k+1 - i-1 are hired\\() = k/(i-1)\\) (The maximum of first i is at first j)</p> <p>Best \\(k = N/e\\)</p> </li> </ul>"},{"location":"ads/Lec13.html#quick-sort","title":"Quick Sort","text":"<p>The pivot always divides the set so that each side is at least \\(n/4\\).</p> <p>If the pivot doesn't satisfies, we choose again.</p> <p>The expected number of choose is \\(E = 1/2*1 + 1/2*(E+1)\\) ,\\(E = 2\\)</p> <ul> <li> <p>Type j problem</p> <p>The problem divided by \\(3/4\\) for \\(j\\) times.</p> <p>\\(N(3/4)^{j+1} \\leq |S| \\leq N(3/4)^j\\). \\(|S|\\) is the problem size.</p> <p>There are at most \\((4/3)^{j+1}\\) problems at type \\(j\\).</p> <p>Number of different types: \\(log_{4/3}N = O(logN)\\)</p> </li> </ul> <p>Some proofs:</p> <ul> <li> <p>\\(\\int_k^N 1/x dx \\leq \\sum_{i=k}^{N-1} 1/i \\leq \\int_{k-1}^{N-1} 1/x dx\\).</p> <p>It is obvious that : \\(\\int_k^{k+1} 1/x dx \\leq \\int _k^{k+1} 1/k dx = 1/k\\).</p> <p>So we have: \\(\\int_k^N 1/x dx = \\int_k^{k+1} 1/x dx + \\int_{k+1}^{k+2} 1/x dx +\\dots + \\int_{N-1}^{N} 1/x dx\\leq \\sum_{i=k}^{N-1} 1/i \\).</p> <p>We also have: \\(\\int_k^{k+1} 1/x dx \\geq \\int _k^{k+1} 1/(k+1) dx = 1/(k+1)\\).</p> <p>With similar strategy, we can get: \\(\\sum_{i=k}^{N-1} 1/i \\leq \\int_{k-1}^{N-1} 1/x dx\\).</p> <p>Warp it up, we have \\(\\int_k^N 1/x dx \\leq \\sum_{i=k}^{N-1} 1/i \\leq \\int_{k-1}^{N-1} 1/x dx\\).</p> </li> </ul> <ul> <li> <p>Optimum k?</p> <p>\\(f'(k) = 1/Nln(N/k) + -1/N = 1/N*(ln(N/k) - 1)\\)</p> <p>\\(N/k = e\\)</p> <p>\\(k = N/e\\) </p> </li> </ul>"},{"location":"ads/Lec14.html","title":"Parallel Algorithms","text":"<p> \u200b\u7ea6\u200b 293 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <ul> <li> <p>PRAM (Parallel Random Access Machine)</p> <p>Needs to fully specify allocation of instructions. (e.g. who is idle)</p> </li> </ul> <ul> <li>WD (Work Depth)</li> </ul> <ul> <li> <p>T(n)</p> <p>Worst case running time on PRAM. Theoretical minimum time.</p> </li> </ul> <ul> <li> <p>W(n)</p> <p>Total work load of all processors</p> </li> </ul> <ul> <li> <p>P(n)</p> <p>Number of processes \\(P(n) = W(n)/T(n)\\)</p> </li> </ul> <ul> <li> <p>WD running time</p> <p>In a WD mode, time is \\(O(T(n) + W(n)/P(n))\\)</p> </li> </ul>"},{"location":"ads/Lec14.html#summation","title":"Summation","text":"<p>Balanced tree. \\(T(n) = O(logn), W(n) = O(n)\\)</p>"},{"location":"ads/Lec14.html#prefix-sum","title":"Prefix Sum","text":"<p>First buttom up compute the summation.</p> <p>Then top-down reduce the prefix sum.</p> <p>\\(C\\) is the summation to the rightmost descendant of this node.</p> <p>Left child : \\(C = Sum + Sum_{uncle}\\)</p> <p>Right child: \\(C = C_{parent}\\)</p>"},{"location":"ads/Lec14.html#merging","title":"Merging","text":"<p>Merging is equivalent to ranking.</p> <p>Ranking the element in the other sequence.</p> <ul> <li> <p>Partition</p> <p>Partition to \\(log n \\) segments. Total at most \\(2*(n/logn)\\) segments to be ranked.</p> <p>\\(T(n) = O(logn), W(n) = O((n/logn)*logn) = O(n)\\)</p> <p></p> </li> </ul> <ul> <li> <p>Ranking</p> <p>\\(T(n) = O(logn), W(n) = O(n)\\)</p> </li> </ul>"},{"location":"ads/Lec14.html#maximum-finding","title":"Maximum-Finding","text":"<ul> <li>Binary tree</li> </ul> <ul> <li> <p>\\(n^2\\) Comparison</p> <p>\\(W(n) = O(n^2),T(n) = O(1)\\), Too much work load, not good.</p> </li> </ul> <ul> <li> <p>\\(\\sqrt n \\) Recursive Partition, \\(n^2\\) comparison reduction</p> <p>Partition to \\(\\sqrt n\\) segment. Using \\(n^2\\) comparison to do reduction.</p> <p>\\(T(n) \\leq T(\\sqrt n) + O(1) = O(loglogn)\\)</p> <p>\\(W(n) \\leq \\sqrt n W(\\sqrt n) + (\\sqrt n)^2 = O(nloglogn)\\)</p> </li> </ul> <ul> <li> <p>\\(loglogn\\) Partition, \\(\\sqrt n\\) reduction</p> <p>Partition to segment of length \\(loglogn\\). Total \\(n/loglogn\\) segments\u3002</p> <p>Each segment use serial max-finding.</p> <p>\\(T(n) \\leq loglogn + loglog(n/loglogn) = O(loglogn)\\)</p> <p>\\(W(n) \\leq n + (n/loglogn) * loglog(n/loglogn) = O(n)\\)</p> </li> </ul>"},{"location":"ads/Lec14.html#random-sampling","title":"Random Sampling","text":"<p>Has a high probability run in \\(T(n) = O(1), W(n) = O(n)\\)</p> <p>The probability no finishing at one time is \\(O(1/n^c)\\)</p> <p>\\(T(n) = \\sqrt n T(\\sqrt n) + O(n)\\)</p>"},{"location":"ads/Lec15.html","title":"External Sorting","text":"<p> \u200b\u7ea6\u200b 80 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"ads/Lec15.html#external-merge-sort","title":"External Merge Sort","text":"<ul> <li>N: Total number of records</li> </ul> <ul> <li>M: Number of records can be held in memory</li> </ul> <ul> <li> <p>k: k-way merge</p> <p>use a \\(k\\) size heap</p> <p>require \\(2k\\) external memory</p> </li> </ul> <ul> <li> <p>Number of passes</p> <p>\\(1 + log_k(N/M)\\) , 1 for initial partition and sorting</p> </li> </ul>"},{"location":"ads/Lec15.html#poly-phase-merge","title":"Poly-phase Merge","text":"<p>Use \\(k+1\\) external memory.</p> <p>Initial partition should be to consecutive Fibonacci number. So it can bouncing.</p>"},{"location":"ads/Lec15.html#parallel-merge","title":"Parallel Merge","text":"<p>Computation &amp; Memory access overlap!</p> <p>\\(2k\\) input buffer and \\(2\\) output buffer</p>"},{"location":"ads/Lec15.html#replacement-selection","title":"Replacement Selection","text":""},{"location":"ads/Lec15.html#minimize-merge-time","title":"Minimize Merge Time","text":""},{"location":"ads/Pitfalls.html","title":"Pitfalls","text":"<p> \u200b\u7ea6\u200b 219 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\uff0c\u200b\u5728\u200bO\u200b\u4e0b\u200b\u6b63\u786e\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u7d27\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200b\u8be5\u200b\u9009\u9879\u200b\u6b63\u786e\u200b</li> <li>P \u200b\u7c7b\u200b\u95ee\u9898\u200b\u4e00\u5b9a\u200b\u662f\u200b NP\u200b\u95ee\u9898\u200b</li> <li>\u200b\u4ed4\u7ec6\u9605\u8bfb\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</li> <li>\u200b\u4e0d\u8981\u200b\u63ea\u4f4f\u200b\u4e00\u4e2a\u200b\u9009\u9879\u200b\u6f0f\u6d1e\u200b\u4e0d\u200b\u653e\u200b\uff0c\u200b\u9009\u200b\u6700\u597d\u200b\u7684\u200b</li> <li>Full binary tree vs complete binary tree</li> <li>\\(\\sum logn = O(nlogn)\\) </li> <li>\u200b\u4e0d\u8981\u200b\u5fd8\u8bb0\u200b\u7ef4\u62a4\u200bNPL\uff0c\u200b\u5728\u200b\u5408\u5e76\u200b\u5b8c\u200bleftist heap</li> <li>\u200b\u4e0d\u4f1a\u200b\u7b97\u200b\u7684\u200b\u9012\u5f52\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u7b97\u200b\u7684\u200b\u6982\u7387\u200b\uff0c\u200b\u4e0d\u8981\u200b\u6b7b\u7b97\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u5e26\u5165\u200b\u7279\u6b8a\u200b\u503c\u200b\uff0c\u200b\u53d6\u200b\u6781\u9650\u200b\uff0c\u200b\u6216\u200bsubstitution method</li> <li>BST \u200b\u5220\u8282\u200b\u70b9\u65f6\u200b\uff0c\u200b\u5148\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u513f\u5b50\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\uff0c\u200b\u76f4\u63a5\u200b\u62ff\u4e0a\u6765\u200b</li> <li>Splay\u200b\u5220\u9664\u200b\uff0c\u200b\u5148\u200b\u628a\u200b\u8981\u200b\u5220\u9664\u200b\u7684\u200b\u8282\u70b9\u200bsplay\u200b\u5230\u200b\u6839\u200b\uff0c\u200b\u518d\u200b\u5220\u200b\uff08L or R\u200b\u90fd\u884c\u200b\uff09\uff0c\u200b\u9009\u62e9\u200b\u66ff\u6362\u200b\u8005\u200b\u540e\u200b\uff0c\u200b\u518d\u200b\u628a\u200b\u66ff\u6362\u200b\u8005\u200b\u8f6c\u4e0a\u6765\u200b</li> <li>not FPTAS: \\(O(n^{2/\\epsilon})\\)</li> <li>\\((1+\\epsilon) - approximation\\) may not tight!! May only needs to deny it.</li> <li>\u200b\u5173\u6ce8\u200b\u9898\u76ee\u200b\u53d8\u5316\u200b\uff0c\u200b\u53ef\u80fd\u200b\u53c2\u6570\u200b\u4f1a\u200b\u6709\u200b\u6539\u53d8\u200b\uff0c\u200b\u4e0d\u8981\u200b\u65e0\u8111\u200b\u5957\u200b</li> <li>\u200b\u6ce8\u610f\u200bBinomial queue\u200b\u7684\u200bcarry\u200b\u662f\u200b\u54ea\u4e2a\u200b</li> </ul>"},{"location":"ads/Review.html","title":"Review","text":"<p> \u200b\u7ea6\u200b 233 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>\u200b\u6ce8\u610f\u200b\u540d\u8bcd\u89e3\u91ca\u200b\u548c\u200b\u7b97\u6cd5\u200b\u7ec6\u8282\u200b\uff08full binary tree, complete binary tree\uff1fB+\u200b\u6811\u200b\uff09</p> <p>\u200b\u8003\u524d\u200b\u8bad\u7ec3\u200b</p> <p>PPT\u200b\u4ee3\u7801\u200b\u719f\u6089\u200b\uff08\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u80cc\u4e0b\u6765\u200b\uff09</p> <p>PPT\uff0c\u200b\u5386\u5e74\u200b\u5377\u200b\uff0c\u200b\u5e73\u65f6\u200b\u4f5c\u4e1a\u200b</p> <p>AVL\u200b\u53ef\u80fd\u200b\u8003\u200b\u4ee3\u7801\u200b\uff0cdp\u200b\u6216\u200b\u8d2a\u5fc3\u200b</p> <p>\u200b\u65f6\u95f4\u200b\u5206\u914d\u200b\uff08\u200b\u63d0\u524d\u200b\u5206\u914d\u200b\uff0c\u200b\u505a\u200b\u5386\u5e74\u200b\u5377\u200b\u7684\u200b\u65f6\u5019\u200b\u53ef\u4ee5\u200b\u8bd5\u8bd5\u200b\uff09</p> <p>\u200b\u505a\u200b\u9898\u200b\u7b56\u7565\u200b \u200b\u91cd\u91cf\u7ea7\u200b\u9898\u76ee\u200b\u53ef\u4ee5\u200b\u5148\u200b\u8df3\u200b\u8fc7\u200b</p> Problem Method Approximation Ratio Time Complexity Bin Packing Next Fit 2-approximation Polynomial First Fit 1.7-approximation Polynomial First Fit decreasing 11/9-approximation Polynomial Knapsack Problem Greedy (max profit or density) 2-approximation Polynomial K-center Binary search for r, and draw cycle with 2r 2-approximation No 1+\\(\\epsilon\\) unless P=NP Hopfield Neural Networks Flipping until all nodes are stable May NOT Polynomial \\(\\sum w_i\\) iterations Maximum Cut Flipping 2-approximation May NOT Polynomial Flipping only when big improvement (2+\\(\\epsilon\\))-approximation Polynomial O(\\(\\frac{n}{\\epsilon}\\)logW) flips Flipping only when big improvement (start with max \\(\\{v, V-v\\}\\) configuration) (2+\\(\\epsilon\\))-approximation Polynomial O(\\(\\frac{n}{\\epsilon}\\)logn) flips \\(17/16\\) approximation, best unless P=NP Job Scheduling Greedy Best Fit, Random order 2-approximation (more precise \\(2(1-\\frac{1}{m})\\)) (associate OPT and greedy answer with last job) Greedy Best Fit, Length desc order 1.5-approximation (4/3 is tight) TSP MST with preorder 2-approximation"},{"location":"ads/not_solved.html","title":"Not solved","text":"<p> \u200b\u7ea6\u200b 139 \u200b\u4e2a\u200b\u5b57\u200b </p> <ol> <li> <p>?</p> <p></p> </li> <li> <p>\u200b\u770b\u4e0d\u61c2\u200b\u5728\u200b\u8bf4\u200b\u4ec0\u4e48\u200b</p> <p></p> </li> <li> <p>\u200b\u770b\u4e0d\u61c2\u200b\u5728\u200b\u8bf4\u200b\u4ec0\u4e48\u200b</p> <p></p> </li> <li> <p>\uff1f</p> <p></p> </li> <li> <p>BD\u200b\u6b63\u786e\u200b\u7684\u200b\u590d\u6742\u5ea6\u200b\u5e94\u8be5\u200b\u662f\u200b\u4ec0\u4e48\u200b</p> <p></p> </li> <li> <p>\uff1f</p> <p></p> </li> <li> <p>\u200b\u671f\u671b\u200b\u90fd\u200b\u662f\u200b\\(O(n)\\)\u200b\u4e86\u200b\uff0c\u200b\u8fde\u7eed\u200b\u591a\u6b21\u200b\u64cd\u4f5c\u200b\u5747\u644a\u200b\u96be\u9053\u200b\u4e0d\u662f\u200b\\(O(n)?\\)</p> <p>\\</p> </li> <li> <p>\u200b\u611f\u89c9\u200b\u9898\u76ee\u200b\u8868\u8ff0\u200b\u4e0d\u6e05\u200b\uff0c\u200b\u6211\u200b\u4ee5\u4e3a\u200b\u4ed6\u200b\u8bf4\u200b\u5f53\u524d\u200bneighbourhood\u200b\u91cc\u200b\u7531\u200bglobal optimum\uff1f</p> <p></p> </li> <li> <p>NF must no improvement</p> <p>FF ?</p> <p></p> </li> <li> <p>\u200b\u603b\u200b\u64cd\u4f5c\u6570\u200b\u4e0d\u662f\u200b\\(Nlogk\\)\uff1f\u200b\u7136\u540e\u200b\u628a\u200bN\u200b\u770b\u4f5c\u200b\u56fa\u5b9a\u503c\u200b</p> <p></p> </li> <li> <p>B\u200b\u6211\u200b\u77e5\u9053\u200b\u662f\u200b\u9519\u200b\u7684\u200b\u4e86\u200b\uff0c\u200b\u4f46\u200bD\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\\(O(N^2)\\) \u200b\u89e3\u51b3\u200b\u5417\u200b\uff0c\u200b\u5c31\u662f\u200b\u904d\u5386\u200b\u6bcf\u4e2a\u200b\u70b9\u200b\uff0c\u200b\u6807\u8bb0\u200b\u4ed6\u200b\u7684\u200b\u51fa\u8fb9\u200b\uff0c\u200b\u6700\u540e\u200b\u68c0\u67e5\u200b\u6709\u6ca1\u6709\u200b\u8fb9\u200b\u6ca1\u200b\u88ab\u200b\u6807\u8bb0\u200b?</p> <p></p> </li> <li> <p>?</p> <p></p> <p>\u200b\u6211\u200b\u8fd9\u200b\u81f3\u5c11\u200b\u753b\u200b\u4e86\u200b4\u200b\u79cd\u200b</p> <p></p> </li> <li> <p>?</p> <p></p> </li> </ol>"},{"location":"asm/review.html","title":"Assembly (8086)","text":""},{"location":"asm/review.html#\u8003\u8bd5","title":"\u8003\u8bd5","text":"<p>\u200b\u7406\u8bba\u200b45min 60 \u200b\u5206\u200b</p> <p>\u200b\u5224\u65ad\u9898\u200b+\u200b\u5355\u9009\u9898\u200b \u200b\u4e3b\u8981\u200b\u662f\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4f1a\u200b\u6709\u200b\u7a0b\u5e8f\u200b\u9605\u8bfb\u200b\u9898\u200b\uff08\u200b\u8981\u200b\u7ec6\u5fc3\u200b\uff09\uff0c\u200b\u57fa\u7840\u6027\u200b\u77e5\u8bc6\u200b\uff0816\u200b\u4e2a\u200b\u5bc4\u5b58\u5668\u200b\u7528\u6cd5\u200b\uff09\uff0c\u200b\u5730\u5740\u200b\u76f8\u5173\u200b\u77e5\u8bc6\u200b\uff08\u200b\u6bb5\u200b\uff0c\u200b\u504f\u79fb\u200b\uff0c\u200b\u7269\u7406\u200b\uff09</p> <p>\u200b\u5b9e\u9a8c\u200b80min 40 \u200b\u5206\u200b \uff08\u200b\u6765\u6e90\u4e8e\u200b\u4f5c\u4e1a\u200b\u6216\u200b\u4e0a\u8bfe\u200b\u4f8b\u5b50\u200b\uff09</p> <p>2\u200b\u9053\u200b\u51fd\u6570\u200b\u9898\u200b</p> <p>2\u200b\u9053\u200b\u7a0b\u5e8f\u200b\u586b\u7a7a\u9898\u200b</p> <p>\u200b\u6ce8\u610f\u200b\u5bc4\u5b58\u5668\u200b\u7528\u524d\u200b\u6e05\u96f6\u200b</p> <p>\u200b\u6ce8\u610f\u200bds\u200b\u7684\u200b\u521d\u59cb\u5316\u200b</p> <p>\u200b\u6ce8\u610f\u200b\u51fd\u6570\u200b\u4e2d\u200bbx,bp,si,di\u200b\u9700\u8981\u200bcallee\u200b\u4fdd\u62a4\u200b</p> <p>\u200b\u540c\u65f6\u200b\u8c03\u7528\u200b\u4e2d\u65ad\u200b\u524d\u200b\uff0c\u200b\u4fdd\u62a4\u200bax, bx, cx, dx\uff0c\u200b\u4e2d\u65ad\u200b\u51fd\u6570\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7834\u574f\u200b\u4ed6\u4eec\u200b</p>"},{"location":"asm/review.html#\u8f93\u51fa\u8f93\u51fa\u4e2d\u65ad","title":"\u8f93\u51fa\u200b\u8f93\u51fa\u200b\u4e2d\u65ad","text":"<p> \u200b\u7ea6\u200b 1216 \u200b\u4e2a\u200b\u5b57\u200b  75 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 5 \u200b\u5206\u949f\u200b</p> <ul> <li> <p>\u200b\u8bfb\u200b\u5b57\u7b26\u200b</p> <p>ah = 01, int 21h</p> <p>al = getchar();</p> </li> </ul> <ul> <li> <p>\u200b\u5199\u200b\u5b57\u7b26\u200b</p> <p>ah = 02, int 21h</p> <p>putchar(dl);</p> </li> </ul> <ul> <li> <p>\u200b\u5199\u200bbuffer</p> <p>ah = 09h, int 21h</p> <p>puts(ds:dx), ds:dx \u200b\u9700\u8981\u200b\u4ee5\u200b<code>$</code>\u200b\u7ed3\u675f\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u8bfb\u200bbuffer</p> <p>ah = 0Ah, int 21h</p> <p>ds:[dx] = max size of buffer</p> <p>ds:[dx+1] = number of char read</p> <p>ds:[dx+2] = actual input</p> </li> </ul>"},{"location":"asm/review.html#\u5bfb\u5740\u89c4\u8303","title":"\u5bfb\u5740\u200b\u89c4\u8303","text":"<p>TODO 32bit</p> <p>\u200b\u53ef\u4ee5\u200b\u653e\u5728\u200b\u65b9\u62ec\u53f7\u200b\u5185\u200b\u7684\u200b\u5bc4\u5b58\u5668\u200b\uff1abx, bp, si, di</p> <p>\u200b\u7ec4\u5408\u200b\u65b9\u5f0f\u200b <code>[{bx, bp}+ {si, di} + imm]</code></p>"},{"location":"asm/review.html#\u6570\u636e\u4f20\u8f93","title":"\u6570\u636e\u4f20\u8f93","text":"<ul> <li> <p>mov</p> <p>\u200b\u4e24\u4e2a\u200b\u64cd\u4f5c\u6570\u200b\u4e0d\u80fd\u200b\u90fd\u200b\u4e3a\u200b\u5185\u5b58\u200b\u53d8\u91cf\u200b</p> </li> </ul> <ul> <li> <p>push, pop</p> <p>\u200b\u4e0d\u80fd\u200b\u64cd\u4f5c\u200b8\u200b\u4f4d\u200b\u5bc4\u5b58\u5668\u200b\uff0c\u200b\u4f46\u200b\u53ef\u4ee5\u200b\u64cd\u4f5c\u200b8\u200b\u4f4d\u200b\u53d8\u91cf\u200b</p> </li> </ul> <ul> <li> <p>xchg</p> <p><code>xchg r1, r2</code> swap(r1, r2)</p> </li> </ul>"},{"location":"asm/review.html#\u5730\u5740\u4f20\u9001","title":"\u5730\u5740\u200b\u4f20\u9001","text":"<ul> <li> <p>lea</p> <p><code>lea dest, src</code> dest = &amp;src</p> <p>\u200b\u8fd9\u4e2a\u200b\u6307\u4ee4\u200b\u901a\u5e38\u200b\u7528\u6765\u200b\u7b97\u6570\u200b\uff08\u200b\u5730\u5740\u200b\u5185\u5bb9\u200b\u8981\u200b\u7b26\u5408\u200b\u5bfb\u5740\u200b\u89c4\u8303\u200b\uff09</p> <p><code>lea dx, [bx+si+3]</code></p> </li> </ul> <ul> <li> <p>lds</p> <p><code>lds r1, dword ptr x</code> \u200b\u628a\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\u7684\u200b\u5730\u5740\u200b\u653e\u5165\u200bds:r1</p> </li> </ul> <ul> <li> <p>les</p> <p><code>les r1, dword ptr x</code> \u200b\u628a\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\u7684\u200b\u5730\u5740\u200b\u653e\u5165\u200bes:r1</p> </li> </ul>"},{"location":"asm/review.html#\u6807\u5fd7\u5bc4\u5b58\u5668","title":"\u6807\u5fd7\u200b\u5bc4\u5b58\u5668","text":"<ul> <li> <p>\u200b\u6807\u5fd7\u200b\u4f4d\u200b</p> <ul> <li> <p>PF Parity Flag</p> <p>\u200b\u7edf\u8ba1\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u4f4e\u200b8\u200b\u4f4d\u200b1\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c\u200b\u5076\u6570\u200b\u65f6\u200bPF=1</p> </li> </ul> <ul> <li> <p>AF Auxiliary Flag</p> <p>\u200b\u8f85\u52a9\u200b\u8fdb\u4f4d\u200b\u6807\u5fd7\u200b\uff0c\u200b\u4f4e\u200b4\u200b\u4f4d\u5411\u200b\u9ad8\u200b\u56db\u4f4d\u200b\u8fdb\u4f4d\u200b\u6216\u200b\u501f\u4f4d\u200b\u65f6\u4e3a\u200b1</p> <p>\u200b\u7528\u4e8e\u200bBCD\u200b\u7801\u200b\u7684\u200b\u8ba1\u7b97\u200b \uff08daa\uff09</p> </li> </ul> <ul> <li>CF, ZF, SF, OF</li> </ul> <ul> <li> <p>DF</p> <p>direction flag \u200b\u8ddf\u200b\u5b57\u7b26\u4e32\u200b\u64cd\u4f5c\u200b\u6709\u5173\u200b</p> </li> </ul> <ul> <li> <p>TF</p> <p>trap flag \u200b\u5355\u6b65\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6267\u884c\u200b\u8be5\u200b\u6307\u4ee4\u200b\u524d\u200bTF=1\uff0c\u200b\u6267\u884c\u200b\u8be5\u200b\u6307\u4ee4\u200b\u540e\u200b\u63d2\u5165\u200bint 1</p> </li> </ul> <ul> <li> <p>IF</p> <p>interrupt flag \u200b\u662f\u5426\u200b\u5141\u8bb8\u200b\u4e2d\u65ad\u200b \uff08cli, sti\uff09</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u6539\u53d8\u200b\u6807\u5fd7\u200b\u5bc4\u5b58\u5668\u200b</p> <ul> <li> <p>\u200b\u66b4\u529b\u200b\u4fee\u6539\u200b (TF \u200b\u53ea\u80fd\u200b\u901a\u8fc7\u200b\u8be5\u200b\u65b9\u6cd5\u200b)</p> <pre><code>pushf\npop ax\n....\npush ax\npopf\n</code></pre> </li> </ul> <ul> <li>stc, clc (CF)</li> </ul> <ul> <li>std, cld (DF)</li> </ul> <ul> <li>sti, cli (IF)</li> </ul> </li> </ul>"},{"location":"asm/review.html#\u7b26\u53f7\u6269\u5145","title":"\u7b26\u53f7\u200b\u6269\u5145","text":"<ul> <li> <p>CBW</p> <p>convert byte to word</p> <p><code>ax &lt;- al</code></p> </li> </ul> <ul> <li> <p>CWD</p> <p>convert word to dword</p> <p><code>dx:ax &lt;- ax</code></p> </li> </ul> <ul> <li> <p>CDQ</p> <p>convert dword to qword</p> <p><code>edx:eax &lt;- eax</code></p> </li> </ul> <ul> <li> <p>movzx, movsx</p> <p><code>movzx r1, r2</code></p> <p><code>movsx r1, r2</code></p> </li> </ul>"},{"location":"asm/review.html#xlat","title":"XLAT","text":"<p>translate (xlate)</p> <p>ds:bx \u200b\u6307\u5411\u200b\u6570\u7ec4\u200b\u9996\u200b\u5730\u5740\u200b\uff0cal\u200b\u4e3a\u200boffset</p> <p><code>al = ds:[bx+al]</code></p>"},{"location":"asm/review.html#add","title":"ADD","text":"<ul> <li> <p>inc (\u200b\u4e0d\u200b\u5f71\u54cd\u200bCF)</p> <p>increment</p> </li> </ul> <ul> <li> <p>adc</p> <p>add with carry</p> <p><code>adc r1, r2</code> r1 = r1 + r2 + CF</p> </li> </ul> <ul> <li> <p>daa</p> <p>decimal adjust for addition \uff08\u200b\u8ba1\u7b97\u200bBCD\u200b\u7801\u200b\u52a0\u51cf\u6cd5\u200b\uff09</p> <pre><code>mov al 29h\nadd al 1 ; al = 2Ah\ndaa ; al = 30h  BCD(29) + 1 = BCD(30)\n</code></pre> </li> </ul>"},{"location":"asm/review.html#sub","title":"SUB","text":"<ul> <li> <p>dec (\u200b\u4e0d\u200b\u5f71\u54cd\u200bCF)</p> <p>decrement</p> </li> </ul> <ul> <li> <p>neg (\u200b\u7531\u4e8e\u200b\u672c\u8d28\u200b\u505a\u200b\u51cf\u6cd5\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u5f71\u54cd\u200bCF\uff0cZF\uff0cSF)</p> <p><code>neg register</code> register = 0 - register</p> </li> </ul> <ul> <li> <p>sbb (sub with borrow)</p> <p><code>sbb r1, r2</code> r1 = r1 - r2 - CF</p> </li> </ul>"},{"location":"asm/review.html#mul","title":"MUL","text":"<ul> <li> <p>8bit * 8bit</p> <p><code>ax = al * 8bit</code></p> </li> </ul> <ul> <li> <p>16bit * 16bit</p> <p><code>dx:ax = ax * 16bit</code></p> </li> </ul> <ul> <li> <p>32bit * 32bit</p> <p><code>edx:eax = eax * 32bit</code></p> </li> </ul> <ul> <li> <p>imul</p> <p><code>imul r1, r2 or [addr]</code> r1 *= r2 or var</p> </li> </ul> <ul> <li> <p>mul extended</p> <p><code>mul r1, r2, imm</code></p> <p>r1 = r2 * imm</p> </li> </ul>"},{"location":"asm/review.html#div","title":"DIV","text":"<ul> <li> <p>16bit / 8bit</p> <p><code>ax / (8bit) = al ... ah</code></p> </li> </ul> <ul> <li> <p>32bit / 16bit</p> <p><code>dx:ax / (16bit) = ax ... dx</code></p> </li> </ul> <ul> <li> <p>64bit / 32bit</p> <p><code>edx:eax / (32bit) = eax ... edx</code></p> </li> </ul> <ul> <li> <p>overflow</p> <ul> <li>div 0</li> <li>quotient overflow</li> </ul> <p>\u200b\u9664\u6cd5\u200b\u6ea2\u51fa\u200b\u89e6\u53d1\u200bint 00h\u200b\u4e2d\u65ad\u200b\uff0c\u200b\u81ea\u5b9a\u4e49\u200bint 00h\u200b\u4e2d\u65ad\u200b\u4f8b\u5b50\u200b</p> <pre><code>mov ax, 0\nmov es, ax\nmov word ptr es:[0], offset my_int_00h\nmov word ptr es:[2], cs\n</code></pre> </li> </ul>"},{"location":"asm/review.html#float","title":"Float","text":"<ul> <li> <p>\u200b\u8fd0\u7b97\u200b\u6307\u4ee4\u200b</p> <p>fadd, fsub, fmul, fdiv</p> <ul> <li><code>fadd st(a), st(b)</code> st(a) += st(b)</li> <li><code>fsub st(a), st(b)</code> st(a) -= st(b)</li> <li><code>fmul st(a) or [addr]</code>, st(0) *= x</li> <li><code>fdiv st(a) or [addr]</code>, st(0) *= x</li> </ul> </li> </ul> <ul> <li>fld (float load)</li> </ul> <ul> <li>fild (float load from integer)</li> </ul> <ul> <li>fst (store float to st(0))</li> </ul> <ul> <li> <p>fstp (pop st(0))</p> <p><code>fstp st(a) or [addr]</code>, dst = st(0)</p> </li> </ul>"},{"location":"asm/review.html#\u903b\u8f91\u8fd0\u7b97","title":"\u903b\u8f91\u8fd0\u7b97","text":"<ul> <li> <p>test</p> <p><code>test r1, r2</code> = <code>and r1, r2</code>(\u200b\u4e22\u5f03\u200b\u7ed3\u679c\u200b)</p> </li> </ul> <ul> <li> <p>cmp</p> <p><code>cmp r1, r2</code>= <code>sub r1, r2</code>\uff08\u200b\u4e22\u5f03\u200b\u7ed3\u679c\u200b\uff09</p> </li> </ul>"},{"location":"asm/review.html#shift","title":"Shift","text":"<ul> <li> <p>shl, shr</p> <p>\u200b\u903b\u8f91\u200b\u5de6\u79fb\u200b\uff0c\u200b\u903b\u8f91\u200b\u53f3\u79fb\u200b</p> </li> </ul> <ul> <li> <p>sal, sar</p> <p>\u200b\u7b97\u6570\u200b\u5de6\u79fb\u200b\uff0c\u200b\u7b97\u6570\u200b\u53f3\u79fb\u200b\uff08\u200b\u7b26\u53f7\u200b\u6269\u5c55\u200b\uff09</p> </li> </ul> <ul> <li> <p>rol, ror</p> <p>\u200b\u5faa\u73af\u200b\u79fb\u4f4d\u200b</p> </li> </ul> <ul> <li> <p>rcl, rcr</p> <p>\u200b\u5e26\u200b\u8fdb\u4f4d\u200b\u5faa\u73af\u200b\u79fb\u4f4d\u200b</p> <p>rcl : {CF, register}\u200b\u4f5c\u4e3a\u200b\u6574\u4f53\u200b\u5faa\u73af\u200b\u79fb\u4f4d\u200b</p> <p>rcr : {register, CF}\u200b\u4f5c\u4e3a\u200b\u6574\u4f53\u200b\u5faa\u73af\u200b\u79fb\u4f4d\u200b</p> </li> </ul>"},{"location":"asm/review.html#string","title":"String","text":"<ul> <li> <p>rep\u200b\u57fa\u672c\u200b\u7ed3\u6784\u200b</p> <pre><code>again:\nif(cx == 0)\n  goto done\n... ...\ncx--\n**je/jne done** repe repne\ngoto again\n</code></pre> </li> </ul> <ul> <li> <p>stosb, stosw, stosd</p> <p>es:di = al</p> </li> </ul> <ul> <li> <p>lodsb, lodsw, lodsd</p> <p>al = ds:si</p> </li> </ul> <ul> <li> <p>movsb, movsw, movsd</p> <pre><code>es:di = ds:si\nif(df == 0){\n  si++; di++;\n}else{\n  si--; di--;\n}\n</code></pre> </li> </ul> <ul> <li> <p>cmpsb, cmpsw, cmpsd</p> <pre><code>cmp es:di, ds:si\nif(df == 0){\n  si++; di++;\n}else{\n  si--; di--;\n}\n</code></pre> <p>\u200b\u5168\u7b49\u200b\u5224\u65ad\u200b\uff1a</p> <pre><code>repe cmpsb\nje equal\n... ...\n</code></pre> <p>\u200b\u53d6\u200b\u5230\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u76f8\u7b49\u200b\u5b57\u7b26\u200b\uff1a</p> <pre><code>repe cmpsb\ndec si\ndec di\n</code></pre> </li> </ul> <ul> <li> <p>scasb, scasw, scasd</p> <pre><code>cmp al, es:di\n</code></pre> <p>\u200b\u83b7\u53d6\u200b\u5b57\u7b26\u4e32\u200b\u957f\u5ea6\u200b\uff1a(\u200b\u5047\u8bbe\u200bds si\u200b\u5df2\u200b\u8d4b\u503c\u200b)</p> <pre><code>mov al, 0\nmov cx, 0FFFFh\nrepne scasb\nnot cx ; cx = FFFF-cx\ndec cx\n</code></pre> </li> </ul>"},{"location":"asm/review.html#loop","title":"Loop","text":"<p>\u200b\u5148\u200bcx--\uff0c\u200b\u518d\u200b\u5224\u65ad\u200bcx\u200b\u662f\u5426\u200b\u7b49\u4e8e\u200b0</p> <p>\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u9632\u6b62\u200bcx=0\u200b\u65f6\u200b\u8fdb\u5165\u200b\u5faa\u73af\u200b\uff0c\u200b\u4f7f\u7528\u200b<code>jcxz</code></p> <pre><code>jcxz done\nnext:\n... ...\nloop next\ndone:\n... ...\n</code></pre>"},{"location":"asm/review.html#jump","title":"Jump","text":"<ul> <li> <p>\u200b\u77ed\u200b\u8df3\u200b \uff08short jump EB_ _\uff09</p> <p><code>jmp offset or lable</code></p> <p>\u200b\u6240\u6709\u200b\u6761\u4ef6\u200bjmp\u200b\u90fd\u200b\u662f\u200b\u77ed\u200b\u8df3\u200b</p> <p>jmp\u200b\u7684\u200b\u673a\u5668\u7801\u200b\u4e3a\u200b\u76ee\u6807\u200b\u5730\u5740\u200b-\u200b\u4e0b\u200b\u4e00\u6761\u200bip\u200b\u5730\u5740\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u8fd1\u200b\u8df3\u200b\uff08near jump E9_ _ _ _\uff09</p> <p><code>jmp 1000h</code></p> <p><code>jmp ax</code></p> <p><code>jmp word ptr [addr]</code></p> </li> </ul> <ul> <li> <p>\u200b\u8fdc\u200b\u8df3\u200b\uff08far jump EA_ _ _ _ _ _ _ _\uff09</p> <p><code>jmp dword ptr [addr]</code></p> <p><code>jmp 1000:1000</code> \u200b\u9519\u8bef\u200b\uff0c\u200b\u4e0d\u200b\u652f\u6301\u200b\u5e38\u91cf\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200b\u673a\u5668\u7801\u200b\u5728\u200b\u4ee3\u7801\u6bb5\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u6570\u636e\u200b</p> <p>\u200b\u6bb5\u200b\u5730\u5740\u200b\uff1a\u200b\u504f\u79fb\u200b\u5730\u5740\u200b\u6309\u5c0f\u6bb5\u200b\u683c\u5f0f\u200b\u5b58\u653e\u200b\uff08\u200b\u6bb5\u200b\u5730\u5740\u200b\u5728\u200b\u9ad8\u200b\u5730\u5740\u200b\uff09</p> </li> </ul> <ul> <li> <p>\u200b\u6761\u4ef6\u200b\u8df3\u200b</p> <p>\u200b\u65e0\u200b\u7b26\u53f7\u200b\u6570\u200b\u6bd4\u8f83\u200b\uff1a</p> <ul> <li>ja (CF=0 &amp;&amp; ZF=0)</li> <li>jb (CF=1)</li> </ul> <p>\u200b\u6709\u200b\u7b26\u53f7\u200b\u6570\u200b\u6bd4\u8f83\u200b\uff1a(SF ^ OF) \u200b\u662f\u200b\u4e0d\u200b\u8003\u8651\u200b\u6ea2\u51fa\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u7684\u200b\u771f\u5b9e\u200b\u7b26\u53f7\u200b</p> <ul> <li>jg (SF==OF &amp;&amp; ZF==0)</li> <li>jl (SF != OF)</li> </ul> </li> </ul>"},{"location":"asm/review.html#call","title":"Call","text":"<ul> <li> <p>\u200b\u8fd1\u200b\u8c03\u7528\u200b\u4e0e\u200b\u8fdc\u200b\u8c03\u7528\u200b</p> <ul> <li>\u200b\u8fd1\u200b\u8c03\u7528\u200b f proc near... ... f endp</li> <li>\u200b\u8fdc\u200b\u8c03\u7528\u200b f proc ... ... f endp</li> </ul> </li> </ul> <ul> <li>\u200b\u53d8\u91cf\u200b\u4f20\u53c2\u200b\uff08\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff09</li> </ul> <ul> <li>\u200b\u5bc4\u5b58\u5668\u200b\u4f20\u53c2\u200b</li> </ul> <ul> <li> <p>\u200b\u5806\u6808\u200b\u4f20\u53c2\u200b\u7684\u200b\u4e09\u79cd\u200b\u65b9\u5f0f\u200b</p> <ul> <li> <p>__cdecl (c declare)</p> <p>\u200b\u4ece\u53f3\u5230\u5de6\u200b\u538b\u5165\u200b\u5806\u6808\u200b\uff0c\u200b\u5806\u6808\u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b\u7531\u200b\u8c03\u7528\u8005\u200b\uff08caller\uff09\u200b\u8d1f\u8d23\u200b\u6e05\u7406\u200b</p> </li> </ul> <ul> <li> <p>__pascal</p> <p>\u200b\u53c2\u6570\u200b\u4ece\u5de6\u5230\u53f3\u200b\u987a\u5e8f\u200b\u538b\u5165\u200b\u5806\u6808\u200b\uff0c\u200b\u88ab\u200b\u8c03\u7528\u8005\u200b\uff08callee\uff09\u200b\u6e05\u7406\u200b\u5806\u6808\u200b</p> <p>callee\u200b\u6e05\u7406\u200b\u793a\u4f8b\u200b\uff1a(ret n)</p> <pre><code>f:\npush bp\nmov bp, sp\nmov ax, [bp+6]\nadd ax, [bp+4]\npop bp\nret 4; pop ip, sp = sp + 4\n</code></pre> </li> </ul> <ul> <li> <p>__stdcall</p> <p>\u200b\u53c2\u6570\u200b\u4ece\u53f3\u5230\u5de6\u200b\u538b\u5165\u200b\u5806\u6808\u200b\uff0c\u200b\u7531\u200b\u88ab\u200b\u8c03\u7528\u8005\u200b\uff08callee\uff09\u200b\u6e05\u7406\u200b\u5806\u6808\u200b</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u52a8\u6001\u200b\u53d8\u91cf\u200b\uff08\u200b\u5c40\u90e8\u53d8\u91cf\u200b\uff09</p> <pre><code>push bp\nmov bp, sp\nsub sp, n ;\u200b\u5728\u200b\u5806\u6808\u200b\u4e0a\u200b\u5f00\u8f9f\u200bn bytes\u200b\u7a7a\u95f4\u200b\nmov [bp-2], ax ;\u200b\u7ed9\u200b\u7b2c\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\u8d4b\u503c\u200b\n... ...\nmov sp, bp\npop bp\n</code></pre> <p>[bp-x] \u200b\u5bfb\u627e\u200b\u5c40\u90e8\u53d8\u91cf\u200b\uff0c[bp+x] \u200b\u5bfb\u627e\u200b\u53c2\u6570\u200b</p> </li> </ul> <ul> <li> <p>callee saved registers</p> <p>bp, bx, si, di</p> </li> </ul>"},{"location":"asm/review.html#\u6df7\u5408\u7f16\u7a0b-todo","title":"\u6df7\u5408\u200b\u7f16\u7a0b\u200b TODO","text":"<pre><code>// naked \u200b\u4e0d\u8ba9\u200b\u7f16\u8bd1\u5668\u200b\u52a0\u5165\u200b\u5176\u5b83\u200b\u6307\u4ee4\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6784\u9020\u200b\u5806\u6808\u200b\u6846\u67b6\u200b\n__declspec(naked) int __stdcall f(int a, int b){\n    __asm\n    {\n        push ebp\n        mov ebp, esp\n        mov eax, [ebp+8]\n        add eax, [ebp+0Ch]\n        pop ebp\n        ret 8\n    }\n}\n</code></pre> <p>dos.bxrc \u200b\u641c\u7d22\u200bclock\uff0c\u200b\u6539\u6210\u200bsync=realtime, rtc_sync=1</p>"},{"location":"cytography/review.html","title":"\u8003\u8bd5\u5185\u5bb9","text":"<p> \u200b\u7ea6\u200b 2710 \u200b\u4e2a\u200b\u5b57\u200b  141 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 11 \u200b\u5206\u949f\u200b</p> <ul> <li>\u200b\u7406\u8bba\u200b50min\uff0c60\u200b\u5206\u200b\u5355\u9009\u9898\u200b</li> <li>\u200b\u5b9e\u9a8c\u200b80min<ul> <li>2\u200b\u9053\u200b\u51fd\u6570\u200b\u9898\u200b\uff08DES\uff0cAES\uff09</li> <li>2\u200b\u9053\u200b\u7a0b\u5e8f\u200b\u586b\u7a7a\u200b\uff08RSA\uff0cECC\uff09</li> </ul> </li> </ul> <ul> <li> \u200b\u53e4\u5178\u200b\u5bc6\u7801\u200b \uff08\u200b\u5355\u8868\u200b\u52a0\u5bc6\u200b\uff0c\u200b\u591a\u8868\u200b\u52a0\u5bc6\u200b\uff0c\u200b\u4eff\u5c04\u200b\u5bc6\u7801\u200b\uff09</li> <li> \u200b\u52a0\u6cd5\u200b\u9006\u5143\u200b\uff0c\u200b\u4e58\u6cd5\u200b\u9006\u5143\u200b</li> <li> enigma \uff08\u200b\u5404\u79cd\u200b\u90e8\u4ef6\u200b\uff0c\u200b\u539f\u7406\u200b\uff09</li> <li> MD5\uff0csha1 \uff08\u200b\u91cd\u70b9\u200b\u662f\u200b\u586b\u5145\u200b\uff09</li> <li> \u200b\u6d41\u200b\u5bc6\u7801\u200brc4 \uff08\u200b\u8981\u200b\u77e5\u9053\u200b\u4ee3\u7801\u200b\u600e\u4e48\u200b\u5199\u200b\uff09</li> <li> \u200b\u5206\u7ec4\u200b\u52a0\u5bc6\u200b</li> <li> DES\uff0csbox\u200b\u67e5\u8be2\u200b\uff0c\u200b\u5bc6\u94a5\u200b\u751f\u6210\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b\u6d41\u7a0b\u200b</li> <li> AES\uff0cmul column\uff0c\u200b\u519c\u592b\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b\u6d41\u7a0b\u200b</li> <li> RSA\uff0c\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b\u7b7e\u540d\u200b\u9a8c\u8bc1\u200b</li> <li> ECC\uff0c\u200b\u70b9\u200b\u52a0\u70b9\u200b\u4e58\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b\u7b7e\u540d\u200b\u9a8c\u8bc1\u200b</li> </ul>"},{"location":"cytography/review.html#\u6570\u5b66\u57fa\u7840","title":"\u6570\u5b66\u200b\u57fa\u7840","text":"<ul> <li> <p>\u200b\u6574\u9664\u200b</p> <p>\u200b\u82e5\u200b\u5b58\u5728\u200b\u6574\u6570\u200bk\u200b\u4f7f\u5f97\u200bb=a*k\uff0c\u200b\u5219\u200b\u79f0\u200ba\u200b\u6574\u9664\u200bb\uff0c\u200b\u8bb0\u200b\u4f5c\u200ba|b\u3002</p> </li> </ul> <ul> <li> <p>\u200b\u7d20\u6570\u200b\u4e0e\u200b\u4e92\u7d20\u200b</p> <p>gcd(a,b)=1</p> <p>\u200b\u4efb\u4e00\u200b\u6574\u6570\u200ba(a&gt;0)\u200b\u90fd\u200b\u80fd\u200b\u552f\u4e00\u200b\u5206\u89e3\u6210\u200b\u4ee5\u4e0b\u200b\u5f62\u5f0f\u200b:    \\(a = p1 * p2 * p3 * ... * pt\\) \u200b\u5176\u4e2d\u200b\\(p1\u3001p2\u3001p3\u3001...\u3001pt\\)\u200b\u662f\u200b\u7d20\u6570\u200b\u3002</p> </li> </ul> <ul> <li> <p>\u200b\u6700\u5927\u516c\u7ea6\u6570\u200b(greatest common divisor)</p> <p>\\(d=gcd(a,b)\\)\uff0c\u200b\u5219\u200b\u4e00\u5b9a\u200b\u5b58\u5728\u200b\u6574\u6570\u200b\\(x\u3001y\\)\u200b\u4f7f\u5f97\u200b\u4e0b\u200b\u5f0f\u200b\u6210\u7acb\u200b:</p> \\[a*x + b*y = d\\] </li> </ul> <ul> <li> <p>\u200b\u6a21\u200b(mod)\u200b\u8fd0\u7b97\u200b\u548c\u200b\u540c\u4f59\u200b(congruent)</p> <p>\\(a=b+n*k\\)(k\u200b\u4e3a\u200b\u6574\u6570\u200b)\uff0c\u200b\u6211\u4eec\u200b\u79f0\u200b</p> <p>a\u3001b\u200b\u5bf9\u4e8e\u200b\u6a21\u200bn\u200b\u540c\u4f59\u200b(a is congruent to b mod n)\uff0c</p> <p>\u200b\u8bb0\u200b\u4f5c\u200b: \\(a \u2261 b (\\bmod n)\\)</p> <ul> <li>\u200b\u5f53\u4e14\u200b\u4ec5\u200b\u5f53\u200b \\(b\u2261a (\\bmod n)\\)\u200b\u65f6\u200b, \u200b\u6709\u200b\\(a\u2261b (\\bmod n)\\)</li> <li>\u200b\u82e5\u200b\\(a\u2261b\\) \u200b\u4e14\u200b \\(b\u2261c (\\bmod n)\\)\uff0c\u200b\u5219\u200b\u4e00\u5b9a\u200b\u6709\u200b\\(a\u2261c (\\bmod n)\\)</li> <li>\u200b\u82e5\u200b\\(a\u2261b (\\bmod n)\\)\u200b\u4e14\u200b\\(c\u2261d (\\bmod n)\\)\uff0c\u200b\u5219\u200b\u6709\u200b      \\(a+c\u2261b+d, a-c\u2261b-d, a*c\u2261b*d (\\bmod n)\\)</li> </ul> </li> </ul> <ul> <li> <p>\u200b\u9006\u5143\u200b</p> <ol> <li> <p>\u200b\u52a0\u6cd5\u200b\u9006\u5143\u200b</p> <p>\u200b\u82e5\u200ba+b\u22610 (mod n), \u200b\u5219\u200b\u79f0\u200ba\u200b\u662f\u200bb\u200b\u7684\u200b\u52a0\u6cd5\u200b\u6a21\u200bn\u200b\u9006\u5143\u200b\uff0cb\u200b\u662f\u200ba\u200b\u7684\u200b\u52a0\u6cd5\u200b\u6a21\u200bn\u200b\u9006\u5143\u200b\u3002</p> <p>\u200b\u52a0\u5bc6\u200b\u8fc7\u7a0b\u200b: y = (x+3) % 26  \u200b\u89e3\u5bc6\u200b\u8fc7\u7a0b\u200b: x = (y+23) % 26\uff0c 23\u200b\u662f\u200b3\u200b\u7684\u200b\u52a0\u6cd5\u200b\u9006\u5143\u200b</p> </li> <li> <p>\u200b\u4e58\u6cd5\u200b\u9006\u5143\u200b ! ! !\uff08\u200b\u4ee3\u7801\u200b\u600e\u4e48\u200b\u5199\u200b\uff09</p> <p>\u200b\u82e5\u200b\\(a*b\u22611 (\\bmod n)\\), \u200b\u5219\u200b\u79f0\u200ba\u200b\u662f\u200bb\u200b\u7684\u200b\u4e58\u6cd5\u200b\u6a21\u200bn\u200b\u9006\u5143\u200b\uff0cb\u200b\u662f\u200ba\u200b\u7684\u200b\u4e58\u6cd5\u200b\u6a21\u200bn\u200b\u9006\u5143\u200b\u3002\\(a\\)\u200b\u7684\u200b\u4e58\u6cd5\u200b\u9006\u5143\u200b\u8bb0\u200b\u4f5c\u200b\\(a^{-1}\\)</p> <ul> <li> <p>\u200b\u6c42\u89e3\u200b\u4e58\u6cd5\u200b\u9006\u5143\u200b(\u200b\u6269\u5c55\u200b\u6b27\u51e0\u91cc\u5f97\u200b)</p> <p>\\(13 * x \u2261 1 mod(35)\\)</p> <p>\\(gcd(13, 35) = 1 \\rightarrow 13*x + 35*y = 1\\)</p> <p>\\(35=2*13+9\\) , \\(13=1*9+4\\), \\(9=2*4+1\\) </p> <p>\\(1 = 9-2*4\\), \u200b\u518d\u200b\u5c06\u200b9\u200b\u548c\u200b4\u200b\u9010\u6b65\u200b\u7531\u200b\u4e0a\u5f0f\u200b\u66ff\u6362\u200b</p> </li> </ul> </li> </ol> </li> </ul>"},{"location":"cytography/review.html#\u53e4\u5178\u5bc6\u7801","title":"\u53e4\u5178\u200b\u5bc6\u7801","text":"<ul> <li> <p>\u200b\u5355\u8868\u200b\u5bc6\u7801\u200b</p> <p>\u200b\u660e\u6587\u200b\u5bc6\u6587\u200b\u6709\u200b\u56fa\u5b9a\u200b\u5bf9\u5e94\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5bb9\u6613\u200b\u88ab\u200b\u9891\u7387\u200b\u5206\u6790\u200b</p> <ul> <li> <p>\u200b\u52a0\u6cd5\u200b\u5bc6\u7801\u200b \uff08\u200b\u51ef\u6492\u200b\u5bc6\u7801\u200b\uff09</p> <p>\u200b\u89e3\u5bc6\u200b\u65f6\u200b\u52a0\u4e0a\u200b\u52a0\u6cd5\u200b\u9006\u5143\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u4e58\u6cd5\u200b\u5bc6\u7801\u200b</p> <p>\u200b\u89e3\u5bc6\u200b\u65f6\u4e58\u200b\u4e0a\u200b\u4e58\u6cd5\u200b\u9006\u5143\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u4eff\u5c04\u200b\u5bc6\u7801\u200b</p> <p>\\(y = (x*k1 + k2) \\bmod n\\)</p> <p>\\(x = (y-k2)*k1^{-1} \\bmod n\\)</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u591a\u8868\u200b\u5bc6\u7801\u200b</p> <p>\u200b\u6bcf\u4e2a\u200b\u660e\u6587\u200b\u5b57\u6bcd\u200b\u53ef\u80fd\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u5355\u8868\u200b\u52a0\u5bc6\u200b</p> <p>\\(y = (x+k_i) \\bmod n\\) \\(x = (y-k_i) \\bmod n\\), \\(i\\) \u200b\u4e3a\u200b\u7b2c\u200bi\u200b\u5f20\u8868\u200b</p> <p> Enigma</p> <p>\u200b\u8f93\u5165\u200b\u660e\u6587\u200b\u540e\u200b\u9f7f\u8f6e\u200b\u5148\u200b\u8f6c\u52a8\u200b\u518d\u200b\u67e5\u8868\u200b\uff1a</p> <ol> <li> <p>\u200b\u5148\u200b\u901a\u8fc7\u200b\u63a5\u7ebf\u677f\u200bplugboard \uff08\u200b\u6253\u4e71\u200b\uff09</p> <p>\\(\\mathcal A \\leftarrow plug[\\mathcal A]\\)</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u53f3\u4fa7\u200b\u7b2c\u4e00\u4e2a\u200b\u9f7f\u8f6e\u200b</p> <p>Message Key\u200b\u4e3a\u200b\u9f7f\u8f6e\u200b\u5916\u90e8\u200b\u8bbe\u7f6e\u200b\uff08\u200b\u5916\u90e8\u200b\u5c55\u793a\u200b\u7684\u200b\u5b57\u6bcd\u200b\uff09</p> <p>Ring Setting\u200b\u4e3a\u200b\u5185\u90e8\u200b\u8bbe\u7f6e\u200b</p> <p>\\(\\delta = MessageKey - RingSetting\\)</p> <p>\\(\\mathcal A \\leftarrow (rotor[(\\mathcal A + \\delta)\\bmod26] - \\delta)\\bmod26\\)</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u53f3\u200b2\u30013\u200b\u9f7f\u8f6e\u200b</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u53cd\u5c04\u677f\u200breflector</p> <p>\u200b\u53cd\u5c04\u677f\u200b\u8f93\u5165\u8f93\u51fa\u200b\u4e0d\u4f1a\u200b\u76f8\u540c\u200b\uff0c\u200b\u7531\u6b64\u200b\u63a8\u51fa\u200benigma\u200b\u660e\u6587\u200b\u5bc6\u6587\u200b\u4e0d\u540c\u200b\u3002</p> </li> <li> <p>\u200b\u53cd\u5411\u200b\u901a\u8fc7\u200b\u53f3\u200b3\u200b\u9f7f\u8f6e\u200b</p> <p>\\(\\delta = MessageKey - RingSetting\\)</p> <p>\\(\\mathcal A \\leftarrow (rotor^{-1}[(\\mathcal A + \\delta)\\bmod26] - \\delta)\\bmod26\\)</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u53f3\u200b2\u30011\u200b\u9f7f\u8f6e\u200b\uff0c\u200b\u63a5\u7ebf\u677f\u200b</p> </li> </ol> <p>5\u200b\u4e2a\u200b\u9f7f\u8f6e\u200b\u7684\u200b\u8fdb\u4f4d\u200b\uff1a\\(QEVJZ \\rightarrow RFWKA\\)</p> <p>double stepping: \u200b\u53f3\u200b2\u200b\u9f7f\u8f6e\u200b\u518d\u200b\u5373\u5c06\u200b\u8fdb\u4f4d\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u53f3\u200b1\u200b\u662f\u5426\u200b\u8fdb\u4f4d\u200b\uff0c\u200b\u90fd\u200b\u5c06\u200b\u5e26\u52a8\u200b\u53f3\u200b2\u200b\u65cb\u8f6c\u200b</p> </li> </ul>"},{"location":"cytography/review.html#hash-\u51fd\u6570","title":"Hash \u200b\u51fd\u6570","text":"<ul> <li> <p>MD5</p> <p>\u200b\u6458\u8981\u200b\uff0c\u200b\u6709\u635f\u538b\u7f29\u200b</p> <ul> <li>\\(M_1=m_0+m_1\\) \\(M_2=m_0+m_2\\)   \u200b\u5f53\u200b\\(md5(m_1)==md5(m_2)\\)\u200b\u65f6\u200b\uff0c\u200b\u6709\u200b   \\(md5(M_1) == md5(M_2)\\)</li> </ul> <ul> <li> <p>\u200b\u5206\u5757\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6bcf\u5757\u200b64 bytes\u3002</p> <p>\u200b\u672b\u5c3e\u200b\u586b\u5145\u200b\uff1a0x80, (0x00), 8\u200b\u5b57\u8282\u200bmessage\u200b\u603b\u200b\u4f4d\u6570\u200b*\uff08\u200b\u4e0d\u200b\u542b\u200b\u586b\u5145\u200b\uff0c\u200b\u5c0f\u7aef\u200b\uff09</p> <p>0x80\u200b\u5fc5\u987b\u200b\u6709\u200b\uff0c0x00\u200b\u53ef\u4ee5\u200b\u6ca1\u6709\u200b\uff0c\u200b\u81f3\u5c11\u200b\u9700\u8981\u200b9bytes</p> <p>\u200b\u6700\u540e\u200b\u4e00\u5757\u200b\u5b57\u8282\u6570\u200b \\(\\geq 56\\) \u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u5f00\u8f9f\u200b\u65b0\u200b\u7684\u200b\u4e00\u5757\u200b</p> <p>\u200b\u6700\u540e\u200b\u4e00\u5757\u200b\u5b57\u8282\u6570\u200b\\(\\leq 55\\) \u200b\u65f6\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5728\u200b\u5f53\u524d\u200b\u5757\u200b\u586b\u5145\u200b\u5373\u53ef\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u5f69\u8679\u200b\u8868\u200b\u7834\u89e3\u200bmd5</p> <p>\u200b\u8ba1\u7b97\u200b\u957f\u4e3a\u200bn\u200b\u4e2a\u200b\u5b57\u6bcd\u200b\u7684\u200b\u5f69\u8679\u200b\u8868\u200b\uff0c\\(P(n)\\) \u200b\u8868\u793a\u200b\u7b2c\u200b\\(n\\)\u200b\u79cd\u200b\u6392\u5217\u200b</p> <pre><code>for(i=1; i&lt;BigNum; i++){\n    n0 = rand();\n    m[0] = MD5(P(n0));\n    for(int j=1; j&lt;=100; j++){\n        nj = m[j-1] mod 26^4;\n        m[j] = MD5(P(nj));\n    }\n    DB_Insert(m[100], n0);\n}\n</code></pre> <p>\u200b\u67e5\u627e\u200bM\u200b\u662f\u200b\u7531\u200b\u4ec0\u4e48\u200b\u751f\u6210\u200b\u7684\u200b\uff1a</p> <pre><code>int n0;\nwhile(!DB_Query(M, n0)){\n    ni = M mod 26^4;\n    M = MD5(P(ni));\n}\n// \u200b\u62ff\u5230\u200bn0\uff0c\u200b\u7136\u540e\u200b\u6309\u200b\u8ba1\u7b97\u200b\u5f69\u8679\u200b\u8868\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u7b97\u200b\u51fa\u200bM\u200b\u5bf9\u5e94\u200b\u7684\u200bn\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>SHA</p> <p>sha-1\u200b\u6563\u5217\u200b\u7b97\u6cd5\u200b\u8ba1\u7b97\u51fa\u6765\u200b\u7684\u200bhash\u200b\u503c\u8fbe\u200b160\u200b\u4f4d\u200b\uff0c\u200b\u5373\u200b20\u200b\u5b57\u8282\u200b\uff0c\u200b\u6bd4\u200bmd5\u200b\u591a\u200b\u4e86\u200b32\u200b\u4f4d\u200b</p> <p>64\u200b\u5b57\u8282\u200b\u5206\u5757\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u586b\u5145\u200b\u65b9\u5f0f\u200b\u4e0e\u200bMD5\u200b\u76f8\u540c\u200b</p> </li> </ul>"},{"location":"cytography/review.html#\u5206\u7ec4\u5bc6\u7801\u4e0e\u6d41\u5bc6\u7801","title":"\u5206\u7ec4\u200b\u5bc6\u7801\u200b\u4e0e\u200b\u6d41\u200b\u5bc6\u7801","text":"<ul> <li> <p>\u200b\u7535\u5b50\u200b\u5bc6\u7801\u7c3f\u200bECB(Electronic codebook)</p> <p>\u200b\u660e\u6587\u200b\u88ab\u200b\u5206\u6210\u200b\u957f\u5ea6\u200b\u76f8\u7b49\u200b\u7684\u200b\u6bb5\u200b(64 bit)\uff0c\u200b\u6bcf\u200b\u6bb5\u200b\u5206\u522b\u200b\u7528\u200b\u540c\u6837\u200b\u65b9\u5f0f\u200b\u52a0\u5bc6\u200b\u3002</p> <p>\u200b\u7f3a\u70b9\u200b\uff1a\u200b\u76f8\u540c\u200b\u7684\u200b\u660e\u6587\u200b\u6bb5\u200b\u5bc6\u6587\u200b\u76f8\u540c\u200b\u3002\u200b\u4f18\u70b9\u200b\uff1a\u200b\u53ef\u4ee5\u200b\u5e76\u884c\u5904\u7406\u200b</p> <p>\u200b\u52a0\u5bc6\u200b\u8fc7\u7a0b\u200b\uff1a\\(C_j = E_k(P_j)\\) \uff08\\(k\\)\u200b\u4e3a\u200b\u5bc6\u94a5\u200b\uff0c \\(P_j\\)\u200b\u4e3a\u200b\u7b2c\u200b\\(j\\)\u200b\u6bb5\u200b\u660e\u6587\u200b\uff0c\\(C_j\\)\u200b\u4e3a\u200b\u7b2c\u200b\\(j\\)\u200b\u6bb5\u200b\u5bc6\u6587\u200b\uff09 \u200b\u89e3\u5bc6\u200b\u8fc7\u7a0b\u200b\uff1a\\(P_j = D_k(C_j)\\)</p> </li> </ul> <ul> <li> <p>\u200b\u5bc6\u6587\u200b\u5757\u200b\u94fe\u63a5\u200b\u6a21\u5f0f\u200bCBC(Cipher block chaining)</p> <p>\u200b\u7b2c\u200b\\(j\\)\u200b\u5757\u200b(64 bit)\u200b\u660e\u6587\u200b\u7684\u200b\u52a0\u5bc6\u200b\u4e0e\u200b\u7b2c\u200b\\(j-1\\)\u200b\u7684\u200b\u5bc6\u6587\u200b\u76f8\u5173\u200b</p> <p>\u200b\u52a0\u5bc6\u200b\u8fc7\u7a0b\u200b\uff1a  \\(C_j = E_k(P_j \u2295 C_{j-1})\\)  \u200b\u89e3\u5bc6\u200b\u8fc7\u7a0b\u200b\uff1a  \\(P_j = D_k(C_j)\u2295 C_{j-1}\\)</p> </li> </ul> <ul> <li> <p>\u200b\u5bc6\u6587\u200b\u5757\u200b\u53cd\u9988\u200bCFB(Cipher block feedback)</p> <p>8 bit \u200b\u5757\u200b\u5927\u5c0f\u200b\uff0c\u200b\u89e3\u5bc6\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u5bc6\u6587\u200b\u7684\u200b\u9519\u8bef\u200b\u4e2d\u200b\u6062\u590d\u200b\uff0c\u200b\u5bc6\u6587\u200b\u67d0\u5904\u200b\u7684\u200b\u9519\u8bef\u200b\u53ea\u6709\u200b\u6709\u9650\u200b\u7684\u200b\u5f71\u54cd\u200b\u8303\u56f4\u200b</p> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b\u8fc7\u7a0b\u200b</p> <p>\u200b\u5148\u200b\u521d\u59cb\u5316\u200b64 bit\\(X_1\\)</p> <p>\\(C_j = P_j \u2295 E_k(X_j)[63:56]\\)</p> <p>\\(X_{j+1} = \\{X_j[63:8], C_j)\\)</p> </li> </ul> <ul> <li> <p>\u200b\u89e3\u5bc6\u200b\u8fc7\u7a0b\u200b</p> <p>\\(P_j = C_j \u2295 D_k(X_j)[63:56]\\) \\(X_{j+1} = \\{X_j[63:8], C_j)\\) </p> <p>\u200b\u7531\u4e8e\u200b\\(X\\)\u200b\u6bcf\u8f6e\u200b\u5de6\u79fb\u200b8\u200b\u4f4d\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9519\u8bef\u200b\u7684\u200b\u5bc6\u6587\u200b\u5728\u200b8\u200b\u8f6e\u540e\u200b\u5c31\u200b\u4f1a\u200b\u88ab\u200b\u79fb\u8d70\u200b\uff0c\u200b\u4ece\u800c\u200b\u4ece\u200b\u9519\u8bef\u200b\u4e2d\u200b\u6062\u590d\u200b</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u8868\u683c\u200b</p> \u200b\u52a0\u5bc6\u200b\u65b9\u6cd5\u200b \u200b\u52a0\u5bc6\u200b\u5757\u200b\u5927\u5c0f\u200b ECB \u200b\u5bf9\u200b\u660e\u6587\u200b\u5206\u5757\u200b\u52a0\u5bc6\u200b\uff0c \\(Cipher_j = Encrypt_k(\\mathbf {Plain\\_text_j})\\) 64 bits CBC \u200b\u5bf9\u200b\u660e\u6587\u200b\u548c\u200b\u4e0a\u200b\u4e00\u6bb5\u200b\u5bc6\u6587\u200b\u5171\u540c\u200b\u52a0\u5bc6\u200b\uff0c\\(Cipher_j = Encrypt_k(\\mathbf {Plain\\_text_j}\u2295 \\mathbf {Cipher_{j-1}})\\)\uff0c \u200b\u7b2c\u4e00\u6bb5\u200b\u7528\u200bIV 64 bits CFB \u200b\u5bf9\u200bIV\u200b\u52a0\u5bc6\u200b\uff0c\\(Cipher_j = \\mathbf {Plain\\_text_j} \u2295 Encrypt_k(\\mathbf {X_j})[63:56]\\) IV\u200b\u52a0\u5bc6\u200b\u540e\u200b\uff0c\u200b\u53d6\u9ad8\u200b8\u200b\u4f4d\u200b\u5f02\u6216\u200b\u660e\u6587\u200b\uff0c\u200b\u66f4\u65b0\u200bIV\u200b\u7684\u200b\u4f4e\u200b8\u200b\u4f4d\u200b 8 bits </li> </ul> <ul> <li> <p>\u200b\u6d41\u200b\u5bc6\u7801\u200bRC4</p> <ul> <li> <p>Prepare key \u200b\u5171\u200b256bytes</p> <p>Init \\(s[i] = i, i \\in [0,256)\\)</p> <pre><code>for(int i=0, j=0; i&lt;256; i++){\n    j = (j + s[i] + seed[i%seed_len]) % 256;\n    swap(s[i], s[j]);\n}\n</code></pre> </li> </ul> <ul> <li> <p>Encrypt/Decrypt (byte-wise)</p> <p>\u200b\u5bf9\u200b\u660e\u6587\u200b\u7684\u200b\u5904\u7406\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u5f02\u6216\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200bkey</p> <p>\u200b\u64cd\u4f5c\u200b\u5168\u5728\u200bkey\u200b\u4e0a\u200b</p> <pre><code>for(int i=0, j=0; i&lt;input_len; i++){\n    j = (j + s[i%256]) % 256;\n    swap(s[i%256], s[j]);\n    xor_index = (s[i%256] + s[j]) % 256;\n    input[i] ^= s[xor_index];\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"cytography/review.html#des","title":"DES","text":"<p>\u200b\u5bc6\u94a5\u200b\u592a\u77ed\u200b\uff0864 bit \u200b\u5bc6\u94a5\u200b\u5b9e\u9645\u200b56 bit\u200b\u88ab\u200b\u4f7f\u7528\u200b\uff09</p> <p>\u200b\u53d7\u200b\u5dee\u5206\u200b\u5206\u6790\u653b\u51fb\u200b</p> <p>sbox\u200b\u672a\u516c\u5f00\u200b\uff0c\u200b\u53ef\u80fd\u200b\u6709\u200b\u540e\u95e8\u200b</p> <p>\u200b\u5171\u200b16\u200b\u8f6e\u200b\uff08\u200b\u5de6\u53f3\u200b\u90e8\u5206\u200b\u5206\u522b\u200b\u88ab\u200b\u52a0\u5bc6\u200b8\u200b\u6b21\u200b\uff09\uff08\u200b\u4f4d\u200b\u7684\u200b\u7f16\u53f7\u200b\u4e3a\u5927\u7aef\u200b\uff09 \u200b\u5355\u5b57\u8282\u200b\uff0c\u200b\u4e0d\u200b\u5206\u200b\u5927\u5c0f\u200b\u7aef\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u5de6\u8fb9\u200b\u9ad8\u4f4d\u200b\uff0c\u200b\u53f3\u8fb9\u200b\u4f4e\u4f4d\u200b</p> <ul> <li> <p>\u200b\u5bc6\u94a5\u200b\u7684\u200b\u5904\u7406\u200b</p> <ul> <li> <p>\u200b\u539f\u200b\u5bc6\u94a5\u200b64 bit -&gt; 56 bit</p> <p>\u200b\u901a\u8fc7\u200b<code>key_perm_table</code> \u200b\u51fd\u6570\u200b\u8ba1\u7b97\u200b\u5f97\u5230\u200b\\(\\mathcal K_0\\)</p> </li> </ul> <ul> <li> <p>\u200b\u6bcf\u8f6e\u200b\u52a0\u5bc6\u200b\u5bc6\u94a5\u200b\u7684\u200b\u8ba1\u7b97\u200b</p> <p>\u200b\u5de6\u200b28\u200b\u4f4d\u548c\u53f3\u200b28\u200b\u4f4d\u200b\u5206\u522b\u200b\u5faa\u73af\u200b\u5de6\u79fb\u200b\u6307\u5b9a\u200b\u4f4d\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u67e5\u8868\u200b\u7f29\u51cf\u200b\u4e3a\u200b48\u200b\u4f4d\u200b</p> <p>\\(\\mathcal K_i = to48(rol(\\mathcal K_0[55:28], key\\_rol\\_steps[i]), rol(\\mathcal K_0[27:0], key\\_rol\\_steps[i]))\\)</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b\u8fc7\u7a0b\u200b</p> <p>\u200b\u5148\u5bf9\u200b\u660e\u6587\u200b\u6253\u4e71\u200b\uff08initial permutation\uff09</p> <p>\u200b\u6267\u884c\u200b16\u200b\u6b21\u200b\u5faa\u73af\u200b\uff0c\u200b\u5947\u6570\u200b\u8f6e\u200b\u5bf9\u200b\u5de6\u8fb9\u200b\u52a0\u5bc6\u200b</p> <pre><code>des_encrypt()\n{\n  for(i=1; i&lt;=16; i++){\n        if(i%2 == 1){ //\u200b\u5947\u6570\u200b\u8f6e\u200b\u5bf9\u200b\u5de6\u8fb9\u200b\u52a0\u5bc6\u200b\n            L[i] = L[i-1] ^ f(K[i], R[i-1]); // K\u200b\u4e3a\u200b\u7b2c\u200bk\u200b\u8f6e\u200b\u7684\u200b48bit\u200b\u5bc6\u94a5\u200b\n            R[i] = R[i-1];\n        }else{\n            R[i] = R[i-1] ^ f(K[i], L[i-1]);\n            L[i] = L[i-1];\n        }\n  }\n    swap(L[i], R[i]);\n}\n</code></pre> <ul> <li> <p>f \u200b\u51fd\u6570\u200b</p> <ol> <li> <p>\u200b\u8fdb\u5165\u200b\u660e\u6587\u200b\u4e3a\u200b32 bit\uff0c\u200b\u5148\u200b\u6269\u5145\u200b\u4e3a\u200b48 bit\uff0c\u200b\u4e0e\u200b\u5bc6\u94a5\u200b\u7b49\u200b\u957f\u200b</p> </li> <li> <p>\u200b\u660e\u6587\u200b\u4e0e\u200b\u5bc6\u94a5\u200b\u5f02\u6216\u200b\uff088\u200b\u7ec4\u200b\uff0c\u200b\u6bcf\u7ec4\u200b6 bit\uff09</p> </li> <li> <p>6 bit\u200b\u4e00\u7ec4\u200b\uff0c\u200b\u5171\u200b8\u200b\u7ec4\u200b\u3002\u200b\u5206\u522b\u200b\u8fdb\u5165\u200bsbox\uff0c\u200b\u83b7\u5f97\u200b8\u200b\u7ec4\u200b4 bit\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5171\u200b32 bit</p> <p>sbox\u200b\u67e5\u8be2\u200b</p> <p><code>sbox[8][64]</code> (<code>sbox[8][4][16]</code>)\uff0c\u200b\u7b2c\u4e00\u200b\u7ef4\u5373\u200b\u4e3a\u200b\u7ec4\u200b\u7684\u200b\u7f16\u53f7\u200b\uff0c\u200b\u5c06\u200b\u6bcf\u7ec4\u200b\uff086bit\uff09\u200b\u6362\u7b97\u200b\u540e\u200b\uff0c\u200b\u5e26\u5165\u200b\u7b2c\u4e8c\u200b\u7ef4\u200b\u3002</p> <p>\u200b\u4f8b\u200b\uff1a\u200b\u7b2c\u96f6\u200b\u7ec4\u4e3a\u200b<code>6'b1_0011_0</code>, \u200b\u5219\u200b<code>sbox[0][6'b10_0011]</code>\u200b\u6216\u200b <code>sbox[0][2'b10][4'b0011]</code></p> <p>sbox\u200b\u8f93\u5165\u200b6 bit\uff0c\u200b\u8f93\u51fa\u200b4 bit</p> </li> <li> <p>32 bit\u200b\u7ed3\u679c\u200b\u518d\u6b21\u200b\u6253\u4e71\u200b</p> </li> </ol> </li> </ul> <p>\u200b\u5bf9\u200b\u5bc6\u6587\u200b\u53cd\u200b\u6253\u4e71\u200b\uff08final permutation\uff09</p> </li> </ul> <ul> <li> <p>\u200b\u5dee\u5206\u200b\u5206\u6790\u200b </p> <p>\u200b\u5dee\u5206\u200b\u5206\u6790\u200b\u5bf9\u4e8e\u200b\u52a0\u5bc6\u200b\u8f6e\u6570\u200b\u5c11\u200b\u7684\u200b\u60c5\u51b5\u200b\u8bd5\u7528\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u8f6e\u6570\u200b\u591a\u200b\u4e86\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u6ca1\u6709\u200b\u663e\u8457\u200b\u51cf\u5c11\u200b</p> <p>\u200b\u5047\u8bbe\u200b\u53ea\u200b\u52a0\u5bc6\u200b\u4e09\u8f6e\u200b\uff0c\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u4efb\u610f\u200b\u660e\u6587\u200b\u5bf9\u200b\\(L_0, R_0\\) \u200b\u548c\u200b\u5bc6\u6587\u200b\u5bf9\u200b \\(L_3, R_3\\)</p> <ol> <li> <p>\u200b\u7b2c\u4e00\u8f6e\u200b</p> <p>\\(L1 = L0 \\oplus f(R0, K1), R1 = R0\\)</p> </li> <li> <p>\u200b\u7b2c\u4e8c\u8f6e\u200b</p> <p>\\(R2 = R1 \\oplus f(L1, K2),   L2 = L1\\)</p> </li> <li> <p>\u200b\u7b2c\u4e09\u8f6e\u200b</p> <p>\\(L3 = L2 \\oplus f(R2, K3) = L1 \\oplus f(R2, K3) = L0 \\oplus f(R0, K1) \\oplus f(R2, K3)  L3 = L0 \\oplus f(R0, K1) \\oplus f(R3, K3)\\)</p> <p>\u200b\u6b64\u65f6\u200b\u53ea\u6709\u200bK\u200b\u662f\u200b\u672a\u77e5\u200b\uff0c\u200b\u5f00\u59cb\u200b\u5dee\u5206\u200b\u5206\u6790\u200b</p> </li> </ol> <ul> <li> <p>\u200b\u6539\u53d8\u200b\\(L_0\\)\uff0c \\(R_0\\)\u200b\u4e0d\u53d8\u200b</p> <p>\\(L3 = L0 \\oplus f(R0, K1) \\oplus f(R3, K3)\\)</p> <p>\\(\\tilde L3 = \\tilde L0 \\oplus f(\\tilde R0, K1) \\oplus f(\\tilde R3, K3)\\)</p> <p>\\(L3 \\oplus L3  =(L0\\oplus \\tilde L0) \\oplus (f(R0, K1) \\oplus f(\\tilde R0, K1)) \\oplus (f(R3, K3)\\oplus f(\\tilde R3, K3))\\)</p> <p>\\(=(L0\\oplus \\tilde L0) \\oplus (0) \\oplus (f(R3, K3)\\oplus f(\\tilde R3, K3))\\)</p> <p>\\(=L0\u2019 \\oplus f(R3, K3)\\oplus f(\\tilde R3, K3)\\)</p> <p>\\(=L0\u2019 \\oplus sbox(E(R3)\\oplus K3)\\oplus sbox(E(\\tilde R3)\\oplus K3)\\)</p> <p>\\(sbox(E(R3)\\oplus K3)\\oplus sbox(E(\\tilde R3)\\oplus K3) = sbox(E(R3)\\oplus E(\\tilde R3) )\\)\u200b\u5df2\u77e5\u200b</p> <p>\u200b\u8fd9\u65f6\u200b\u6839\u636e\u200b\u5404\u79cd\u200b\u9650\u5236\u200b\u6761\u4ef6\u200b\uff0c\u200b\u679a\u4e3e\u200b\\(E(R3) \\oplus K3\\) \u200b\u5373\u53ef\u200b</p> </li> </ul> </li> </ul>"},{"location":"cytography/review.html#aes","title":"AES","text":"<ul> <li> <p>\u200b\u6709\u9650\u200b\u57df\u200b\\(GF(2^n)\\)</p> <p>\u200b\u57df\u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u53ef\u200b\u8868\u793a\u200b\u4e3a\u200b\u591a\u9879\u5f0f\u200b\\(f(x) = a_{n-1}x^{n-1} + a_{n-2}x^{n-2} + \u2026 + a_1x + a_0\\), \u200b\u5176\u4e2d\u200b\\(a_i \\in \\{0,1\\}\\)</p> <p>\u200b\u4e5f\u200b\u53ef\u200b\u8868\u793a\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\\(n\\)\u200b\u4f4d\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u200b\\(\\{a_{n-1}, a_{n-2}, \\dots,a_0\\}\\)\u3002</p> <ul> <li> <p>\u200b\u52a0\u6cd5\u200b</p> <p>\\(a(x) + b(x) = (a(x) + b(x)) \\bmod p(x)\\), \\(p(x)\\)\u200b\u662f\u200b\u4e0d\u53ef\u200b\u7ea6\u200b\u591a\u9879\u5f0f\u200b.</p> <p>\u200b\u7b49\u540c\u4e8e\u200b\\(\\sum_0^{n-1} (a_i\\oplus b_i)x^i \\bmod p(x)\\)</p> </li> </ul> <ul> <li> <p>\u200b\u4e58\u6cd5\u200b</p> <p>\\(a(x) * b(x) = (a(x) * b(x)) \\bmod p(x)\\), \\(p(x)\\)\u200b\u662f\u200b\u4e0d\u53ef\u200b\u7ea6\u200b\u591a\u9879\u5f0f\u200b</p> <p>\u200b\u6a21\u62df\u200b\u4e8c\u8fdb\u5236\u200b\u7ad6\u5f0f\u200b\u4e58\u6cd5\u200b\uff0c\u200b\u52a0\u6cd5\u200b\u9075\u5faa\u200b\u6709\u9650\u200b\u57df\u200b\u89c4\u5219\u200b</p> <ul> <li> <p>\u200b\u519c\u592b\u200b\u7b97\u6cd5\u200b\uff088 bit, mod 0x11B\uff09</p> <pre><code>// input x, y (8 bit), p = x * y\nunsigned int p = 0; /* the product of the multiplication */\nint i;\nfor (i=0; i &lt; 8; i++)\n{\n  if (y &amp; 1) /* if y is odd, then add the corresponding y to p */\n     p ^= x; /* since we're in GF(2^m), addition is an XOR */\n  y &gt;&gt;= 1;   /* equivalent to y/2 */\n  x &lt;&lt;= 1;   /* equivalent to x*2 */\n  if (x &amp; 0x100) /* GF modulo: if x &gt;= 256, then apply modular reduction */\n     x ^= 0x11B; /* XOR with the primitive polynomial x^8 + x^4 + x^3 + x + 1 */\n}\n</code></pre> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u9006\u5143\u200b</p> <p>\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u52a0\u6cd5\u200b\u9006\u5143\u200b\u5c31\u662f\u200b\u4ed6\u200b\u672c\u8eab\u200b.</p> <p>\\(\\sum_0^{n-1} (a_i\\oplus a_i)x^i \\bmod p(x) = \\sum_0^{n-1} 0 *x^i \\bmod p(x) = 0\\)</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b\u6d41\u7a0b\u200b</p> <p>\u200b\u660e\u6587\u200b\u957f\u5ea6\u200b128bit\uff0c\u200b\u5bc6\u94a5\u200b\u957f\u5ea6\u200b128bit\uff08\u200b\u5faa\u73af\u200b10\u200b\u8f6e\u200b\uff09\u3001192bit\uff0812\u200b\u8f6e\u200b\uff09\u3001256bit\uff0814\u200b\u8f6e\u200b\uff09</p> <ul> <li> <p>\u200b\u5bc6\u94a5\u200b\u751f\u6210\u200b\uff08128bit\uff09</p> <p>\u200b\u6bcf\u200b16byte\u200b\u4e3a\u200b\u4e00\u7ec4\u200b\u751f\u6210\u200b\uff0c\u200b\u6700\u200b\u5f00\u59cb\u200b16byte\u200b\u4e3a\u200b\u79cd\u5b50\u200b\u5bc6\u94a5\u200b\u3002\u200b\u5171\u200b11\u200b\u7ec4\u200b\uff08\u200b\u5305\u542b\u200b\u79cd\u5b50\u200b\uff09</p> <p>\u200b\u8bbe\u200b\\(i \u2261 0 \\bmod 4\\), k \u200b\u662f\u200b4 byte\u200b\u5927\u5c0f\u200b</p> <ol> <li> <p>\\(k[i] = k[i-1]\\)</p> </li> <li> <p>\\(rol(k[i], 1\\_byte)\\)</p> </li> <li> <p>\\(ByteSub(k[i])\\)  k[i] \u200b\u6bcf\u4e2a\u200b\u5b57\u8282\u200b\u8fc7\u200bsbox</p> </li> <li>\\(r = 2^{(i-4)/4} \\bmod 0x11B\\) (\u200b\u6709\u9650\u200b\u57df\u200b\u4e58\u6cd5\u200b) \u200b\u67e5\u8868\u200b\uff1a<code>0x01 0x02 0x04 0x08 0x10 0x20 0x40 0x80 0x1B 0x36</code></li> <li>\\(k[i]\\) \u200b\u9996\u200b\u5b57\u8282\u200b \u200b\u5f02\u6216\u200b \\(r\\)</li> <li>\\(k[i] \\oplus k[i-4]\\)</li> <li>\\(k[i+1] = k[i] \\oplus k[i-3], k[i+2] = k[i+1] \\oplus k[i-2], k[i+3] = k[i+2] \\oplus k[i-1]\\)</li> </ol> </li> </ul> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b</p> <p>\u200b\u7b2c\u200b0\u200b\u8f6e\u200b\uff0c\u200b\u53ea\u200b\u505a\u200bAddRoundKey\uff08\u200b\u660e\u6587\u200b\u4e0e\u200b\u5bc6\u94a5\u200b\u5f02\u6216\u200b\uff09</p> <pre><code>for(i=1; i&lt;=key_rounds; i++)\n{  \n  /* \u200b\u7b2c\u200b1\u200b\u81f3\u200bkey_rounds\u200b\u8f6e\u200b, \u200b\u505a\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b: ByteSub, ShiftRow, MixColumn, AddRoundKey */\n\n  /*\n    p[j] = sbox[p[j]];\n  */\n  ByteSub((unsigned char *)matrix, 16);\n\n  /*\n    \u200b\u5c06\u200bmatrix\u200b\u4e2d\u200b\u5143\u7d20\u200b\uff0c\u200b\u4ee5\u5217\u200b\u4e3b\u5e8f\u200b\u6392\u5217\u200b \uff08\u200b\u76f8\u5f53\u4e8e\u200b\u8f6c\u7f6e\u200b\uff09\n  */\n  my_MixColumnInverse((unsigned char *)matrix, a, 0); /* \u200b\u4e0d\u200b\u505a\u200b\u4e58\u6cd5\u200b, \u200b\u53ea\u200b\u505a\u200b\u77e9\u9635\u200b\u884c\u200b\u8f6c\u5217\u200b */\n\n  /*\n    \u200b\u5bf9\u200b\u77e9\u9635\u200b\u6bcf\u884c\u200b\u5de6\u79fb\u200b i-1 \u200b\u5b57\u8282\u200b\n  */  \n  ShiftRow((unsigned char *)matrix);\n\n  /*\n    \u200b\u6700\u540e\u200b\u4e00\u8f6e\u200b\u4e0d\u200b\u505a\u200b\u4e58\u6cd5\u200b\n  */\n  if(i != key_rounds)\n     MixColumn((unsigned char *)matrix, a, 1); /* do mul */\n  else\n     MixColumn((unsigned char *)matrix, a, 0); /* don't mul */\n\n  /*\n    \u200b\u660e\u6587\u200b\u5bc6\u94a5\u200b\u5f02\u6216\u200b\n  */\n  AddRoundKey((unsigned char *)matrix, key+i*(4*4));\n}\n</code></pre> <ul> <li> <p>MixColumn</p> <p>\u200b\u53d6\u200b\u77e9\u9635\u200b\u7684\u200b\u6bcf\u200b\u4e00\u5217\u200b\u4e0e\u200b 3 1 1 2 \u200b\u505a\u200b\u591a\u9879\u5f0f\u200b\u4e58\u6cd5\u200b(\\(\\bmod x^4 + 1\\))\uff0c\u200b\u5176\u4e2d\u200b\u7cfb\u6570\u200b\u4e58\u6cd5\u200b\u9075\u5faa\u200b\u6709\u9650\u200b\u57df\u200b\u89c4\u5219\u200b</p> <p>\u200b\u89e3\u5bc6\u200b\u4e58\u200b B D 9 E</p> <p>\\(\\left[ \\begin{array}{} 2 &amp; 3 &amp; 1 &amp; 1\\\\ 1 &amp; 2 &amp; 3 &amp; 1 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 \\\\ 3 &amp; 1 &amp; 1 &amp; 2 \\end{array} \\right] * \\mathbf{col}\\)</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"cytography/review.html#rsa","title":"RSA","text":"<ul> <li> <p>\u200b\u57fa\u672c\u200b\u5143\u7d20\u200b</p> <ul> <li>\u200b\u5927\u200b\u7d20\u6570\u200b \\(p,q\\)</li> <li>\\(n = p*q\\)</li> <li>\\(e\\) (\u200b\u901a\u5e38\u200b\u4e3a\u200b10001\uff0c\u200b\u5e94\u200b\u4e0e\u200b\\((p-1)(q-1)\\)\u200b\u4e92\u7d20\u200b) </li> <li>\\(d = e^{-1} \\bmod (p-1)(q-1)\\)</li> <li>\u200b\u516c\u94a5\u200b \\((e, n)\\)</li> <li>\u200b\u79c1\u94a5\u200b\\((d, n)\\)</li> </ul> </li> </ul> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b</p> <p>\\(c = m^e \\bmod n\\)</p> </li> </ul> <ul> <li> <p>\u200b\u89e3\u5bc6\u200b</p> <p>\\(m = c^d \\bmod n\\)</p> </li> </ul> <ul> <li> <p>\u200b\u660e\u6587\u200b\u7684\u200b\u5904\u7406\u200b</p> <p>\u200b\u660e\u6587\u200b\\(m\\)\u200b\u4e0e\u200b\\(n\\)\u200b\u4f4d\u6570\u200b\u76f8\u540c\u200b\uff0c\u200b\u4e14\u200b\u8981\u6c42\u200b\\(m &lt; n\\). \u200b\u8981\u4e0d\u7136\u200bmod\u200b\u540e\u200b\u4fe1\u606f\u200b\u5c31\u200b\u6ca1\u200b\u4e86\u200b\u3002</p> <p>\u200b\u901a\u5e38\u200b\u505a\u6cd5\u200b\u662f\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u8282\u200b\u586b\u200b0\uff0c\u200b\u771f\u6b63\u200b\u7684\u200b\u660e\u6587\u200b\u540e\u79fb\u200b\u3002</p> <p>TODO\uff1aPKCS1</p> </li> </ul> <ul> <li> <p>\u200b\u7b7e\u540d\u200b</p> <p>\u200b\u521b\u5efa\u200b\u7b7e\u540d\u200b\uff1a\\(RSA(MD5(m), private\\_key)\\)</p> <p>\u200b\u68c0\u67e5\u200b\u7b7e\u540d\u200b\uff1a\\(RSA(Signature, public\\_key) == MD5(m)\\)</p> <p>\u200b\u7b7e\u540d\u200b\u7528\u200b\u79c1\u94a5\u200b\u52a0\u5bc6\u200b\uff0c\u200b\u516c\u94a5\u200b\u89e3\u5bc6\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u9700\u8981\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u80fd\u200b\u9a8c\u8bc1\u200b\u3002</p> <p>\u200b\u52a0\u5bc6\u200b\u7528\u516c\u94a5\u200b\u52a0\u5bc6\u200b\uff0c\u200b\u79c1\u94a5\u200b\u89e3\u5bc6\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ea\u200b\u60f3\u8981\u200b\u4e00\u4e2a\u200b\u4eba\u80fd\u200b\u770b\u5230\u200b\u3002</p> </li> </ul> <ul> <li> <p>\u200b\u76f8\u5173\u200b\u63a5\u53e3\u200b</p> <pre><code>// \u200b\u5927\u6570\u200b\u76f8\u5173\u200b\nBIGNUM *pn;\npn = BN_new();\nBN_CTX *ctx = BN_CTX_new();\n// RSA \u200b\u7ed3\u6784\u200b\nRSA *prsa = RSA_new();\nprsa-&gt;flags |= RSA_FLAG_NO_BLINDING;\nprsa-&gt;n = pn; // \u200b\u8bbe\u7f6e\u200bn\nprsa-&gt;e = pe; // \u200b\u8bbe\u7f6e\u200b\u516c\u94a5\u200b\nprsa-&gt;d = pd; // \u200b\u8bbe\u7f6e\u200b\u79c1\u94a5\u200b\n/*\n* \u200b\u5bc6\u94a5\u200b\u751f\u6210\u200b\n* key_bits\u200b\u4e3a\u200bn\u200b\u957f\u5ea6\u200b\uff0c\u200b\u662f\u200bpq\u200b\u957f\u5ea6\u200b\u7684\u200b\u4e24\u500d\u200b\n*/\nRSA *prsa = RSA_new();\nprsa = RSA_generate_key(key_bits, 0x10001, NULL, NULL);\n/*\n* \u200b\u516c\u94a5\u200b\u52a0\u5bc6\u200b\n* flen\u200b\u662f\u200b\u8981\u200b\u52a0\u5bc6\u200b\u7684\u200b\u660e\u6587\u200b\u957f\u5ea6\u200b\n* \u200b\u79c1\u94a5\u200b\u52a0\u5bc6\u200b\u540c\u7406\u200b\n*/\nn = RSA_size(prsa); // RSA modulus size\n// \u200b\u65e0\u200b\u586b\u5145\u200b\uff0c\u200b\u660e\u6587\u200b\u957f\u5ea6\u200b\u6700\u5927\u200b\u4e3a\u200bRSA_size\nRSA_public_encrypt(flen, bufin, bufout, prsa, RSA_NO_PADDING); // \u200b\u516c\u94a5\u200b\u52a0\u5bc6\u200b\nRSA_private_decrypt(flen, bufin, bufout, prsa, RSA_NO_PADDING); // \u200b\u79c1\u94a5\u200b\u89e3\u5bc6\u200b\n// PKCS1 \u200b\u586b\u5145\u200b\uff0c\u200b\u660e\u6587\u200b\u957f\u5ea6\u200b\u6700\u5927\u200b\u4e3a\u200bRSA_size - 11\nRSA_public_encrypt(flen, bufin, bufout, prsa, RSA_PKCS1_PADDING); // \u200b\u516c\u94a5\u200b\u52a0\u5bc6\u200b\nRSA_private_decrypt(flen, bufin, bufout, prsa, RSA_PKCS1_PADDING); // \u200b\u79c1\u94a5\u200b\u89e3\u5bc6\u200b\n</code></pre> </li> </ul> <ul> <li> <p>\u200b\u8c03\u7528\u200b\u5927\u6570\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b</p> <pre><code>BN_CTX *ctx = BN_CTX_new();\nBN_bin2bn(bufin, n, pin); // \u200b\u957f\u4e3a\u200bn\u200b\u7684\u200b\u5927\u7aef\u200b\u683c\u5f0f\u200b\u6570\u200bbufin \u200b\u8f6c\u200b\u5927\u6570\u200bpin\nBN_mod_exp(pout, pin, pe, pn, ctx); // pout = pin^pe mod pn \u200b\u5927\u6570\u200b\u5e26\u4f59\u200b\u4e58\u65b9\u200b\nBN_bn2bin(pout, bufout)\uff1b // \u200b\u5927\u6570\u200b\u8f6c\u5927\u7aef\u200bbufout\n</code></pre> </li> </ul>"},{"location":"cytography/review.html#ecc","title":"ECC","text":"<ul> <li> <p>\u200b\u692d\u5706\u200b\u66f2\u7ebf\u200b\u7684\u200b\u8fd0\u7b97\u200b\u89c4\u5219\u200b</p> <p>\u200b\u5b9a\u4e49\u200b\\(\\mathcal O\\) \u200b\u4e3a\u200b\u96f6\u200b\u5143\u7d20\u200b\uff0c\\(P+\\mathcal O = P, \\mathcal O +P = P\\)</p> <p></p> <p>\\(P+Q=R', R+R' = \\mathcal O\\)</p> <p>\\(\\exist n, \\sum^n P = n*P=\\mathcal O\\), \\(n\\) \u200b\u5c31\u662f\u200b\\(P\\) \u200b\u7684\u200b\u9636\u200b\u3002 \u200b\u66f2\u7ebf\u200b\u4e0a\u70b9\u200b\u7684\u200b\u4e2a\u6570\u200b\u5c31\u662f\u200b\u66f2\u7ebf\u200b\u7684\u200b\u9636\u200b\u3002</p> <p>\u200b\u5f53\u200b\\(k\\)\u200b\u5f88\u5927\u200b\u65f6\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\\(Q=k*P\\), \u200b\u6c42\u200b\\(k\\)\u200b\u5f88\u200b\u56f0\u96be\u200b\u3002</p> </li> </ul> <ul> <li> <p>\u200b\u51b3\u5b9a\u200b\u692d\u5706\u200b\u66f2\u7ebf\u200b\u7684\u200b6\u200b\u8981\u7d20\u200b</p> <ul> <li> <p>\u200b\u65b9\u7a0b\u200b\u53c2\u6570\u200b \\(a, b, p\\)</p> <p>\\(y^2 = x^3 + ax + b (\\bmod p)\\)</p> </li> </ul> <ul> <li>\u200b\u57fa\u70b9\u200b\\(G\\), (\u200b\u66f2\u7ebf\u200b\u4e0a\u200b\u968f\u4fbf\u200b\u9009\u200b\u4e00\u4e2a\u200b)</li> <li>\\(G\\)\u200b\u7684\u200b\u9636\u200b</li> <li>\u200b\u4f59\u56e0\u5b50\u200b \uff08\\(G\\)\u200b\u7684\u200b\u9636\u200b/\u200b\u57fa\u70b9\u200b\u7684\u200b\u9636\u200b\uff0c\u200b\u901a\u5e38\u200b\u4e3a\u200b1\uff0c\u200b\u5373\u200b\u57fa\u70b9\u200b\u6240\u5728\u200b\u5b50\u7fa4\u200b\u7b49\u4e8e\u200b\u539f\u6765\u200b\u7684\u200b\u7fa4\u200b\uff09</li> </ul> </li> </ul> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b\u89e3\u5bc6\u200b</p> <p>\u200b\u79c1\u94a5\u200b\uff1a\u200b\u968f\u673a\u6570\u200b\\(d\\)</p> <p>\u200b\u516c\u94a5\u200b\uff1a\\(R = d * G\\)</p> <ul> <li> <p>\u200b\u52a0\u5bc6\u200b</p> <p>\\(r = k * G\\)\uff0c \u200b\u4e0d\u53ef\u200b\u6c42\u6a21\u200b</p> <p>\\(s = m * (k * R)\\) (\\(s = m*(d * r)\\))</p> <p>\\(\\{r.x, (s.x)\\bmod n\\}\\)\u200b\u7ec4\u6210\u200b\u5bc6\u6587\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u89e3\u5bc6\u200b \uff08r.y \u200b\u968f\u4fbf\u200b\u9009\u200b\u4e00\u4e2a\u200b\uff09</p> <p>\\(m = (s.x/(d*r).x )\\bmod n\\)</p> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u7b7e\u540d\u200b</p> <ul> <li> <p>ecdsa</p> <ul> <li> <p>\u200b\u7b7e\u540d\u200b</p> <p>\\(r = ((k*G).x) \\bmod n\\)</p> <p>\\(s = (m+r*d)/k\\)\uff0c \u200b\u4e0d\u53ef\u200b\u6c42\u6a21\u200b</p> </li> </ul> <ul> <li> <p>\u200b\u9a8c\u8bc1\u200b</p> <p>\\(((m/s)*G+(r/s)*R).x == r\\)</p> </li> </ul> </li> </ul> <ul> <li> <p>ecnr</p> <ul> <li> <p>\u200b\u7b7e\u540d\u200b</p> <p>\\(r = (k*G).x + m \\bmod n\\)</p> <p>\\(s = k-r*d \\bmod n\\), \u200b\u53ef\u4ee5\u200b\u6c42\u6a21\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u9a8c\u8bc1\u200b\u65f6\u200b\\(s*G = (s \\bmod n)*G\\)</p> </li> </ul> <ul> <li> <p>\u200b\u9a8c\u8bc1\u200b</p> <p>\\(r - (s*G+r*R).x == m\\)</p> </li> </ul> </li> </ul> </li> </ul> <ul> <li> <p>\u200b\u76f8\u5173\u200b\u63a5\u53e3\u200b</p> <pre><code>EC_GROUP *group = EC_GROUP_new(EC_GFp_mont_method()); // \u200b\u65b0\u5efa\u200b\u7fa4\u200b\nEC_GROUP_set_curve_GFp(group, p, a, b, ctx); // \u200b\u8bbe\u7f6e\u200b\u66f2\u7ebf\u200b\u65b9\u7a0b\u200b\u53c2\u6570\u200b\nG = EC_POINT_new(group); // \u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u66f2\u7ebf\u200b\u4e0a\u200b\u7684\u200b\u70b9\u200b\uff0c\u200b\u4ec5\u200b\u5206\u914d\u200b\u7a7a\u95f4\u200b\nEC_POINT_set_affine_coordinates_GFp(group, G, gx, gy, ctx); // \u200b\u6839\u636e\u200bgx, gy\u200b\u8bbe\u7f6e\u200b\u70b9\u200bG\u200b\u5750\u6807\u200b\nEC_POINT_set_compressed_coordinates_GFp(group, G, gx, 0, ctx); // \u200b\u8bbe\u7f6e\u200b\u70b9\u200bG\u200b\u5750\u6807\u200b(\u200b\u4ec5\u200b\u8f93\u5165\u200bgx)\nEC_POINT_get_affine_coordinates_GFp(group, T, tx, ty, ctx); // \u200b\u5c06\u70b9\u200b\u5750\u6807\u200b\u8f93\u51fa\u200b\u5230\u200b\u5927\u6570\u200b\n/*\n* \u200b\u8bbe\u7f6e\u200bgroup\u200b\u751f\u6210\u5143\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u4e3a\u200b\u4f59\u56e0\u5b50\u200b\uff0c\u200b\u4e00\u822c\u200b\u4e3a\u200b1\n*/\nEC_GROUP_set_generator(group, G, n, BN_value_one());\nEC_POINT_set_to_infinity(group, T); // \u200b\u5c06\u200bT\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u65e0\u7a77\u8fdc\u200b\u70b9\u200b\n/*\n* \u200b\u70b9\u52a0\u200b T = T + G\n*/\nEC_POINT_add(group, T, T, G, ctx);\n/*\n* \u200b\u70b9\u200b\u4e58\u200b\n* r = G*m + P*n.\n* \u200b\u82e5\u200bm,p,n\u200b\u6709\u200bnull\uff0c\u200b\u5bf9\u5e94\u200b\u7684\u200b\u9879\u200b\u4e0d\u200b\u505a\u200b\u8ba1\u7b97\u200b\u3002\n* G\u200b\u4e3a\u200b\u751f\u6210\u5143\u200b\n*/\nEC_POINT_mul(const EC_GROUP *, EC_POINT *r, const BIGNUM *m, \n             const EC_POINT *P, const BIGNUM *n, BN_CTX *ctx);\n\nEC_GROUP_free(group); // \u200b\u91ca\u653e\u200b\u7fa4\u200b\n\nBN_mod_inverse(tx, tx, n, ctx); // \u200b\u5927\u6570\u200b\u5e26\u4f59\u6c42\u200b\u9006\u200b\n</code></pre> </li> </ul>"},{"location":"gitlab/index.html","title":"GitLab CI/CD","text":"<p> \u200b\u7ea6\u200b 162 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"gitlab/index.html#\u5185\u5bb9\u4e00\u89c8","title":"\u5185\u5bb9\u200b\u4e00\u89c8","text":""},{"location":"gitlab/index.html#\u96f6\u6563\u5185\u5bb9","title":"\u96f6\u6563\u200b\u5185\u5bb9","text":"<p>Predefined Variables</p> <p>.gitlab-ci.yml \u200b\u6307\u5b9a\u200b GitLab CI/CD \u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8981\u200b\u6267\u884c\u200b job \u200b\u7684\u200b\u7ed3\u6784\u200b\u548c\u200b\u987a\u5e8f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u9047\u5230\u200b\u4ec0\u4e48\u200b\u6761\u4ef6\u200b\u65f6\u200b\u5e94\u5f53\u200b\u505a\u200b\u4ec0\u4e48\u200b\u4e8b\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b job \u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b script section\uff0c\u200b\u5e76\u200b\u5c5e\u4e8e\u200b\u4e00\u4e2a\u200b stage\u3002stage \u200b\u63cf\u8ff0\u200b\u4e86\u200b job \u200b\u7684\u200b\u6267\u884c\u200b\u987a\u5e8f\u200b\uff1astage \u200b\u4e2d\u200b\u7684\u200b job \u200b\u4f1a\u200b\u5e76\u884c\u6267\u884c\u200b\uff1b\u200b\u540e\u9762\u200b\u7684\u200b stage \u200b\u4e2d\u200b\u7684\u200b job \u200b\u4f1a\u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200b stage \u200b\u4e2d\u200b\u7684\u200b job \u200b\u6267\u884c\u200b\u5b8c\u6bd5\u200b\u540e\u200b\u518d\u200b\u6267\u884c\u200b\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>needs</code> \u200b\u5173\u952e\u5b57\u200b\u6765\u81ea\u200b\u5b9a\u4e49\u200b job \u200b\u4e4b\u95f4\u200b\u7684\u200b\u4f9d\u8d56\u200b\u548c\u200b\u6267\u884c\u200b\u987a\u5e8f\u200b\u3002</p> <p><code>rule</code> \u200b\u5236\u5b9a\u200b\u4f55\u65f6\u200b\u8fd0\u884c\u200b\u6216\u200b\u8df3\u200b\u8fc7\u200b\u4e00\u4e2a\u200b job\uff1b\u200b\u65e7\u7248\u672c\u200b\u4e2d\u200b\u7684\u200b <code>only</code> \u200b\u548c\u200b <code>except</code> \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200b <code>rule</code> \u200b\u6765\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"gitlab/artifacts.html","title":"\u7528\u200b GitLab CI Artifacts \u200b\u5728\u200b Job \u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u6587\u4ef6","text":"<p> \u200b\u7ea6\u200b 289 \u200b\u4e2a\u200b\u5b57\u200b  58 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p> <p>\u200b\u9884\u5907\u200b\u77e5\u8bc6\u200b</p> <p>\u200b\u672c\u6587\u200b\u9884\u8bbe\u200b\u8bfb\u8005\u200b\u638c\u63e1\u200b GitLab CI/CD \u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5\u200b\uff0c\u200b\u4ee5\u53ca\u200b <code>.gitlab-ci.yml</code> \u200b\u7684\u200b\u57fa\u672c\u200b\u8bed\u6cd5\u200b\u3002</p> <p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b job \u200b\u662f\u200b\u72ec\u7acb\u200b\u8fd0\u884c\u200b\u7684\u200b\uff0c\u200b\u5f7c\u6b64\u200b\u4e0d\u200b\u5171\u4eab\u8d44\u6e90\u200b\u3002\u200b\u4f46\u662f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>cache</code> \u200b\u548c\u200b <code>artifacts</code> \u200b\u5728\u200b job \u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u6587\u4ef6\u200b\u3002</p> <ul> <li><code>cache</code> \u200b\u7528\u4e8e\u200b\u5728\u200b\u4e92\u8054\u7f51\u200b\u4e0a\u200b\u4e0b\u8f7d\u200b\u4f9d\u8d56\u200b\uff1a\u200b\u5982\u679c\u200b\u4f9d\u8d56\u200b\u9879\u200b\u76f8\u540c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u540c\u4e00\u4e2a\u200b pipeline \u200b\u4e2d\u200b\u7684\u200b\u540e\u7eed\u200b job \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u7f13\u5b58\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff0c\u200b\u800c\u200b\u4e0d\u5fc5\u200b\u91cd\u65b0\u200b\u4e0b\u8f7d\u200b\u3002</li> <li><code>artifacts</code> \u200b\u7528\u4e8e\u200b\u5728\u200b job \u200b\u4e4b\u95f4\u200b\u4f20\u9012\u200b\u6587\u4ef6\u200b\uff1a\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b job \u200b\u751f\u6210\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u90a3\u4e48\u200b\u540e\u7eed\u200b\u7684\u200b job \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u4e0b\u8f7d\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u3002</li> </ul> <p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cjobs \u200b\u4f1a\u200b\u4ece\u200b\u524d\u9762\u200b\u6240\u6709\u200b stages \u200b\u5b8c\u6210\u200b\u7684\u200b jobs \u200b\u4e2d\u200b\u4e0b\u8f7d\u200b\u6240\u6b32\u200b artifacts (ref)\uff0c\u200b\u4f46\u662f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>dependencies</code> \u200b\u5173\u952e\u5b57\u200b\u6765\u200b\u663e\u5f0f\u200b\u6307\u5b9a\u200b\u8981\u200b\u4ece\u200b\u54ea\u4e9b\u200b jobs \u200b\u4e0b\u8f7d\u200b\u3002\u200b\u4f8b\u5982\u200b\u6307\u5b9a\u200b <code>dependencies: []</code> \u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u4ece\u200b\u4efb\u4f55\u200b job \u200b\u4e0b\u8f7d\u200b\u3002</p> <pre><code>default:\n  image: ubuntu:18.04\n\nstages:\n  - s1\n  - s2\n  - s3\n\nj1.1:\n  stage: s1\n  script:\n    - echo \"j1.1\" &gt; j1.1.txt\n  artifacts:\n    paths:\n    - j1.1.txt\n\nj2.1:\n  stage: s2\n  script:\n    - ls\n    - cat j1.1.txt\n    - echo \"j2.1\" &gt; j2.txt\n  artifacts:\n    paths:\n    - j2.txt\n\nj2.2:\n  stage: s2\n  script:\n    - ls\n    - cat j1.1.txt\n    - echo \"j2.2\" &gt; j2.txt\n  artifacts:\n    paths:\n    - j2.txt\n\nj3.1:\n  stage: s3\n  script:\n    - ls\n    - cat j2.txt\n</code></pre> <p>\u200b\u770b\u770b\u200b\u5b83\u200b\u5e72\u200b\u4e86\u200b\u4ec0\u4e48\u200b\uff1a</p> <pre><code>Downloading artifacts\n\nDownloading artifacts for j1.1 (1620568)...\nDownloading artifacts from coordinator... ok        id=1620568 responseStatus=200 OK token=64_n_zpG\nDownloading artifacts for j2.1 (1620569)...\nDownloading artifacts from coordinator... ok        id=1620569 responseStatus=200 OK token=64_n_zpG\nDownloading artifacts for j2.2 (1620570)...\nDownloading artifacts from coordinator... ok        id=1620570 responseStatus=200 OK token=64_n_zpG\n\nExecuting \"step_script\" stage of the job script\n\n$ ls\nREADME.md\nj1.1.txt\nj2.txt\n$ cat j2.txt\nj2.2\n</code></pre> <p>\u200b\u5373\u200b\uff0cj3.1 \u200b\u5c1d\u8bd5\u200b\u4ece\u200b\u524d\u9762\u200b 3 \u200b\u4e2a\u200b jobs \u200b\u4e2d\u200b\u4e0b\u8f7d\u200b artifacts\uff0c\u200b\u5176\u4e2d\u200b\u6765\u81ea\u200b j2.1 \u200b\u7684\u200b artifact \u200b\u88ab\u200b j2.2 \u200b\u7684\u200b\u540c\u540d\u200b artifact \u200b\u8986\u76d6\u200b\u4e86\u200b\u3002</p>"},{"location":"gitlab/artifacts.html#\u5e94\u7528\u5728\u4e0d\u540c\u7684-stages-\u4e2d\u5b8c\u6210\u6d4b\u8bd5\u5728\u6700\u540e\u4e00\u4e2a-stage-\u4e2d\u7edf\u8ba1-coverage","title":"\u5e94\u7528\u200b\uff1a\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b stages \u200b\u4e2d\u200b\u5b8c\u6210\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u5728\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b stage \u200b\u4e2d\u200b\u7edf\u8ba1\u200b coverage","text":""},{"location":"note-oop/Class.html","title":"Class","text":"<p> \u200b\u7ea6\u200b 96 \u200b\u4e2a\u200b\u5b57\u200b  19 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Class.html#resolvers-","title":"Resolvers (::)","text":"<p>Pure '::' resolves to global</p> <pre><code>void f(){} // Global f();\n\nclass A{\npublic:\n    void f(){\n        ::f(); // Call global f();\n    }\n};\n</code></pre>"},{"location":"note-oop/Class.html#ctors","title":"Ctors","text":"<p>If a ctor with argument is defined, default ctor will not be generated automatically.</p> <pre><code>class A{\npublic:\n    A(int x){}\n};\n\nA a; // Compile error. No default ctor\n</code></pre>"},{"location":"note-oop/Class.html#constant-object","title":"Constant object","text":"<p>Constant object can only call constant functions:</p> <pre><code>void func() const ;\n</code></pre>"},{"location":"note-oop/Class.html#constant-members","title":"Constant members","text":"<p>Has to be initialized in the ctor's list.</p>"},{"location":"note-oop/Class.html#compile-time-constants","title":"Compile time constants","text":"<p>Needs to be static and const.</p> <p>static const member needs not be declared outside the class and can be assigned inside the class.</p> <pre><code>class A{\n    static const int size = 10;\n    int arr[size];\n};\n</code></pre>"},{"location":"note-oop/Class.html#inline","title":"Inline","text":"<p>inline in c++ means multiple definition is allowed (in linking multiple compile units).</p> <p>multiple definition still not allowed in compiling.</p> <p>Put inline functions' body in the header file.</p>"},{"location":"note-oop/Composition%20and%20Inheritance.html","title":"Composition and Inheritance","text":"<p> \u200b\u7ea6\u200b 121 \u200b\u4e2a\u200b\u5b57\u200b  92 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Composition%20and%20Inheritance.html#composition","title":"Composition","text":"<ul> <li> <p>\\(A\\) has \\(B,C\\).</p> <p>\\(A\\) is composed of \\(B\\) and \\(C\\) </p> <p>\\(B,C\\) is the embedded object of \\(A\\), usually made private.</p> </li> </ul> <ul> <li> <p>Ctors</p> <pre><code>class A{\n  B b;\n    C c;\npublic:\n    A(args...) : b(...), c(...) {}\n};\n</code></pre> <p>If sub-constructors not exist in init-list, default ctor will be called.</p> </li> </ul>"},{"location":"note-oop/Composition%20and%20Inheritance.html#inheritance","title":"Inheritance","text":"<ul> <li> <p>\\(B\\) is a \\(A\\)</p> <p>Accessibility of members in \\(A\\)</p> <p></p> <p>Accessibility inheritance.</p> <p></p> </li> </ul> <ul> <li> <p>Ctors</p> <pre><code>class B : public A{\npublic:\n  B(...) : A(...) {}\n};\n</code></pre> <p>Base class always constructed first.</p> <p>Order:</p> <p>Base class ctors -&gt; members (w.r.t. members' definition order, not order in init-list) -&gt; My ctor body. </p> </li> </ul> <ul> <li> <p>Call base class functions</p> <p>Only public and protected base class functions can be called.</p> <pre><code>A::func();\n</code></pre> <pre><code>// Compile error\nclass A{\npublic:\n    A(){cout &lt;&lt; \"A::A()\" &lt;&lt; endl;}\n    int f1(){}\nprivate:\n    int f2(){}\n};\n\nclass B : public A{\npublic:\n    int f1() {A::f2();}\n};\n</code></pre> <p>If you redefine a member function in the derived class, all the other overloaded functions in the base class are inaccessible.</p> <pre><code>class A{\npublic:\n    A(){cout &lt;&lt; \"A::A()\" &lt;&lt; endl;}\n    int f1(){}\n    int f1(int x){}\n};\n\nclass B : public A{\npublic:\n    void f1() {A::f1(1);}\n};\n\nint main(){\n    B b;\n    b.f(2); // Compile error !!!\n}\n</code></pre> </li> </ul> <ul> <li> <p>Friends</p> <p>Grant access to a function or class to access my members.</p> <pre><code>class A{\n    int x;\n    friend int get_x(A a);\n    friend class B;\n};\n\nclass B{\npublic:\n    void f(A a){ a.x = 1; }\n};\n\nint get_x(A a){ return a.x; }\n</code></pre> </li> </ul> <ul> <li> <p>Virtual Inheritance</p> <pre><code>class A{\npublic:\n    A(int x) : a(x) { cout &lt;&lt; \"A:A(int)\" &lt;&lt; x &lt;&lt; endl;}\nprotected:\n    int a;\n};\n\nclass B : virtual public A{\npublic:\n    B() : A(5) /*Not called*/ { cout &lt;&lt; \"B:B()\" &lt;&lt; A::a &lt;&lt; endl;}\n};\n\nclass C : virtual public A{\npublic:\n    C() : A(10) /*Not called*/ { cout &lt;&lt; \"C:C()\" &lt;&lt; A::a &lt;&lt; endl;}\n};\n\nclass D : public A{\npublic:\n    D() : A(15) { cout &lt;&lt; \"D:D()\" &lt;&lt; endl;}\n};\n\nclass E : public B, public C, public D{\npublic:\n    E() : A(25), B(), C(), D()  { cout &lt;&lt; \"E:E()\" &lt;&lt; B::a &lt;&lt; \" \" &lt;&lt; C::a &lt;&lt; \" \" &lt;&lt; D::a &lt;&lt; endl;}\n};\nint main(){\n    E e;\n    return 0;\n}\n/*B,C,E shares the same A*/\n/*D has its own A*/\n/*\nA:A(int)25\nB:B()25\nC:C()25\nA:A(int)15\nD:D()\nE:E()25 25 15\n*/\n</code></pre> </li> </ul>"},{"location":"note-oop/CopyCtor.html","title":"Copy Constructor","text":"<p> \u200b\u7ea6\u200b 33 \u200b\u4e2a\u200b\u5b57\u200b  14 \u200b\u884c\u200b\u4ee3\u7801\u200b </p> <p>Only necessary to be written manually when there exists member of pointer type.</p>"},{"location":"note-oop/CopyCtor.html#when-copy-ctors-are-called","title":"When Copy Ctors are called","text":"<ul> <li> <p>Initialize from other object</p> <pre><code>A a(b);\nA a = b; // equivalent to A a(b)\n</code></pre> </li> </ul> <ul> <li> <p>Function call by value</p> <pre><code>void f(A a);\n</code></pre> </li> </ul> <ul> <li> <p>Function return</p> <pre><code>A f(){\n  A a;\n  return a;\n}\n\nA f2(){\n  return A();\n}\nA b = f(); // Copy Ctor is called\nA c = f2(); // Copy Ctor not called\n</code></pre> </li> </ul>"},{"location":"note-oop/CopyCtor.html#forbid-copy-ctor","title":"Forbid Copy Ctor","text":"<pre><code>A(const A&amp; other) = delete;\n</code></pre>"},{"location":"note-oop/Exception.html","title":"Exception","text":"<p> \u200b\u7ea6\u200b 198 \u200b\u4e2a\u200b\u5b57\u200b  34 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Exception.html#raise-an-exception","title":"Raise an exception","text":"<pre><code>throw &lt;&lt;something&gt;&gt; // something can be any thing\n</code></pre> <p>Function will stop here, </p> <p>clean up the stack (call destructors of all local variables), </p> <p>and make its caller responsible</p> <p>A good article of detailed demonstration of how exception works! click</p>"},{"location":"note-oop/Exception.html#handle-an-exception","title":"Handle an exception","text":"<ul> <li> <p>Doesn't care</p> <p>Function will stop here, </p> <p>clean up the stack (call destructors of all local variables), </p> <p>and propagate the exception to caller</p> <pre><code>void fun(){\n  vector&lt;int&gt; v[5];\n  v[40] = 1; -&gt; exception\n  // return to caller. The following code not touched.\n  v[1] = 2;\n}\n</code></pre> </li> </ul> <ul> <li> <p>Cares deeply</p> <pre><code>try{\n // ...\n}catch(ExceptionType &amp;e){\n  // Handle the exception here\n}\n// Exception handled. The following code will be executed normally.\ncout &lt;&lt; \"Hello\" &lt;&lt; endl;\n</code></pre> </li> </ul> <ul> <li> <p>Mildly interested</p> <pre><code>try{\n // ...\n}catch(ExceptionType &amp;e){\n  // Do something\n  throw; // Throw this exception again to caller.\n}\n</code></pre> </li> </ul> <ul> <li> <p>Catch any type</p> <pre><code>try{\n  // ...\n}catch(...){\n\n}\n</code></pre> </li> </ul> <ul> <li> <p>Selection from multiple handlers</p> <pre><code>try{\n  // ...\n}catch(Type1 &amp;e){\n\n}catch(Type2 &amp;e){\n\n}catch(...){\n\n}\n</code></pre> <p>Each handler is checked one by one.</p> <p>If:</p> <ul> <li>exact match or</li> <li>Can apply base class conversion (pointer or ref) or</li> <li>Catch all (...)</li> </ul> <p>The handler is matched</p> </li> </ul>"},{"location":"note-oop/Exception.html#exception-with-new","title":"Exception with 'new'","text":"<ul> <li>If 'new' fails, no memory is allocated</li> </ul> <ul> <li> <p>If there is an exception after 'new', the allocated memory will not be freed.</p> <p>Solution: RAII (Resource allocation is initialization)</p> <p>Wrap the allocation inside initialization of an object.</p> <p>Because local objects' destructors will be called automatically when exception !</p> </li> </ul>"},{"location":"note-oop/Exception.html#exception-with-ctor-and-dtor","title":"Exception with Ctor and Dtor","text":"<ul> <li> <p>Exception in Ctor</p> <p>Dtors will not be called automatically.</p> <p>Dynamic allocated resource will not be freed automatically.</p> <p>Solution: RAII (smart pointers)</p> </li> </ul> <ul> <li> <p>Exceptions in Dtor</p> <p>If Dtor is called because of exception (when clean up the stack), exceptions in Dtor will trigger <code>std::terminate</code>.</p> <p>Don't throw exceptions in Dtors.</p> </li> </ul>"},{"location":"note-oop/Iterators.html","title":"Iterators","text":"<p> \u200b\u7ea6\u200b 138 \u200b\u4e2a\u200b\u5b57\u200b  22 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>Iterator, a generic pointer. (Pointer to element in containers)</p>"},{"location":"note-oop/Iterators.html#basic-element-of-an-iterator","title":"Basic Element of an Iterator","text":"<ul> <li> <p>begin()</p> <p>Point at the first element in the container</p> <pre><code>vector&lt;int&gt; v = {1,2,3,4,5};\nauto it = v.begin(); // it -&gt; 1\n</code></pre> </li> </ul> <ul> <li> <p>end()</p> <p>Point at the element after the last element. </p> <p>\\(element \\in [begin(), end)\\)</p> </li> </ul> <ul> <li> <p>operator ++</p> <p>Step the iterator to next element</p> <pre><code>vector&lt;int&gt; v = {1,2,3,4,5};\nauto it = v.begin(); // it -&gt; 1\nit++; // it -&gt; 2\n</code></pre> </li> </ul> <ul> <li> <p>**operator ***</p> <p>Get the element pointed to.</p> <pre><code>vector&lt;int&gt; v = {1,2,3,4,5};\nauto it = v.begin(); // it -&gt; 1\n*it == 1;\n</code></pre> </li> </ul> <ul> <li> <p>operator -&gt;</p> <p>Get the 'real' pointer to the element.</p> </li> </ul>"},{"location":"note-oop/Iterators.html#iterator-traits","title":"Iterator Traits","text":"<p>Defines info about the iterator</p> <pre><code>template &lt;class Iterator&gt;\nstruct iterator_traits {\n typedef typename Iterator::value_type value_type;\n}\n</code></pre> <p>Partial specialization for pointer types</p> <pre><code>template &lt;class T&gt;\nstruct iterator_traits&lt;T*&gt; {\n typedef T value_type;\n}\n</code></pre> <ul> <li> <p>Standard traits</p> <ul> <li>iterator_category</li> </ul> <ul> <li> <p>value_type</p> <p>type of elements in container</p> </li> </ul> <ul> <li> <p>difference_type</p> <p>type of <code>it1 - it2</code></p> </li> </ul> <ul> <li> <p>pointer</p> <p>type of pointer to elements on container</p> </li> </ul> <ul> <li> <p>reference</p> <p>type of reference to elements on container</p> </li> </ul> </li> </ul>"},{"location":"note-oop/Iterators.html#iterator-category","title":"Iterator Category","text":"<ul> <li> <p>Inheritance tree</p> <p></p> </li> </ul> <ul> <li> <p>Call corresponding functions regarding iterator category</p> <pre><code>template&lt;class Iterator, class Distance&gt;\ninline void advance(Iterator &amp;i, Distance n)\n{\n  __advance(i, n, \n  iterator_traits&lt;Iterator&gt;::iterator_category());\n}\n</code></pre> <p>Call functions with an instance of <code>iterator_category</code>.</p> <p><code>__advance</code> have several overloaded versions, differed by the last argument.</p> <p>Compilers will then choose appropriate function signature !</p> </li> </ul>"},{"location":"note-oop/Operators.html","title":"Operator Overload","text":"<p> \u200b\u7ea6\u200b 51 \u200b\u4e2a\u200b\u5b57\u200b  51 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Operators.html#anonymous-function","title":"Anonymous function","text":"<pre><code>[vars...](args...){ // function body }\n</code></pre> <p><code>vars</code> are contextual variables (temporary variables).</p> <p><code>args</code> are argument list of the fuction.</p> <p>e.g.</p> <pre><code>int a = 3;\nauto f = [a](){cout &lt;&lt; a &lt;&lt; endl;}\nf();\n</code></pre> <p>Actually a class with <code>operator ()</code>  (functor) overloaded.</p> <p><code>vars</code> is stored as fields in this class.</p> <p>An example:</p> <pre><code>class F{\nprivate:\n    int a;\npublic:\n    F() : a(a) {}\n    const int operator(const int &amp;x) const {\n        return x * a;\n    }\n};\n/*\n* F can be received as type : function&lt;int(const int&amp;)&gt;\n* #include&lt;functional&gt;\n*/\n</code></pre>"},{"location":"note-oop/Operators.html#type-conversion-overload","title":"Type Conversion Overload","text":"<ul> <li> <p>Auto type conversion</p> <p>When corresponding ctor is defined (implicitly).</p> <pre><code>class A{\npublic:\n  A(B &amp;b){}\n    explicit A(C &amp;c){}\n};\n\nvoid f(A _a){}\n\nA a;\nB b;\na = b; // OK\na = c; // Compile Error!\na = A(c); // OK\nf(b); // OK\n</code></pre> </li> </ul> <ul> <li> <p>Conversion Operator</p> <pre><code>class A{\npublic:\n  operator double() const{\n      return 1.0;\n  }\n};\n\ndouble d = 1.3 * r; // OK r =&gt; double\ndouble d = r * 1.3; // OK\n</code></pre> </li> </ul> <ul> <li> <p>Ambigous conversion</p> <pre><code>class B;\n\nclass A{\npublic:\n    A(const B &amp;b){} // B =&gt; A\n};\n\nclass B{\npublic:\n    operator A(){} // B =&gt; A. Tow implements. Compile error!\n};\n</code></pre> </li> </ul>"},{"location":"note-oop/Pitfalls%20and%20Fallacies.html","title":"Pitfalls and Fallacies","text":"<p> \u200b\u7ea6\u200b 423 \u200b\u4e2a\u200b\u5b57\u200b  72 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p> <ol> <li> <p>Anonymous namespace \u200b\u4f5c\u7528\u57df\u200b\u4e3a\u200b\u5f53\u524d\u200b\u6587\u4ef6\u200b\uff08\u200b\u76f8\u5f53\u4e8e\u200b\u5168\u5c40\u200b\u9759\u6001\u200b\u53d8\u91cf\u200b\uff09</p> <pre><code>#include&lt;iostream&gt;\n\nusing namespace std;\n\nint x = 5;\n\nnamespace{\n    int x = 10;\n}\n\nint main(){\n    cout &lt;&lt; \"x = \" &lt;&lt; ::x &lt;&lt; endl;\n    return 0;\n}\n\n// ::x = 10\n</code></pre> </li> <li> <p>Equivocal function overload</p> <p>\u200b\u503c\u200b\u4f20\u9012\u200b\u4e0e\u200b\u5f15\u7528\u200b\u4f20\u9012\u200b</p> <pre><code>void f(int x){}\nvoid f(int &amp;x)\n</code></pre> <p>\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b</p> <pre><code>double f(double x, double y = 1.0){return 1;}\ndouble f(double x){return 2;}\n</code></pre> <p>\u200b\u9690\u5f0f\u200b\u8f6c\u6362\u200b</p> <pre><code>int f(unsigned int x) {return x;}\ndouble f(double x) {return x;}\nint a = 5;\nf(5);\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u6240\u6709\u200b\u60c5\u51b5\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u7f16\u8bd1\u200b\u9519\u8bef\u200b\u3002\u200b\u53ea\u6709\u200b\u4ea7\u751f\u200b\u8c03\u7528\u200b\u65f6\u200b\uff0c\u200b\u624d\u200b\u4f1a\u200b\u7f16\u8bd1\u200b\u9519\u8bef\u200b\u3002</p> </li> <li> <p>const</p> <p>\u200b\u4e0b\u9762\u200b\u4e24\u79cd\u200b\u90fd\u200b\u662f\u200b typename\u200b\u7684\u200b\u5e38\u91cf\u200b\u7c7b\u578b\u200b</p> <pre><code>const &lt;typename&gt; &lt;var name&gt;;\n&lt;typename&gt; const &lt;var name&gt;;\n</code></pre> <p>\u200b\u6307\u9488\u200b\u4e0e\u200b\u5e38\u91cf\u200b\u540c\u65f6\u200b\u51fa\u73b0\u200b\uff0c\u200b\u9075\u5faa\u200b\u5de6\u200b\u7ed3\u5408\u200b\u89c4\u5219\u200b</p> <pre><code>const int * -&gt; (const int) *\nint * const -&gt; (int *) const\n</code></pre> </li> <li> <p>new</p> <p>with initialization</p> <pre><code>p=new T(init list);\n</code></pre> </li> <li> <p>\u200b\u4e0d\u80fd\u200b\u5728\u200b\u7c7b\u200b\u4e2d\u200b\u5bf9\u200b\u6570\u636e\u200b\u6210\u5458\u200b\u521d\u59cb\u5316\u200b</p> </li> <li> <p>freind</p> <p>\u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b\u5bf9\u53cb\u5143\u200b\u51fd\u6570\u200b\u65e0\u6548\u200b\uff0c\u200b\u53cb\u5143\u200b\u51fd\u6570\u200b\u653e\u5728\u200bprivate, public, protected\u200b\u90fd\u884c\u200b</p> </li> <li> <p>const member and static member</p> <p>\u200b\u666e\u901a\u200b\u5e38\u91cf\u200b\u53ea\u80fd\u200b\u5728\u200b\u521d\u59cb\u5316\u200b\u5217\u8868\u200b\u521d\u59cb\u5316\u200b</p> <pre><code>class A\n{\n const int a;\n static const int b;\n};\n\nconst int A::b = 5;\n</code></pre> </li> <li> <p>const member function</p> <p>\u200b\u6ce8\u610f\u200bconst\u200b\u662f\u200b\u53c2\u6570\u8868\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0cconst A* this</p> <pre><code>void A::f() const {}\n</code></pre> </li> <li> <p>Derived class</p> <p>\u200b\u6d3e\u751f\u7c7b\u200b\u4e2d\u200b\u7684\u200b\u540c\u540d\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u5bfc\u81f4\u200b\u7236\u7c7b\u200b\u7684\u200b\u4e1c\u897f\u200b\u6d88\u5931\u200b\u3002\u200b\u4ecd\u200b\u53ef\u200b\u901a\u8fc7\u200bBase::f \u200b\u8bbf\u95ee\u200b</p> </li> <li> <p>Virtual inheritance</p> <p>Diamond inheritance construct\uff1a</p> <pre><code>class A{};\nclass B_1: virtual public A{}\nclass B_2: virtual public A{}\nclass C: public B_1, public B_2{}\n</code></pre> <ol> <li> <p>A</p> </li> <li> <p>B_1</p> </li> <li> <p>B_2</p> </li> <li> <p>C</p> </li> </ol> </li> <li> <p>Derived class and Base class</p> <pre><code>Derived d;\n// value\nBase b = d; // truncate\n// \u200b\u4e0b\u5217\u200b\u4ec5\u200b\u5728\u200bpublic\u200b\u7ee7\u627f\u200b\u65f6\u200b\u53ef\u4ee5\u200b\n// reference\nBase &amp;br = d;\n// pointer\nBase *pb = &amp;d;\n</code></pre> </li> <li> <p>++ overload</p> <pre><code>a++;\noperator ++(int){}\n\n++a;\noperator ++(){}\n</code></pre> </li> <li> <p>\u200b\u91cd\u8f7d\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u65f6\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5199\u200b\u8fd4\u56de\u503c\u200b\u7c7b\u578b\u200b</p> </li> <li> <p>\u200b\u9759\u6001\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u865a\u200b\u51fd\u6570\u200b\uff0c\u200b\u6784\u9020\u51fd\u6570\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u65f6\u865a\u200b\u51fd\u6570\u200b</p> </li> <li> <p>Virtual function in derived class must have the same signature as in the base class</p> <p>If only differ from return values, Compile error.</p> <p>If differ from arg list, normal name hiding.</p> </li> <li> <p>\u200b\u5f53\u7c7b\u200b\u4e2d\u200b\u81f3\u5c11\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7eaf\u865a\u200b\u51fd\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u5c31\u662f\u200b\u62bd\u8c61\u7c7b\u200b</p> </li> <li> <p>dynamic cast, cast from base pointer/reference to derived pointer/reference</p> <p>Pointer failed: return null pointer.</p> <p>Reference failed: exception.</p> </li> <li> <p>Only fully specialization is allowed in function templates.</p> </li> <li> <p>Operators can not be overloaded:</p> <p><code>?</code> <code>.</code> <code>::</code> <code>sizeof</code> <code>.*</code></p> </li> <li> <p>\u200b\u53ea\u8981\u200bvtable\u200b\u8fd8\u200b\u5728\u200b\uff0c\u200b\u52a8\u6001\u200b\u7ed1\u5b9a\u200b\u5c31\u200b\u5728\u200b\uff0c\u200b\u5173\u952e\u5728\u4e8e\u200bvtable\u200b\u662f\u200b\u8c01\u200b\u7684\u200b</p> <pre><code>Derived d;\nBase *b = &amp;d;\n(*b).f(); // Call derived f\n</code></pre> </li> <li> <p>Default parameters in dynamic binding</p> <pre><code>class Base{\npublic:\n    int x;\n    virtual void f(int x = 1)\n    {\n        cout &lt;&lt; \"Base\" &lt;&lt; x &lt;&lt; endl;\n    };\n};\n\nclass Derived : public Base{\npublic:\n    void f(int x = 2){\n        cout &lt;&lt; \"Derived\" &lt;&lt; x &lt;&lt; endl;\n    }\n};\n</code></pre> </li> <li> <p>dynamic cast \u200b\u7684\u200b\u6e90\u200b\u7c7b\u578b\u200b\u5fc5\u987b\u200b\u662f\u200bpolymorphic \u200b\u5426\u5219\u200b\u7f16\u8bd1\u200b\u9519\u8bef\u200b</p> <p>\u200b\u7136\u540e\u200b\u624d\u200b\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u80fd\u200b\u8f6c\u6362\u200b\u3002\u200b\u53ca\u65f6\u200b\u8f6c\u6362\u200b\u76ee\u6807\u200b\u5b8c\u5168\u200b\u4e0d\u662f\u200b\u6e90\u200b\u7c7b\u578b\u200b\u7684\u200b\u6d3e\u751f\u7c7b\u200b\uff0c\u200b\u4e5f\u200b\u53ea\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\u8fd4\u56de\u200bNULL\u200b\u6307\u9488\u200b\u3002</p> </li> </ol>"},{"location":"note-oop/Polymorphism.html","title":"Polymorphism","text":"<p> \u200b\u7ea6\u200b 143 \u200b\u4e2a\u200b\u5b57\u200b  73 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Polymorphism.html#virtual-function-table","title":"Virtual Function Table","text":"<ul> <li> <p>operator =</p> <p>Not copied</p> <pre><code>Ellipse elly (20f, 40f);\nCircle circ(60f);\nelly = circ;\n</code></pre> <p>Only part of circ that fits elly are copied.</p> <p>vtable is not copied.</p> </li> </ul> <ul> <li> <p>Pointer =</p> <p>vtable is copied.</p> </li> </ul> <ul> <li> <p>Reference =</p> <p>vtable is copied.</p> <p>Think reference as alias!</p> </li> </ul> <ul> <li> <p>Dtors can be virtual</p> <p>Note : The ancestors' Dtors are also called.</p> <pre><code>class A{\n    public:\n    A(){}\n    virtual ~A(){cout &lt;&lt; \"A::~A()\" &lt;&lt; endl;}\n};\n\nclass B : public A{\n    public:\n    B(){}\n    ~B(){cout &lt;&lt; \"B::~B()\" &lt;&lt; endl;}\n};\n\nB b();\n\n/* Output:\n * B::~B()\n * A::~A()\n*/\n</code></pre> </li> </ul> <ul> <li> <p>**Key Word 'override' **</p> <p>This keyword let compilers to check if the overrode function has the same signature(e.g. argument list).</p> <p>If the overrode function is not exited in the base class (denoted as virtual), compile error.</p> <pre><code>// Compile error\nclass A{\npublic:\n    void f(){}\n};\n\nclass B : public A{\npublic:\n    void f() override {}\n};\n</code></pre> <pre><code>// Compile error\nclass A{\npublic:\n    virtual void f(){}\n};\n\nclass B : public A{\npublic:\n    void f(int x) override {}\n};\n</code></pre> <p>Override multiple signatures</p> <p>If you override an overloaded function, you must override all of the variants! If not, others will be hidden</p> <pre><code>class A{\n    public:\n    virtual void f(){}\n    virtual void f(int x){} // Hidden in B\n};\n\nclass B : public A{\n    public:\n    void f() override {}\n};\n\nB b;\nb.f(1); // Compile error\n\nA *a = new A();\nB *b = reinterpret_cast&lt;B*&gt;(a); // 'Down cast', needs reinterprete_cast\nb-&gt;f(1); // Also compile error, even if 'pointer =' preserve vptr\n</code></pre> </li> </ul> <ul> <li> <p>Return Type Relaxation</p> <p>Only applied for pointers and references</p> <pre><code>class A{\npublic:\n    virtual A* f1(){}\n    virtual A&amp; f2(){}\n    virtual A f3(){}\n};\n\nclass B : public A{\npublic:\n    B* f1() override {} // Good\n    B&amp; f2() override {} // Good\n    B f3() override {} // Compile error\n};\n</code></pre> </li> </ul> <ul> <li> <p>Abstract class</p> <p>Define interface without defining an implementation.</p> <ul> <li> <p>Pure virtual function</p> <pre><code>virtual func(args...) = 0; // Pure virtual\nvirtual func(args...); // Not pure virtual !\n</code></pre> <p>Must be implemented in derived class.</p> <p>Destructor can not be pure virtual but with empty body.</p> </li> </ul> <ul> <li>Only static members</li> </ul> <ul> <li>Static member functions</li> </ul> </li> </ul>"},{"location":"note-oop/STLs.html","title":"STLs","text":"<p> \u200b\u7ea6\u200b 6 \u200b\u4e2a\u200b\u5b57\u200b  5 \u200b\u884c\u200b\u4ee3\u7801\u200b </p>"},{"location":"note-oop/STLs.html#stdstring","title":"std::string","text":"<ul> <li>Assignment</li> </ul> <ul> <li>Concatenation</li> </ul> <ul> <li> <p>Ctors</p> <pre><code>string(const char *, int len); // From C char\nstring(const char *);\nstring(const string &amp;, int pos);\nstring(const string &amp;, int pos, int len);\n</code></pre> </li> </ul> <ul> <li> <p>sub string</p> <pre><code>substr(int pos, int len);\n</code></pre> </li> </ul>"},{"location":"note-oop/Streams.html","title":"Streams","text":"<p> \u200b\u7ea6\u200b 22 \u200b\u4e2a\u200b\u5b57\u200b  2 \u200b\u884c\u200b\u4ee3\u7801\u200b </p> <ul> <li> <p><code>istream</code> and <code>ostream</code> are base classes of all streams.</p> <p>We only needs to overload:</p> <pre><code>istream&amp; operator &gt;&gt; (istream &amp;in, T &amp;t);\nostream&amp; operator &lt;&lt; (ostream &amp;in, const T &amp;t);\n</code></pre> <p>and all kinds of stream can use this.</p> </li> </ul>"},{"location":"note-oop/Templates.html","title":"Templates","text":"<p> \u200b\u7ea6\u200b 120 \u200b\u4e2a\u200b\u5b57\u200b  105 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p>"},{"location":"note-oop/Templates.html#ambiguous-function-overload","title":"Ambiguous Function Overload","text":"<pre><code>void foo(int i) {}\nvoid foo(double d){}\nfoo(10L); // Compile error. Ambiguous! long can convert to both i and d implicitly\n</code></pre>"},{"location":"note-oop/Templates.html#template-instantiation","title":"Template Instantiation","text":"<p>Compilers help you to overload a function.</p> <p>Only when the template function/class is called/instantiated with specialized types, will it be created to a specialized type of code by compilers.</p> <pre><code>template &lt;class T&gt;\nvoid print(T a, T b){\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n}\n\nvoid print(string a, string b){\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n}\n\nint a = 1, b = 2, c = 3;\nfloat d = 1.0, e = 2.0;\nprint(a, b); // Create a int type my_swap\nprint(b, c); // Use the already created int type my_swap\nprint(d, e); // Create a float type my_swap\n\nprint(a, d); // Compile error. Implicit type conversion is not allowed in templates.\nprint&lt;double&gt;(a, d); // Good!\n\nprint(\"a\", \"b\"); // Call the normal funtion!\n</code></pre> <ul> <li> <p>Which function to use? </p> <ol> <li> <p>Compilers will exact match for normal function first (no implicit type conversion).</p> </li> <li> <p>Then match for templates.</p> </li> <li> <p>Then match for normal function. (with implicit type conversion).</p> </li> </ol> <p>example:</p> <pre><code>template &lt;class T1, class T2&gt;\nvoid foo(T1 a, T2 b){\n    cout &lt;&lt; \"foo(T1, T2)\" &lt;&lt; endl;\n}\n\nvoid foo(int a, double b){\n    cout &lt;&lt; \"foo(int, double)\" &lt;&lt; endl;\n}\n\nint main(){\n    foo(1, 1.0);\n    foo(1, 1.0f);\n}\n\n/* output:\n    foo(int, double)\n    foo(T1, T2)\n*/\n</code></pre> </li> </ul>"},{"location":"note-oop/Templates.html#none-type-template-parameters","title":"None-type Template Parameters","text":"<p>example</p> <pre><code>template&lt;class T, int N = 100&gt;\nclass Array{\npublic:\n    int size() const {return N;}\n    // ... ...\n};\n\nArray&lt;int&gt; arr1;\nArray&lt;int, 50&gt; arr2; // Not the same type as arr1\n</code></pre>"},{"location":"note-oop/Templates.html#template-member-function","title":"Template Member Function","text":"<pre><code>template &lt;class T&gt;\nclass A{\npublic:\n    T val;\n    A(T v): val(v){}\n    template &lt;class U&gt; A(const A&lt;U&gt;&amp; other) : val(other.val){}\n    // A(const A&amp; other) : val(other.val) {} Error ! (*this) is A&lt;double&gt;, (other) is A&lt;int&gt;\n};\n\nint main(){\n    A&lt;int&gt; a(2);\n    A&lt;double&gt; b = a;\n}\n</code></pre>"},{"location":"note-oop/Templates.html#template--inheritance","title":"Template &amp; Inheritance","text":"<ul> <li>Template class can inherits from non-template class.</li> </ul> <ul> <li> <p>Template class can inherits from template class.</p> <pre><code>template &lt;class C&gt;\nclass A : public\n  B&lt;C&gt; { /* ... */ } // Here B's template parameter can be a fake type.\n</code></pre> </li> </ul> <ul> <li> <p>Non-template class can inherits from instantiated template class.</p> <pre><code>class A : public\n  B&lt;int&gt; { /* ... */ } // Here B's template parameter is a real type.\n</code></pre> </li> </ul>"},{"location":"note-oop/Templates.html#recurring-template","title":"Recurring Template","text":"<p>manually implement virtual function , just work as virtual function.</p> <p>There are no vptr-table anymore, more efficient than virtual functions!</p> <pre><code>template &lt;class T&gt;\nstruct Base{\n    void interface(){\n        static_cast&lt;T*&gt;(this)-&gt;implementation_a();\n        static_cast&lt;T*&gt;(this)-&gt;implementation_b();\n    }\n};\n\nstruct Derived1 : Base&lt;Derived1&gt;{\n    void implementation_a(){\n        std::cout &lt;&lt; \"Derived1 implementation_a\\n\";\n    }\n    void implementation_b(){\n        std::cout &lt;&lt; \"Derived1 implementation_b\\n\";\n    }\n};\n\nstruct Derived2 : Base&lt;Derived2&gt;{\n    void implementation_a(){\n        std::cout &lt;&lt; \"Derived2 implementation_a\\n\";\n    }\n    void implementation_b(){\n        std::cout &lt;&lt; \"Derived2 implementation_b\\n\";\n    }\n};\n\ntemplate &lt;class T&gt;\nvoid foo(Base&lt;T&gt;&amp; b){\n    b.interface();\n}\n\nint main(){\n    Derived1 d1;\n    Derived2 d2;\n    foo(d1);\n    foo(d2);\n    return 0;\n}\n</code></pre>"},{"location":"note-oop/Untitled%201.html","title":"Untitled 1","text":"<p> \u200b\u7ea6\u200b 23 \u200b\u4e2a\u200b\u5b57\u200b </p> <p>A()</p> <p>A()</p> <p>B()</p> <p>~B()</p> <p>~A()</p> <p>~A()</p> <p>A()</p> <p>A()</p> <p>B()</p> <p>A()</p> <p>C()</p> <p>B::F(double)</p> <p>B::F(double)</p> <p>A::F2(int)</p> <p>B</p> <p>2</p> <p>4-12</p> <p>4-13 5---4 5---6</p>"},{"location":"note-oop/Untitled.html","title":"Untitled","text":"<p> \u200b\u7ea6\u200b 0 \u200b\u4e2a\u200b\u5b57\u200b  14 \u200b\u884c\u200b\u4ee3\u7801\u200b </p> <pre><code>class A{\n    public:\n    virtual void f(){ cout &lt;&lt; \"A::f()\"; }\n    virtual void f(int x){ cout &lt;&lt; \"A::f(int)\"; }\n};\n\nclass B : public A{\n    public:\n    void f() override { cout &lt;&lt; \"B::f()\"; }\n};\n\nA *a = new A();\nB *b = reinterpret_cast&lt;B*&gt;(a);\nb-&gt;f(1);\n</code></pre>"},{"location":"paperreading/DeVRF.html","title":"DeVRF: Fast Deformable Voxel Radiance Fields for Dynamic Scenes","text":"<p> \u200b\u7ea6\u200b 584 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 2 \u200b\u5206\u949f\u200b</p>"},{"location":"paperreading/DeVRF.html#abstract","title":"Abstract","text":"<ul> <li> <p>Task</p> <p>Free-viewpoint photorealistic view synthesis</p> </li> </ul> <ul> <li> <p>Technical Challenges For Previous Methods</p> <p>Slow convergence (NeRF)</p> </li> </ul> <ul> <li> <p>Key Insight / Motivation</p> <p>static \u2192 dynamic learning paradigm</p> <p>Efficient learning of deformable radiance fields</p> </li> </ul> <ul> <li> <p>Technical Contributions</p> <p>Model both the 3D canonical space and 4D-deformation field of a dynamic, non-rigid scene with explicit and discrete voxel based representations.</p> <p>static \u2192 dynamic learning paradigm</p> </li> </ul> <ul> <li>Experiment</li> </ul>"},{"location":"paperreading/DeVRF.html#introduction","title":"Introduction","text":"<ul> <li> <p>Task and Application</p> <p>Free-viewpoint photorealistic view synthesis techniques from a set of captured images unleash new opportunities for immersive applications such as virtual reality, telepresence, and 3D animation production.</p> </li> </ul> <ul> <li> <p>Technical Challenges For Previous Methods</p> <p>Multi-plane images &amp; NeRF:</p> <p>\u200b mainly focus on static scenes</p> <p>Volume-Deform (unified volumetric representation to encode both the scene\u2019s geometry and its motion), </p> <p>Neural Volumes (represents dynamic objects with a 3D voxel grid plus an implicit warp field), </p> <p>D-NeRF (learns a deformation field that maps coordinates in a dynamic field to a NeRF-based canonical space), </p> <p>HyperNeRF ( model the motion in a higher dimension space, representing the time-dependent radiance field by slicing through the hyperspace):</p> <p>\u200b  Require days of GPU training time</p> <p>DVGO (explicit and discretized volume representations),</p> <p>Plenoxels (employs sparse voxel grids as the scene representation and uses spherical harmonics to model view-dependent appearance),</p> <p>Instant-ngp (multiresolution hash encoding):</p> <p>\u200b Mainly focus on static scenes</p> </li> </ul> <ul> <li> <p>Our Pipeline</p> <p>In the first stage, DeVRF learns a 3D volumetric canonical prior (b) from multi-view static images.</p> <p>In the second stage, a 4D deformation field (d) is jointly optimized from taking few-view dynamic sequences \u00a9 and the 3D canonical prior</p> </li> </ul> <ul> <li>Demos &amp; Application</li> </ul>"},{"location":"paperreading/DeVRF.html#method","title":"Method","text":"<ul> <li> <p>Overview</p> <p>Specific task. Input, output. First stage, second stage</p> </li> </ul> <ul> <li> <p>3D Volumetric Canonical Space.</p> <p>Motivation</p> <p>We take inspiration from the volumetric representation of DVGO.</p> <p>Method</p> <p>\\(Tri-Interp([x,y,z], Vp) : \\R^3, \\R^{C\u00d7 N_x\u00d7 N_y\u00d7 N_z} \u2192 \\R^C ,\u2200p \u2208 {density, color}\\)</p> <p>where C is the dimension of scene property. Property learned are density and color. </p> <p>We employ softplus and post-activation in \\(V_{density}\\)</p> <p>We also apply a shallow MLP in \\(V_{color}\\) to enable view-dependent color effects</p> <p>Advantage</p> <p>Efficiently query the scene property of any 3D point</p> </li> </ul> <ul> <li> <p>4D Voxel Deformation Field</p> <p>Motivation</p> <p>Method</p> <p>The 3D motion \\(\u2206X_{t\u21920} = {\u2206X^{t\u21920}_i}\\)  (i means neighbours)can be efficiently queried through quadruple interpolation of their neighboring voxels at neighboring time steps in the 4D backward deformation field. </p> <p>\\(Quad-Interp([x,y,z,t], V_{motion}) : \\R^4, \\R^{N_t\u00d7 C\u00d7 N_x\u00d7 N_y\u00d7 N_z} \u2192 \\R^C\\)</p> <p>\\(C\\) is the degrees of freedom (DoFs)</p> <p>\\(N_t\\) is the number of key time steps</p> <p>Backward here because we needs to find the original position in the static scene.</p> <p>Advantage</p> <p>Scene properties of \\(X_t\\) can then be obtained by querying the scene properties of their corresponding canonical points \\(X_0\\) through trilinear interpolation.</p> <p>Efficient.</p> </li> </ul> <ul> <li>Coarse-to-Fine Optimization</li> </ul> <ul> <li>4D Deformation Cycle Consistency</li> </ul> <ul> <li> <p>Optical Flow Supervision</p> <p>we first compute the corresponding 3D points of \\(X_0\\) at \\(t\u22121\\) time step via forward motion got \\(\\tilde X_{t\u22121}\\). After that, we project \\(\\tilde X_{t\u22121}\\)onto the reference camera and get  their pixel locations \\(\\tilde{P_{t\u22121}}\\), and compute the induced optical flow with respect to the pixel location \\(P_t\\) from which the rays of \\(X_t\\) are cast. </p> <p>Then we compare induced optical flow with gt.</p> </li> </ul>"},{"location":"paperreading/DeVRF.html#experiments","title":"Experiments","text":"<ul> <li>Comparison Experiments</li> <li>Ablation Study</li> </ul>"},{"location":"paperreading/DeVRF.html#limitations","title":"Limitations","text":"<pre><code>The model size is large due to its large number of parameters.\n</code></pre> <p>\u200b   DeVRF currently does not synchronously optimize the 3D canonical space prior during the second stage, and thus may not be able to model drastic deformations.</p>"},{"location":"paperreading/T-MPI.html","title":"Temporal-MPI: Enabling Multi-plane Images for Dynamic Scene Modelling via Temporal Basis Learning","text":"<p> \u200b\u7ea6\u200b 349 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"paperreading/T-MPI.html#abstract","title":"Abstract","text":"<ul> <li> <p>Task</p> <p>Novel view synthesis </p> </li> </ul> <ul> <li> <p>Technical Challenges For Previous Methods</p> <p>immersive rendering of dynamic scenes</p> </li> </ul> <ul> <li> <p>Key Insight / Motivation</p> <p>The multi-plane image (MPI)</p> <p>Dynamic contents by MPI is not studied</p> </li> </ul> <ul> <li> <p>Technical Contributions</p> <p>Temporal-MPI representation</p> <p>\u200b Encode the rich 3D and dynamic variation information</p> <p>\u200b  as compact temporal basis and coefficients jointly learned</p> <p>Much faster and more compact </p> <p>Basis Learning</p> </li> </ul> <ul> <li>Experiment</li> </ul>"},{"location":"paperreading/T-MPI.html#introduction","title":"Introduction","text":"<ul> <li> <p>Task and Application</p> <p>novel view synthesis</p> </li> </ul> <ul> <li> <p>Technical Challenges For Previous Methods</p> <p>Challenges still remain in modelling dynamic scenes, which require additional capacity to capture variations along time dimension.</p> <ul> <li> <p>Time conditioned NeRF</p> <p>require millions of ray-casting style queries</p> </li> </ul> <ul> <li> <p>MPI method</p> <p>3DMaskVol21: fusing a background MPI and instantaneous MPI,  causes delay on rendering and heavy work load on caching.</p> </li> </ul> </li> </ul> <ul> <li> <p>Our Pipeline</p> <p>A novel efficient representation for dynamic scenes, Temporal-MPI. (compact)</p> <p>Basis learning, linear combination of basis.</p> <p>A self-contained pipeline.</p> <p>Greatly decreases the requirement for storage space and being com putationally efficient.</p> </li> </ul> <ul> <li>Demos &amp; Application</li> </ul>"},{"location":"paperreading/T-MPI.html#method","title":"Method","text":"<ul> <li> <p>Overview</p> <p>Learning for Low-Frequency Component</p> <p>Temporal Basis Learning for High-Frequency Contents</p> <p>Temporal Coding for Novel-View Synthesis</p> </li> </ul> <ul> <li> <p>Low-Frequency Component</p> <p>Low frequency contents in a video can be well-captured and modeled explicitly by time-invariant parameters.</p> <p>We learn RGB color parameters \\(\\cal K_0^c \\in R^{H\u00d7 W\u00d7 D/8\u00d7 3}\\)</p> <p>Advantage</p> <p>This let the subsequent dynamic modelling to better focus on the temporal variation.</p> <p>Motivation, method, why it works, advantage</p> </li> </ul> <ul> <li> <p>High-Frequency Basis</p> <p>Learn temporal basis as \\(\\cal B \\in \\R^{4\u00d7T\u00d7N_{basis}}\\)</p> <p>Each basis \\(b \\in \\cal B\\) is RGBA</p> <p>The temporal basis will be estimated by two time dependent functions which are Multi-Layer Perceptron (MLP) networks \\(Vc\\) and \\(V\u03b1\\)</p> <p></p> <p>\\(\\cal E(\u00b7)\\) is a time-encoding function which encodes time-sequential information into a high dimensional latent vector</p> <p>Advantage</p> <p>compactly represent</p> </li> </ul> <ul> <li> <p>Temporal Coding</p> <p>Map the basis above to each pixel. (weights of each pixel)</p> <p></p> <p>Learn \\(\\mathbf K\\), which is the coefficients of each pixel</p> </li> </ul>"},{"location":"paperreading/T-MPI.html#experiments","title":"Experiments","text":"<ul> <li>Comparison Experiments</li> <li>Ablation Study</li> </ul>"},{"location":"paperreading/T-MPI.html#limitations","title":"Limitations","text":"<p>\u200b   The rendering quality degrades when the length of sequence increases given default model parameters. </p> <p>\u200b   Only applicable to dynamic scenes without large camera motions that cause the change of background.</p>"},{"location":"sparse_solver/BICG.html","title":"BICG","text":"<p> \u200b\u7ea6\u200b 160 \u200b\u4e2a\u200b\u5b57\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p> <p>Initialization:</p> <ul> <li>Choose an initial guess \\(x_0\\).</li> <li>Compute the initial residual \\(r_0=b\u2212Ax_0\\).</li> <li>Set the initial shadow residual \\(r'_0=r_0\\)(or another suitable initial residual vector).</li> <li>Initialize the search directions \\(p_0=r_0\\)and \\(p'_0=r'_0\\).</li> </ul> <p>Iteration: For \\(k = 0, 1, 2, \\ldots\\) until convergence:</p> <ol> <li>Compute Matrix-Vector Products:<ul> <li>\\(v = A*p_k\\)</li> <li>\\(A^T*p'_k\\)</li> </ul> </li> <li>Compute the Alpha Coefficient:<ul> <li>\\(\\alpha_k = \\frac{r_k^T r_k'}{(A p_k)^T p_k'}\\)</li> </ul> </li> <li>Update the Solution:<ul> <li>\\(x_{k+1} = x_k + \\alpha_k p_k\\)</li> </ul> </li> <li>Update the Residuals:<ul> <li>\\(r_{k+1} = r_k - \\alpha_k A p_k\\)</li> <li>\\(r_{k+1}' = r_k' - \\alpha_k (A^T p_k')\\)</li> </ul> </li> <li>Check for Convergence (e.g., if \\(\\|r_{k+1}\\|\\) is sufficiently small, stop the iteration).</li> <li>Compute the Beta Coefficient:<ul> <li>\\(\\beta_k = \\frac{r_{k+1}^T r_{k+1}'}{r_k^T r_k'}\\)</li> </ul> </li> <li>Update the Search Directions:<ul> <li>\\(p_{k+1} = r_{k+1} + \\beta_kp_k\\)</li> <li>\\(p_{k+1}' = r_{k+1}' + \\beta_kp'_k \\)</li> </ul> </li> </ol> <p>Output:</p> <ul> <li>The approximate solution \\(x_{k+1}\\).</li> </ul>"},{"location":"sparse_solver/MKL%20dcg.html","title":"MKL dcg","text":"<p> \u200b\u7ea6\u200b 11 \u200b\u4e2a\u200b\u5b57\u200b  71 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"sparse_solver/MKL%20dcg.html#include-files","title":"Include Files","text":"<pre><code>#include \"mkl.h\"\n</code></pre>"},{"location":"sparse_solver/MKL%20dcg.html#preparation","title":"Preparation","text":"<pre><code>MKL_INT             rci_request, itercount, ipar[128];\ndouble              dpar[128];\ndouble*             tmp       = (double*)malloc(sizeof(double) * 4 * n);\ndouble*             temp      = (double*)malloc(sizeof(double) * n);\nchar                matdes[3] = {'d', 'l', 'n'};\nstruct matrix_descr descrA;\nsparse_matrix_t     csrA;\nsparse_operation_t  transA = SPARSE_OPERATION_NON_TRANSPOSE;\n// create sparse matrix\ndescrA.type = SPARSE_MATRIX_TYPE_GENERAL;\n\nprintf(\"Create matrix description...\\n\");\nmkl_sparse_d_create_csr(&amp;csrA, SPARSE_INDEX_BASE_ZERO, n, n, (int *)solver-&gt;row_ptr, (int *)(solver-&gt;row_ptr + 1), (int *)solver-&gt;col_idx, (double *)solver-&gt;val);\n\n// init rci\ndcg_init(&amp;n, x, b, &amp;rci_request, ipar, dpar, tmp);\n\n// set parameters\nipar[3]  = 0;\nipar[4]  = 100000; // Maximum iterations\nipar[7]  = 0; // performs the stopping test for the maximum number of iterations\nipar[8]  = 0; // performs the residual stopping test\nipar[9]  = 1; // Request user defined stopping test\nipar[10] = 1; // 0: Run non-preconditioned version\ndpar[0]  = 1e-6; // Relative tolerance\n\n// check\ndcg_check(&amp;n, x, b, &amp;rci_request, ipar, dpar, tmp);\nif (rci_request != 0 &amp;&amp; rci_request != -1001) {\n    printf(\"RCI error: %d\\n\", rci_request);\n}\n\n// norm\ndouble euclidean_norm;\ndouble  b_norm = dnrm2(&amp;n, b, &amp;ione);\n</code></pre>"},{"location":"sparse_solver/MKL%20dcg.html#iterative-solve","title":"Iterative Solve","text":"<pre><code>while (1) {\n    dcg(&amp;n, (double *)x, b, &amp;rci_request, ipar, dpar, tmp);\n    if (rci_request == 0) {\n        // succeed\n        printf(\"succeed.\\n\");\n        break;\n    } else if (rci_request == 1) {\n        // Multiply matrix by tmp[0:n-1], put in tmp[n:2*n-1] \n        mkl_sparse_d_mv(transA, 1.0, csrA, descrA, tmp, 0.0, tmp + n);\n    } else if (rci_request == 2) {\n        mkl_sparse_d_mv(transA, 1.0, csrA, descrA, x, 0.0, temp);\n        double  eone   = -1.E0;\n        daxpy (&amp;n, &amp;eone, b, &amp;ione, temp, &amp;ione);\n        double r_norm_2 = dnrm2 (&amp;n, temp, &amp;ione);\n        double  loss   = r_norm_2 / b_norm;\n        printf(\"norm: %e\\n\", loss);\n        if (loss &lt; 1e-6) break;\n    } else if (rci_request == 3) {\n        apply_preconditioner(n, invA, tmp + 2*n, tmp + 3*n);\n    } else {\n        printf(\"RCI error: %d\\n\", rci_request);\n        break;\n    }\n}\n</code></pre>"},{"location":"sparse_solver/MKL%20dcg.html#compile-options","title":"Compile Options","text":"<pre><code>GCC = icpc\nCFLAGS = -O3 -w -m64 -lm -std=gnu99\n\nLDLIBS += -L /usr/lib/x86_64-linux-gnu/libm.a -lm\n\n# Use MKL_INT as 64 bit integer\n# LDLIBS += -DMKL_ILP64 -m64 -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -liomp5 -lpthread -lm -ldl\n\nLDLIBS += -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -liomp5 -lpthread -lm -ldl\n\niterative_solver:iterative_solver.c\n    $(GCC) $&lt; $(LDLIBS) -o $@ $(CFLAGS)\n</code></pre>"},{"location":"sparse_solver/cuSOLVER.html","title":"cuSOLVER","text":"<p> \u200b\u7ea6\u200b 19 \u200b\u4e2a\u200b\u5b57\u200b  64 \u200b\u884c\u200b\u4ee3\u7801\u200b  \u200b\u9884\u8ba1\u200b\u9605\u8bfb\u200b\u65f6\u95f4\u200b 1 \u200b\u5206\u949f\u200b</p>"},{"location":"sparse_solver/cuSOLVER.html#include-files-and-macros","title":"Include Files and Macros","text":"<pre><code>#include &lt;cuda_runtime.h&gt;\n#include &lt;cusolverSp.h&gt;\n#include &lt;cusparse.h&gt;\n\n#define CUDA_CALL(func)                                                        \\\n{                                                                              \\\n    cudaError_t err = (func);                                                  \\\n    if (err != cudaSuccess) {                                                  \\\n        printf(\"CUDA error occurred: %s (code %d)\\n\", cudaGetErrorString(err), err); \\\n        exit(err);                                                             \\\n    }                                                                          \\\n}\n\n#define CUSOLVER_CALL(func)                                                    \\\n{                                                                              \\\n    cusolverStatus_t status = (func);                                          \\\n    if (status != CUSOLVER_STATUS_SUCCESS) {                                   \\\n        printf(\"cuSolver error occurred: %d\\n\", status);                       \\\n        if(status == CUSOLVER_STATUS_ALLOC_FAILED){                            \\\n            printf(\"CUSOLVER_STATUS_ALLOC_FAILED\\n\");                          \\\n        }                                                                      \\\n        exit(status);                                                          \\\n    }                                                                          \\\n}\n\n#define CUSPARSE_CALL(func)                                                    \\\n{                                                                              \\\n    cusparseStatus_t status = (func);                                          \\\n    if (status != CUSPARSE_STATUS_SUCCESS) {                                   \\\n        printf(\"cuSparse error occurred: %d\\n\", status);                       \\\n        exit(status);                                                          \\\n    }                                                                          \\\n}\n</code></pre>"},{"location":"sparse_solver/cuSOLVER.html#preparation","title":"Preparation","text":"<pre><code>printf(\"Create cuSolver space...\\n\");\nCUSOLVER_CALL(cusolverSpCreate(&amp;(solver-&gt;handle)));\nCUSOLVER_CALL(cusparseCreateMatDescr(&amp;(solver-&gt;descrA)));\nCUSPARSE_CALL(cusparseSetMatType(solver-&gt;descrA, CUSPARSE_MATRIX_TYPE_GENERAL));\nCUSPARSE_CALL(cusparseSetMatIndexBase(solver-&gt;descrA, CUSPARSE_INDEX_BASE_ZERO));\n\ncsrqrInfo_t info = NULL;\nCUSOLVER_CALL(cusolverSpCreateCsrqrInfo(&amp;info));\nsize_t size_internal, size_qr;\n\nint singularity, rank, *p;\np = (int*)malloc(n*sizeof(int));\ndouble min_norm;\n</code></pre>"},{"location":"sparse_solver/cuSOLVER.html#solve","title":"Solve","text":"<pre><code>CUSOLVER_CALL(cusolverSpDcsrlsqvqrHost(solver-&gt;handle,\n                                  solver-&gt;m,\n                                  solver-&gt;m, \n                                  solver-&gt;nnz, \n                                  solver-&gt;descrA, \n                                  solver-&gt;val, \n                                  solver-&gt;rowA, \n                                  solver-&gt;colA, \n                                  b, \n                                  solver-&gt;tol,\n                                  &amp;rank,\n                                  x,\n                                  p,\n                                  &amp;min_norm));\n</code></pre>"},{"location":"sparse_solver/cuSOLVER.html#free-resources","title":"Free Resources","text":"<pre><code>CUSOLVER_CALL(cusolverSpDestroy(solver-&gt;handle));\nCUSPARSE_CALL(cusparseDestroyMatDescr(solver-&gt;descrA));\n</code></pre>"},{"location":"sparse_solver/cuSOLVER.html#compile-options","title":"Compile Options","text":"<pre><code>NVCC = nvcc\nNVCC_LD = -lcudart -lcusolver -lcusparse -lcublas\ndirect_solver:direct_solver.c\n    $(NVCC) -Xcompiler -std=c99 -w $&lt; -o $@ $(NVCC_LD)\n</code></pre>"},{"location":"sparse_solver/note.html","title":"CSR format","text":"<p> \u200b\u7ea6\u200b 48 \u200b\u4e2a\u200b\u5b57\u200b </p>"},{"location":"sparse_solver/note.html#csrcompressed-sparse-row-format","title":"CSR(Compressed Sparse Row Format)","text":"<ul> <li> <p>row_offset</p> <p>row[i], row[i+1] indicates the range of row i's elements' index in col_idx</p> <p>row_offset has \\(row\\_num + 1\\) elements</p> </li> </ul> <ul> <li> <p>col_idx</p> <p>col_idx has \\(row[row\\_num]\\) elements (0-based)</p> </li> </ul> <ul> <li> <p>value</p> <p>number of value = number of col_idx</p> </li> </ul> <p></p>"}]}